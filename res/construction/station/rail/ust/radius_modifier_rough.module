local coor = require "ust/coor"
local quat = require "ust/quaternion"
local livetext = require "ust/livetext"
local ust = require "ust"

local unpack = table.unpack
local insert = table.insert
local ma = math
local pi = ma.pi
local abs = ma.abs
local floor = math.floor

local fns = {
    preProcessAdd = function(modules, change, classedModules, info, data)
        if info.type == 80 and data == 1 then
            modules[ust.base(info.id, 80)] = nil
        elseif info.type == 80 and data == 0 then
            modules[ust.base(info.id, 80)] = change.module
        elseif info.type >= 81 and info.type <= 86 then
            ust.gridization(modules, classedModules)
            local id = info.id
            local m = modules[classedModules[id].slotId]
            
            if classedModules[id].slot[54] then
                modules[classedModules[id].slot[54]] = nil
            end
            
            if classedModules[id].slot[55] then
                modules[classedModules[id].slot[55]] = nil
            end
            
            if classedModules[id].slot[56] then
                modules[classedModules[id].slot[56]] = nil
            end
            
            modules[classedModules[id].slot[80]].variant = 1 - modules[classedModules[id].slot[80]].variant
            
            if info.type >= 81 and info.type <= 84 then
                local radius = m.info.radius
                
                local refArc = m.info.arcs.center
                local i = data
                local rad = (refArc.inf - refArc.sup) + i * pi / 180
                radius = -floor(20 / rad)
                
                if radius > 999999 then radius = 999999 elseif radius < -999999 then radius = -999999 end
                
                local addSlot = ust.mixData(ust.base(id, 54), radius > 0 and radius % 1000 or -(-radius % 1000))
                modules[addSlot] = {
                    metadata = {isData = true},
                    name = "station/rail/ust/data.module",
                    updateScript = {
                        fileName = "",
                        params = {}
                    },
                    variant = 0
                }
                
                local addSlot = ust.mixData(ust.base(id, 55), radius > 0 and floor(radius / 1000) or -(floor(-radius / 1000)))
                modules[addSlot] = {
                    metadata = {isData = true},
                    name = "station/rail/ust/data.module",
                    updateScript = {
                        fileName = "",
                        params = {}
                    },
                    variant = 0
                }
            end
        end
    end
}

local updateFn = function(result, transform, tag, slotId, addModelFn, params)
    if (params.fn) then
        return (fns and fns[params.fn]) and fns[params.fn](result, transform, tag, slotId, addModelFn) or false
    end
    
    local id = params.modules[slotId].info.id
    local sId = params.classedModules[id].slotId
    local info = params.modules[sId].info
    local makeData = params.modules[sId].makeData
    
    -- Entry for radius system
    local arcs = info.arcs
    local rad = (arcs.center.inf + arcs.center.sup) * 0.5
    local posL, posR = arcs.left:pt(rad), arcs.right:pt(rad)
    local vec = (posR - posL):normalized()
    local posC = (posR + posL) * 0.5
    local rotZ = quat.byVec(coor.xyz(1, 0, 0), vec):mRot()
    local transfPosC = rotZ * coor.trans(posC)
    
    table.insert(result.slots, {
        id = makeData(80, 1),
        transf = transfPosC,
        type = "ust_modifier",
        spacing = {0, 0, 0, 0}
    })
    
    -- Radius modify system
    local var = params.modules[params.classedModules[info.id].slot[80]].variant
    local rad = arcs.center.inf
    local posL, posR = arcs.left:pt(rad), arcs.right:pt(rad)
    local vec = (posR - posL):normalized()
    local posC = (posR + posL) * 0.5
    local rotZ = quat.byVec(coor.xyz(1, 0, 0), vec):mRot()
    local textR = info.radius >= 10e8 and "Râˆž" or string.format("R%d(%s)", abs(info.radius), info.radius < 0 and "-" or "+")
    
    local nameModelsF, width = livetext(2)(textR)
    for _, m in ipairs(nameModelsF(function() return coor.trans(coor.xyz(-0.5 * width, 0, -1)) * coor.rotX(-0.5 * pi) * rotZ * coor.trans(posC + coor.xyz(0, 0, 3)) end)) do
        table.insert(result.models, m)
    end
    
    local ptS, vecS = unpack(info.pts[1])
    vecS = vecS:normalized()
    for i = -60, 60, 1 do
        local rad = (arcs.center.inf - arcs.center.sup) + i * pi / 180
        if info.pos.y < 0 then rad = -rad end
        if (abs(rad) > 10e-3) then
            local r = 20 / rad
            if (abs(r) >= 50) then
                local o = ptS - (vecS * r .. coor.rotZ(pi * 0.5))
                local dst = o + (vecS * r .. coor.rotZ(pi * 0.5 - rad))
                insert(result.slots, {
                    id = makeData(83 + var, i),
                    transf = coor.scale(coor.xyz(0.05, 0.2, 1)) * coor.rotZ(arcs.center.inf - rad) * coor.trans(dst),
                    type = "ust_modifier",
                    shape = 2,
                    spacing = {0, 0, 0, 0}
                })
            end
        end
    end
end

function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        visible = false,
        buildMode = "SINGLE",
        cost = {
            price = 0,
        },
        description = {
            name = _("MENU_RADIUS_MODIFIER"),
            description = _("MENU_RADIUS_MODIFIER_DESC"),
        },
        category = {
            categories = {"modifiers"},
        },
        type = "ust_modifier",
        order = {
            value = 260,
        },
        metadata = {
            typeName = "ust_modifier",
            isData = true,
            type = 2
        },
        
        updateFn = updateFn,
        
        getModelsFn = function(params)
            return {}
        end
    }

end

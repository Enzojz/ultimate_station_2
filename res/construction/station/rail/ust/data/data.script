local coor = require "ust/coor"
local ust = require "ust"

local classifyPos = function(modules, classified, slotId)
    local type, id, data = ust.classifyData(modules, classified, slotId)
    local slotId = classified[id].slotId
    
    if (type == 51) then
        modules[slotId].info.pos = modules[slotId].info.pos + coor.xyz(data, 0, 0)
    elseif (type == 52) then
        modules[slotId].info.pos = modules[slotId].info.pos + coor.xyz(0, data, 0)
    elseif (type == 53) then
        modules[slotId].info.pos = modules[slotId].info.pos + coor.xyz(0, 0, data)
    end
end

local classifyRadius = function(modules, classified, slotId)
    local type, id, data = ust.classifyData(modules, classified, slotId)
    local slotId = classified[id].slotId
    
    if (type == 54) then
        modules[slotId].info.radius = (modules[slotId].info.radius or 0) + data
    elseif (type == 55) then
        modules[slotId].info.radius = (modules[slotId].info.radius or 0) + data * 1000
    elseif (type == 56) then
        modules[slotId].info.radius = nil
        modules[slotId].info.straight = true
    end
end

local classifyGeometry = function(modules, classified, slotId)
    local type, id, data = ust.classifyData(modules, classified, slotId)
    
    local slotId = classified[id].slotId
    
    if (type == 57) then
        modules[slotId].info.length = data
    elseif (type == 58) then
        modules[slotId].info.width = data * 0.1
    elseif (type == 59) then
        modules[slotId].info.extraHeight = data * 0.1
    elseif (type == 67) then
        modules[slotId].info.leftOverlap = data * 0.1
    elseif (type == 68) then
        modules[slotId].info.rightOverlap = data * 0.1
    elseif (type == 61) then
        modules[slotId].info.leftWallHeightInf = data * 0.1
    elseif (type == 62) then
        modules[slotId].info.leftWallHeightSup = data * 0.1
    elseif (type == 63) then
        modules[slotId].info.rightWallHeightInf = data * 0.1
    elseif (type == 64) then
        modules[slotId].info.rightWallHeightSup = data * 0.1
    end
end

local classifyRef = function(modules, classified, slotId)
    local type, id, data = ust.classifyData(modules, classified, slotId)
    local slotId = classified[id].slotId
    
    if (type == 60) then
        if not modules[slotId].info.ref then modules[slotId].info.ref = {} end
        if (bit32.band(data, 1) == 1) then
            modules[slotId].info.ref.left = true
        end
        if (bit32.band(data, 2) == 2) then
            modules[slotId].info.ref.right = true
        end
        if (bit32.band(data, 4) == 4) then
            modules[slotId].info.ref.next = true
        end
        if (bit32.band(data, 8) == 8) then
            modules[slotId].info.ref.prev = true
        end
    end
end

function data()
    return {
        classifyPos = classifyPos,
        classifyRadius = classifyRadius,
        classifyGeometry = classifyGeometry,
        classifyRef = classifyRef,
        classify = ust.classifyData,
        slotSetup = function(params, result, slotId)
            local info = params.modules[slotId].info
            local id = info.id
            local parent = params.classedModules[id].slotId
            local m = params.modules[parent]
            table.insert(result.slots, {
                id = slotId,
                transf = m.info.transf,
                type = "ust_data",
                spacing = {0, 0, 0, 0}
            })
        end
    }

end

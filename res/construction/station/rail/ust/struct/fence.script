local coor = require "ust/coor"
local ust = require "ust"
local general = require "ust/general"
local quat = require "ust/quaternion"


local dump = require "luadump"
local insert = table.insert

local addSlot = function(params, result)
    for id, info in pairs(params.classedModules) do
        local module = params.modules[info.slotId]
        if module.metadata and (module.metadata.isPlatform or module.metadata.isTrack) then
            local info = module.info
            local makeData = module.makeData
            
            local octa7 = params.modules[info.octa[7]]
            local octa3 = params.modules[info.octa[3]]
            
            local n = 2
            
            local ptsL, vecL = ust.basePts(info.arcs.left, n)
            local ptsR, vecR = ust.basePts(info.arcs.right, n)
            local refH = (module.metadata.isPlatform and params.platformHeight or 0) + (info.extraHeight or 0)
            
            if not (module.metadata.isTrack and octa7 and octa7.isPlatform and octa7.info.extraHeight == info.extraHeight) then
                local refPtL = ptsL[2] + coor.xyz(0, 0, refH)
                local refVecL = vecL[2]
                
                local transfL =
                    quat.byVec(coor.xyz(1, 0, 0), refVecL):mRot()
                    * coor.trans(refPtL)
                
                insert(
                    result.slots, {
                        id = makeData(24, 7),
                        transf = coor.scale(coor.xyz(5, 0.2, 0)) * transfL,
                        type = "ust_component_fence",
                        spacing = {0, 0, 0, 0}
                    })
            end
            
            if not (module.metadata.isTrack and octa3 and octa3.isPlatform and octa3.info.extraHeight == info.extraHeight) then
                local refPtR = ptsR[2] + coor.xyz(0, 0, refH)
                local refVecR = vecR[2]
                
                local transfR =
                    quat.byVec(coor.xyz(1, 0, 0), refVecR):mRot()
                    * coor.trans(refPtR)
                
                insert(
                    result.slots, {
                        id = makeData(24, 3),
                        transf = coor.scale(coor.xyz(5, 0.2, 0)) * transfR,
                        type = "ust_component_fence",
                        spacing = {0, 0, 0, 0}
                    })
            end
            
            
            if not info.octa[1] then
                local refPt = ptsR[3]:avg(ptsL[3]) + coor.xyz(0, 0, refH)
                local refVec = (ptsR[3] - ptsL[3]):normalized()
                
                local transf =
                    quat.byVec(coor.xyz(1, 0, 0), refVec):mRot()
                    * coor.trans(refPt)
                
                insert(
                    result.slots, {
                        id = makeData(24, 1),
                        transf = coor.scale(coor.xyz(2, 0.2, 0)) * transf,
                        type = "ust_component_fence",
                        spacing = {0, 0, 0, 0}
                    })
            end
            
            if not info.octa[5] then
                local refPt = ptsR[1]:avg(ptsL[1]) + coor.xyz(0, 0, refH)
                local refVec = (ptsR[1] - ptsL[1]):normalized()
                
                local transf =
                    quat.byVec(coor.xyz(1, 0, 0), refVec):mRot()
                    * coor.trans(refPt)
                
                insert(
                    result.slots, {
                        id = makeData(24, 5),
                        transf = coor.scale(coor.xyz(2, 0.2, 0)) * transf,
                        type = "ust_component_fence",
                        spacing = {0, 0, 0, 0}
                    })
            end
        end
    end
end


local updateFn = function(result, transform, tag, slotId, addModelFn, params, config)
    local id = params.modules[slotId].info.id
    local m = params.modules[params.classedModules[id].slotId]
    local info = m.info
    local extraHeight = info.extraHeight or 0
    local data = params.modules[slotId].info.data
    local isPlatform = m.metadata.isPlatform
    
    local hRef = isPlatform and params.platformHeight or 0
    local hVec = coor.xyz(0, 0, hRef + extraHeight)
    local hTrans = coor.trans(hVec)
    
    insert(
        result.slots, {
            id = m.makeData(24, 10 + data),
            transf = transform,
            type = "ust_color",
            spacing = {0, 0, 0, 0}
        })
    
    local colorModule = params.modules[m.makeData(24, 20 + data)]
    local color = colorModule and colorModule.metadata.color or "green"
    
    -- if n == 0 then n = 1 end
    if data == 3 or data == 7 then
        local n = 20 / config.width
        local pts, vec = ust.basePts(data == 3 and info.arcs.right or info.arcs.left, n)
        
        for i = 1, n do
            local refPt = pts[i]:avg(pts[i + 1])
            local refVec = pts[i] - pts[i + 1]
            local lengthScale = refVec:length() / config.width
            local transf = hTrans
                * coor.scaleX(lengthScale)
                * quat.byVec(coor.xyz(data == 7 and 1 or -1, 0, 0), refVec):mRot()
                * coor.trans(refPt)
            
            insert(result.models, general.newModel(config.fence:format(color), tag, transf));
        end
        
        for i = 1, n + 1 do
            local refPt = pts[i]
            local refVec = vec[i]
            local transf = hTrans
                * quat.byVec(coor.xyz(data == 7 and 1 or -1, 0, 0), refVec):mRot()
                * coor.trans(refPt)
            
            insert(result.models, general.newModel(config.pole:format(color), tag, transf));
        end
    elseif data == 1 or data == 5 then
        local rank = data == 5 and 1 or 3
        local n = 2
        local ptsL = ust.basePts(info.arcs.left, n)
        local ptsR = ust.basePts(info.arcs.right, n)
        
        local vec = (ptsR[rank] - ptsL[rank]):normalized()
        
        for i = 1, 2 do
            local refPt = ptsL[rank] + (ptsR[rank] - ptsL[rank]) * (i * 2 - 1) / 4
            local transf = hTrans
                * coor.scaleX(2.5 / config.width)
                * quat.byVec(coor.xyz(data == 1 and -1 or 1, 0, 0), vec):mRot()
                * coor.trans(refPt)
            
            insert(result.models, general.newModel(config.fence:format(color), tag, transf));
        end
        
        for i = 1, 3 do
            local refPt = ptsL[rank] + (ptsR[rank] - ptsL[rank]) * (i - 1) / 2
            local transf = hTrans
                * quat.byVec(coor.xyz(data == 1 and -1 or 1, 0, 0), vec):mRot()
                * coor.trans(refPt)
            
            insert(result.models, general.newModel(config.pole:format(color), tag, transf));
        end
    end

end

local preProcessRemove = function(modules, change, classedModules, info)
    modules[change.slotId] = nil
    if modules[change.slotId + ust.mixData(0, 20)] then
        modules[change.slotId + ust.mixData(0, 20)] = nil
    end
end

function data()
    return {
        classify = ust.classifyComp,
        addSlot = addSlot,
        updateFn = updateFn,
        preProcessRemove = preProcessRemove
    }
end

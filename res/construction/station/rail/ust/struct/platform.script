local func = require "ust/func"
local pipe = require "ust/pipe"
local coor = require "ust/coor"
local quat = require "ust/quaternion"
local ust = require "ust"
local arc = require "ust/coorarc"
local line = require "ust/coorline"
local livetext = require "ust/livetext"
local ustg = require "ust_gridization"

local insert = table.insert
local ma = math
local pi = ma.pi
local abs = ma.abs

local getTranfs = function(info, pos, width)
    local refArc = info.arcs.center
    if pos == 1 then
        local fwPt = refArc.sup + 0.5 * (refArc.sup - refArc.inf)
        return quat.byVec(coor.xyz(0, 1, 0), refArc:tangent(fwPt)):mRot() * coor.trans(refArc:pt(fwPt))
    elseif pos == 3 then
        local pt = 0.5 * (refArc.sup + refArc.inf)
        local transf = quat.byVec(coor.xyz(0, 1, 0), refArc:tangent(pt)):mRot() * coor.trans(refArc:pt(pt))
        return coor.transX(width) * transf
    elseif pos == 5 then
        local bwPt = refArc.inf - 0.5 * (refArc.sup - refArc.inf)
        return quat.byVec(coor.xyz(0, -1, 0), refArc:tangent(bwPt)):mRot() * coor.trans(refArc:pt(bwPt))
    elseif pos == 7 then
        local pt = 0.5 * (refArc.sup + refArc.inf)
        local transf = quat.byVec(coor.xyz(0, 1, 0), refArc:tangent(pt)):mRot() * coor.trans(refArc:pt(pt))
        return coor.transX(-width) * transf
    else
        local pt = 0.5 * (refArc.sup + refArc.inf)
        return quat.byVec(coor.xyz(0, 1, 0), refArc:tangent(pt)):mRot() * coor.trans(refArc:pt(pt))
    end
end

local preProcessAdd = function(modules, change, classedModules, info)
    local maxId = func.max(func.keys(classedModules))
    
    if (info.data == -1) then
        local id = info.id
        local slotId = classedModules[id].slotId
        modules[slotId].name = change.module.name
    else
        local grid = ust.octa(modules, classedModules)

        local refModule = modules[classedModules[info.id].slotId]
        local refPos = refModule.info.pos
        
        local pos = ({
            [1] = coor.xyz(0, 1, 0),
            [3] = coor.xyz(1, 0, 0),
            [5] = coor.xyz(0, -1, 0),
            [7] = coor.xyz(-1, 0, 0)
        })[info.data] + refPos
        
        
        local x, y, z = pos.x, pos.y, pos.z
        local octa = {
            [5] = grid[z][x] and grid[z][x][y - 1] or nil,
            [1] = grid[z][x] and grid[z][x][y + 1] or nil,
            [7] = grid[z][x - 1] and grid[z][x - 1][y] or nil,
            [3] = grid[z][x + 1] and grid[z][x + 1][y] or nil,
            [6] = grid[z][x - 1] and grid[z][x - 1][y - 1] or nil,
            [4] = grid[z][x + 1] and grid[z][x + 1][y - 1] or nil,
            [8] = grid[z][x - 1] and grid[z][x - 1][y + 1] or nil,
            [2] = grid[z][x + 1] and grid[z][x + 1][y + 1] or nil,
        }
        
        local function isTrack(pos)
            return octa[pos] and (modules[octa[pos]].metadata.isTrack or modules[octa[pos]].metadata.isStreet or modules[octa[pos]].metadata.isPlaceholder)
        end
        
        local function isPlatform(pos)
            return octa[pos] and modules[octa[pos]].metadata.isPlatform
        end
        
        local function isEmpty(pos)
            return not octa[pos] and not modules[octa[pos]]
        end
        
        local ref = {}
        if isTrack(3) and isTrack(7) then
            ref = {left = true, right = true}
        elseif isTrack(7) and not isPlatform(3) then
            ref = {left = true}
        elseif isTrack(3) and not isPlatform(7) then
            ref = {right = true}
        
        elseif isPlatform(7) and isPlatform(3) then
            ref = {left = true, right = true}
        elseif isPlatform(7) then
            ref = {left = true}
        elseif isPlatform(3) then
            ref = {right = true}
        
        elseif isPlatform(1) and isPlatform(5) then
            ref = {prev = true}
        elseif isPlatform(1) then
            ref = {next = true}
        elseif isPlatform(5) then
            ref = {prev = true}
        
        elseif isEmpty(3) and isEmpty(7) and not isEmpty(1) and not isEmpty(5) then
            ref = {prev = true}
        elseif isEmpty(3) and isEmpty(7) and not isEmpty(5) then
            ref = {prev = true}
        elseif isEmpty(3) and isEmpty(7) and not isEmpty(1) then
            ref = {next = true}
        end

        local width = change.module.metadata.width
        local leftOverlap = 0
        local rightOverlap = 0
        if isPlatform(5) then
            width = modules[octa[5]].info.width
            leftOverlap = modules[octa[5]].info.leftOverlap
            rightOverlap = modules[octa[5]].info.rightOverlap
        elseif isPlatform(1) then
            width = modules[octa[1]].info.width
            leftOverlap = modules[octa[1]].info.leftOverlap
            rightOverlap = modules[octa[1]].info.rightOverlap
        end        
        
        local newInfo = {
            id = maxId + 1,
            type = change.module.metadata.typeId,
            pos = pos,
            length = 20,
            width = width,
            leftOverlap = leftOverlap,
            rightOverlap = rightOverlap,
            ref = ref
        }
        local slotId, dataIds = ust.slotIds(newInfo)
        
        modules[slotId] = change.module
        
        for m, slotIds in pairs(dataIds) do
            for _, slotId in ipairs(slotIds) do
                modules[slotId] = {
                    metadata = {isData = true},
                    name = string.format("station/rail/ust/data/%s.module", m),
                    updateScript = {
                        fileName = "",
                        params = {}
                    },
                    variant = 0
                }
            
            end
        end
    end
end

local slotSetup = function(params, result, slotId)
    local module = params.modules[slotId]
    local info = params.modules[slotId].info
    local makeData = params.modules[slotId].makeData
    local pos = info.pos
        
    insert(result.slots, {
        id = slotId,
        transf = module.info.transf,
        type = module.metadata.typeName,
        spacing = {0, 0, 0, 0}
    })
    
    do
        local octaModules = {}
        for i = 1, 8 do
            octaModules[i] = info.octa[i] and params.modules[info.octa[i]] or false
        end
        if info.id ~= 1 and not (
            octaModules[1] and octaModules[1].info.ref.prev
            or octaModules[5] and octaModules[5].info.ref.next
            or octaModules[3] and octaModules[3].info.ref.left
            or octaModules[7] and octaModules[7].info.ref.right)
        then
            insert(result.slots, {
                id = makeData(2, -2),
                transf = info.transf,
                type = "ust_remove",
                spacing = {0, 0, 0, 0}
            })
        end
    end
    
    -- SLot to replace itself
    insert(
        result.slots,
        {
            id = makeData(1, -1),
            transf = info.transf,
            type = "ust_track",
            spacing = {0, 0, 0, 0}
        }
    )
    insert(
        result.slots,
        {
            id = makeData(4, -1),
            transf = info.transf,
            type = "ust_street",
            spacing = {0, 0, 0, 0}
        }
    )
    insert(
        result.slots,
        {
            id = makeData(2, -1),
            transf = info.transf,
            type = "ust_platform",
            spacing = {0, 0, 0, 0}
        }
    )
    insert(
        result.slots,
        {
            id = makeData(3, -1),
            transf = info.transf,
            type = "ust_placeholder",
            spacing = {0, 0, 0, 0}
        }
    )
    ust.initSlotGrid(params, pos)
    local newTopologySlots = ust.newTopologySlots(params, makeData, pos)
    
    if not (info.octa[3]) then
        local transf = getTranfs(info, 3, info.width)
        newTopologySlots(pos.x + 1, pos.y, transf, 3)
    end
    
    if not (info.octa[7]) then
        local transf = getTranfs(info, 7, info.width)
        newTopologySlots(pos.x - 1, pos.y, transf, 7)
    end
    
    if not info.octa[1] then
        local transf = getTranfs(info, 1, info.width)
        newTopologySlots(pos.x, pos.y + 1, transf, 1)
    end
    
    if not info.octa[5] then
        local transf = getTranfs(info, 5, info.width)
        newTopologySlots(pos.x, pos.y - 1, transf, 5)
    end
end

local preProcessRemove = function(modules, change, classedModules, info)
    if info.id ~= 1 then
        ust.octa(modules, classedModules)
        local info = modules[change.slotId].info
        local octaModules = {}
        for i = 1, 8 do
            octaModules[i] = info.octa[i] and modules[info.octa[i]] or false
        end
        if not (
            octaModules[1] and octaModules[1].info.ref.prev
            or octaModules[5] and octaModules[5].info.ref.next
            or octaModules[3] and octaModules[3].info.ref.left
            or octaModules[7] and octaModules[7].info.ref.right)
        then
            modules[change.slotId] = nil
            for slotId, m in pairs(modules) do
                local __, moduleId = ust.slotInfo(slotId)
                if moduleId == info.id then
                    modules[slotId] = nil
                end
            end
        end
    end
end

---@alias grid integer[][][]
-- It's a long single-usage function so I seperate it
---@param arc arc
---@return fun(l: line, ptvec: coor3[])
local calculateLimit = function(arc)
        ---@param l line
        ---@param ptvec coor3[]
        ---@return number
        return function(l, ptvec)
            local pt = func.min(arc / l, function(lhs, rhs) return (lhs - ptvec[1]):withZ(0):length2() < (rhs - ptvec[1]):withZ(0):length2() end)
            return arc:rad(pt)
        end
end

local function isTrackOrStreet(module)
    return module.metadata.isTrack or module.metadata.isStreet
end

---Recalculate the baseline for platforms
---@param x number
---@param y number
---@param z number
---@param data any
local platformArcs = function(x, y, z, data)
    local slotId = data.grid[z][x][y]
    local m = data.modules[slotId]
    local ref = m.info.ref
    
    local refModule = function(offset)
        local refModule = data.modules[data.grid[z][x + offset][y]]
        local refO = refModule.info.arcs.center.o:withZ(m.info.height)
        local refRadius = refModule.info.radius + (data.xState.pos[x] - data.xState.pos[x + offset])
        return refModule,
            function() return arc.byOR(refO, refRadius - m.info.width * 0.5, refModule.info.arcs.center:limits()) end,
            function() return arc.byOR(refO, refRadius + m.info.width * 0.5, refModule.info.arcs.center:limits()) end
    end
    
    local calculate = function(arcL, arcR, refModule, refModule2)
        local supFar = function(ar)
            return m.info.octa[1] and ar:rad(data.modules[m.info.octa[1]].info.pts[1][1]) or ar:rad(data.yState.pos)
        end
        local infFar = function(ar, refModule)
            return m.info.refPos.y == 0
                and refModule.info.arcs.center.inf
                or (m.info.octa[5] and ar:rad(data.modules[m.info.octa[5]].info.pts[2][1]) or ar:rad(data.yState.pos))
        end
        local limit = function(limL, limR, p, fFar)
            if refModule2 and isTrackOrStreet(refModule) and isTrackOrStreet(refModule2) then
                -- Two sides are tracks
                local limit = refModule.info.pts[p][1]:avg(refModule2.info.pts[p][1])
                local vecLimL = (refModule.info.radius > 0 and (refModule.info.pts[p][1] - arcL.o) or (arcL.o - refModule.info.pts[p][1])):withZ(0):normalized()
                local vecLimR = (refModule2.info.radius > 0 and (refModule2.info.pts[p][1] - arcR.o) or (arcR.o - refModule2.info.pts[p][1])):withZ(0):normalized()
                local lim = line.byVecPt((vecLimL + vecLimR):normalized(), limit)
                return
                    calculateLimit(arcL)(lim, refModule.info.pts[p]),
                    calculateLimit(arcR)(lim, refModule2.info.pts[p]),
                    fFar(arcL, refModule), fFar(arcR, refModule2)
            elseif refModule2 and isTrackOrStreet(refModule2) and not isTrackOrStreet(refModule) then
                local lim = refModule2.info.limits[p]
                return
                    limL,
                    calculateLimit(arcR)(lim, refModule2.info.pts[p]),
                    fFar(arcL, refModule), fFar(arcR, refModule2)
            elseif refModule2 and isTrackOrStreet(refModule) and not isTrackOrStreet(refModule2) then
                local lim = refModule2.info.limits[p]
                return
                    calculateLimit(arcL)(lim, refModule.info.pts[p]),
                    limR,
                    fFar(arcL, refModule), fFar(arcR, refModule2)
            elseif isTrackOrStreet(refModule) and not refModule2 then
                local lim = refModule.info.limits[p]
                return
                    calculateLimit(arcL)(lim, refModule.info.pts[p]),
                    calculateLimit(arcR)(lim, refModule.info.pts[p]),
                    fFar(arcL, refModule), fFar(arcR, refModule)
            else
                return limL, limR,
                    fFar(arcL, refModule), fFar(arcR, refModule2 or refModule)
            end
        end
        if m.info.refPos.y < 0 then
            local infL, infR, supL, supR = limit(refModule.info.arcs.center.inf, (refModule2 or refModule).info.arcs.center.inf, 1, supFar)
            arcL = arcL:withLimits({inf = infL, sup = supL})
            arcR = arcR:withLimits({inf = infR, sup = supR})
        else
            local supL, supR, infL, infR = limit(refModule.info.arcs.center.sup, (refModule2 or refModule).info.arcs.center.sup, 2, infFar)
            arcL = arcL:withLimits({inf = infL, sup = supL})
            arcR = arcR:withLimits({inf = infR, sup = supR})
        end
        return arcL, arcR
    end
    
    local arcL, arcR
    local realigned = false
    if ref.left or ref.right then
        if ref.left and ref.right then
            local leftModule, fArL = refModule(-1)
            local rightModule, _, fArR = refModule(1)
            arcL = fArL()
            arcR = fArR()
            arcL, arcR = calculate(arcL, arcR, leftModule, rightModule)
        elseif ref.left then
            local leftModule, fArL, fArR = refModule(-1)
            arcL = fArL()
            arcR = fArR()
            arcL, arcR = calculate(arcL, arcR, leftModule)
        elseif ref.right then
            local rightModule, fArL, fArR = refModule(1)
            arcL = fArL()
            arcR = fArR()
            arcL, arcR = calculate(arcL, arcR, rightModule)
        end
        
        -- For continuity between segments
        if (m.info.octa[5] and data.modules[m.info.octa[5]].info.calculateTag) then
            local arcs = data.modules[m.info.octa[5]].info.arcs
            
            arcL = arcL:withLimits({
                sup = arcL:rad(arcL:pt(arcL.sup)),
                inf = arcL:rad(arcs.left:pt(arcs.left.sup))
            })
            
            arcR = arcR:withLimits({
                sup = arcR:rad(arcR:pt(arcR.sup)),
                inf = arcR:rad(arcs.right:pt(arcs.right.sup))
            })
        end
        
        if (m.info.octa[1] and data.modules[m.info.octa[1]].info.calculateTag) then
            local arcs = data.modules[m.info.octa[1]].info.arcs
            arcL = arcL:withLimits({
                inf = arcL:rad(arcL:pt(arcL.inf)),
                sup = arcL:rad(arcs.left:pt(arcs.left.inf))
            })
            
            arcR = arcR:withLimits({
                inf = arcR:rad(arcR:pt(arcR.inf)),
                sup = arcR:rad(arcs.right:pt(arcs.right.inf))
            })
        end
        realigned = true
    elseif ref.prev then
        local arcs = data.modules[m.info.octa[5]].info.arcs
        
        arcL = arc.byOR(arcs.left.o:withZ(m.info.height), arcs.left.r, arcs.left:limits())
        arcR = arc.byOR(arcs.right.o:withZ(m.info.height), arcs.right.r, arcs.right:limits())
        
        arcL = arcL:withLimits({
            inf = arcL.sup,
            sup = arcL.sup + arcL.sup - arcL.inf
        })
        
        arcR = arcR:withLimits({
            inf = arcR.sup,
            sup = arcR.sup - arcR.inf + arcR.sup
        })
        
        realigned = true
    elseif ref.next then
        local arcs = data.modules[m.info.octa[1]].info.arcs
        
        arcL = arc.byOR(arcs.left.o:withZ(m.info.height), arcs.left.r, arcs.left:limits())
        arcR = arc.byOR(arcs.right.o:withZ(m.info.height), arcs.right.r, arcs.right:limits())
        
        arcL = arcL:withLimits({
            sup = arcL.inf,
            inf = arcL.inf + arcL.inf - arcL.sup
        })
        
        arcR = arcR:withLimits({
            sup = arcR.inf,
            inf = arcR.inf + arcR.inf - arcR.sup
        })
        
        realigned = true
    end
    
    local pts = {
        arcL:pt(arcL.inf):avg(arcR:pt(arcR.inf)),
        nil,
        arcL:pt(arcL.sup):avg(arcR:pt(arcR.sup))
    }
    pts[2] = arcL:ptByPt(pts[1]:avg(pts[3])):avg(arcR:ptByPt(pts[1]:avg(pts[3])))
    
    -- Recalculte central arc
    if realigned then
        local midPts = {
            pts[1]:avg(pts[2]),
            pts[3]:avg(pts[2])
        }
        
        local lines = {
            line.pend(line.byPtPt(pts[1], pts[2]), midPts[1]),
            line.pend(line.byPtPt(pts[3], pts[2]), midPts[2]),
        }
        
        local o = lines[1] - lines[2]
        if not o then
            local halfChordLength2 = (pts[3] - pts[1]):length2() * 0.25
            local normalLength = math.sqrt(ust.infi * ust.infi - halfChordLength2)
            local midPt = pts[1]:avg(pts[3])
            o = midPt + ((pts[3] - pts[1]):normalized() .. coor.rotZ90P) * normalLength
            r = ust.infi
        end
        
        o = o:withZ(m.info.height)
        
        local vecInf = pts[1] - o
        local vecSup = pts[3] - o
        
        local r = vecInf:length()
        if r > ust.infi then
            local halfChordLength2 = (pts[3] - pts[1]):length2() * 0.25
            local normalLength = math.sqrt(ust.infi * ust.infi - halfChordLength2)
            o = pts[1]:avg(pts[3]) + (o - pts[2]):normalized() * normalLength
            vecInf = pts[1] - o
            vecSup = pts[3] - o
            r = ust.infi
        end
        local ar = arc.byOR(o, r)
        
        local inf = ar:rad(pts[1])

        local length = math.asin(vecInf:cross(vecSup).z / (r * r)) * r
        local sup = inf + length / r
        
        ar = ar:withLimits({
            sup = sup,
            inf = inf
        })
        
        m.info.radius = (length > 0 and 1 or -1) * r
        m.info.length = math.abs(length)
        
        m.info.arcs = {
            left = arcL,
            right = arcR,
            center = ar
        }
    end

    m.info.pts = ustg.refArc2Pts(m.info.arcs)
    m.info.calculateTag = true;
end

local function gridization(x, y, z, data)
    local slotId = data.grid[z][x][y]
    ustg.calculateRaidus(x, y, z, data)
    ustg.genericArcs(x, y, z, data)
    
    coroutine.yield()
    -- Platform on second loop
    platformArcs(x, y, z, data)
    
    local refArc = data.modules[slotId].info.arcs
    
    data.modules[slotId].info.transf =
        quat.byVec(coor.xyz(0, 1, 0), refArc.center:tangent((refArc.center.inf + refArc.center.sup) * 0.5)):mRot() *
        coor.trans(refArc.center:pt((refArc.center.inf + refArc.center.sup) * 0.5))
end

---@param modules table<slotid, module>
---@param classified classified_modules
---@param slotId slotid
---@param params any
local postClassify = function(modules, classified, slotId, params)
    modules[slotId].info.height = params.platformHeight + (modules[slotId].info.extraHeight or 0)
end

---@param modules table<slotid, module>
---@param classified classified_modules
---@param slotId slotid
---@param params any
local postClassifyPlaceholder = function(modules, classified, slotId, params)
    modules[slotId].info.height = modules[slotId].info.extraHeight or 0
end

local updateFn = function(result, transform, tag, slotId, addModelFn, params, config)
    local info = params.modules[slotId].info
    local isTrack = {}
    local isPlatform = {}
    local octaModules = {}
    for i = 1, 8 do
        if info.octa[i] then
            octaModules[i] = info.octa[i] and params.modules[info.octa[i]]
            isTrack[i] = octaModules[i].metadata and (octaModules[i].metadata.isTrack or octaModules[i].metadata.isStreet) or false
            isPlatform[i] = octaModules[i].metadata and octaModules[i].metadata.isPlatform or false
        else
            octaModules[i] = false
            isTrack[i] = false
            isPlatform[i] = false
        end
    end
    
    local leftConnected = isPlatform[7] and (octaModules[7].info.ref.right or info.ref.left) and octaModules[7].info.height == info.height
    local rightConnected = isPlatform[3] and (octaModules[3].info.ref.left or info.ref.right) and octaModules[3].info.height == info.height
    
    local leftOverlap = isPlatform[7] and 0 or (info.leftOverlap or 0)
    local rightOverlap = isPlatform[3] and 0 or (info.rightOverlap or 0)
    
    local n = 4
    
    local leftPts = ust.basePts(info.arcs.left, n)
    local rightPts = ust.basePts(info.arcs.right, n)
    local centerPts, centerVecs = ust.basePts(info.arcs.center, n)
    
    local leftEdge = {}
    local rightEdge = {}
    local leftCentre = {}
    local rightCentre = {}
    local leftLaneBorder = {}
    local rightLaneBorder = {}
    local leftLane = {}
    local rightLane = {}
    local leftInterPts = {}
    local rightInterPts = {}
    local centerLane = {}
    
    for i = 1, n + 1 do
        local vec = (leftPts[i] - rightPts[i]):normalized()
        leftEdge[i] = leftPts[i] + vec * leftOverlap
        rightEdge[i] = rightPts[i] - vec * rightOverlap
        leftCentre[i] = leftPts[i] + vec * leftOverlap - vec * config.edgeWidth
        rightCentre[i] = rightPts[i] - vec * rightOverlap + vec * config.edgeWidth
        
        leftLaneBorder[i] = leftPts[i]
        rightLaneBorder[i] = rightPts[i]
        
        local vec = (leftLaneBorder[i] - rightLaneBorder[i]):normalized()
        
        leftLane[i] = leftLaneBorder[i] - vec * 1.2
        rightLane[i] = rightLaneBorder[i] + vec * 1.2
        centerLane[i] = centerPts[i]
    end
    
    params.extra[slotId] = {
        leftLane = leftLane,
        rightLane = rightLane
    }
    
    if not isPlatform[1] then
        leftLaneBorder[n + 1] = leftLaneBorder[n + 1] + (leftLaneBorder[n] - leftLaneBorder[n + 1]):normalized()
        rightLaneBorder[n + 1] = rightLaneBorder[n + 1] + (rightLaneBorder[n] - rightLaneBorder[n + 1]):normalized()
        leftLane[n + 1] = leftLane[n + 1] + (leftLane[n] - leftLane[n + 1]):normalized()
        rightLane[n + 1] = rightLane[n + 1] + (rightLane[n] - rightLane[n + 1]):normalized()
        centerLane[n + 1] = centerLane[n + 1] + (centerLane[n] - centerLane[n + 1]):normalized()
    end
    
    if not isPlatform[5] then
        leftLaneBorder[1] = leftLaneBorder[1] + (leftLaneBorder[2] - leftLaneBorder[1]):normalized()
        rightLaneBorder[1] = rightLaneBorder[1] + (rightLaneBorder[2] - rightLaneBorder[1]):normalized()
        leftLane[1] = leftLane[1] + (leftLane[2] - leftLane[1]):normalized()
        rightLane[1] = rightLane[1] + (rightLane[2] - rightLane[1]):normalized()
        centerLane[1] = centerLane[1] + (centerLane[2] - centerLane[1]):normalized()
    end
    
    for i = 1, n + 1 do
        local interLength = (leftLane[i] - rightLane[i]):length() / 2
        local interSegs = interLength < 2.5 and 1 or (math.floor(interLength / 2.5) + 1)
        local leftInterVec = (centerLane[i] - leftLane[i]) / interSegs
        local rightInterVec = (centerLane[i] - rightLane[i]) / interSegs
        leftInterPts[i] = func.seqMap({0, interSegs}, function(n) return leftLane[i] + leftInterVec * n end)
        rightInterPts[i] = func.seqMap({0, interSegs}, function(n) return rightLane[i] + rightInterVec * n end)
    end
    
    for i = 1, n do
        local sup = i + 1
        local inf = i
        
        local isFirst = i == 1
        local isLast = i == 4
        
        local centre = {
            lt = leftCentre[sup],
            rt = rightCentre[sup],
            lb = leftCentre[inf],
            rb = rightCentre[inf],
        }
        
        local width_centre = abs((centre.lt:avg(centre.lb) - centre.rt:avg(centre.rb)):length())
        local n_center = math.floor(width_centre / 3.3 + 0.75)
        local vect = (centre.rt - centre.lt) / n_center
        local vecb = (centre.rb - centre.lb) / n_center
        local centres = func.map(
            func.seq(1, n_center or 1),
            function(n) return {
                lt = centre.lt + vect * (n - 1),
                rt = centre.lt + vect * n,
                lb = centre.lb + vecb * (n - 1),
                rb = centre.lb + vecb * n,
            } end)
        
        local left = {
            lt = leftEdge[sup],
            rt = leftCentre[sup],
            lb = leftEdge[inf],
            rb = leftCentre[inf],
        }
        
        local right = {
            lt = rightCentre[sup],
            rt = rightEdge[sup],
            lb = rightCentre[inf],
            rb = rightEdge[inf],
        }
        
        
        local addBlock = function(mdl, pos)
            insert(result.models, ust.newModel(config.path .. mdl .. "_tl.mdl", tag, config.fitMdl[mdl](pos, true)));
            insert(result.models, ust.newModel(config.path .. mdl .. "_br.mdl", tag, config.fitMdl[mdl](pos, false)));
        end
        local addLastBlock = function(mdl, pos)
            insert(result.models, ust.newModel(config.path .. mdl .. "_br.mdl", tag, coor.rotZ(pi) * config.fitMdl[mdl](pos, true)));
            insert(result.models, ust.newModel(config.path .. mdl .. "_tl.mdl", tag, coor.rotZ(pi) * config.fitMdl[mdl](pos, false)));
        end
        
        if isLast then
            if isTrack[1] then
                func.forEach(centres, function(centre)addLastBlock("ye_centre_t", centre) end)
            elseif not info.octa[1] then
                if (leftConnected and isPlatform[8]) or (rightConnected and isPlatform[4]) then
                    func.forEach(centres, function(centre)addLastBlock("ye_centre_t", centre) end)
                else
                    func.forEach(centres, function(centre)addLastBlock("ye_centre", centre) end)
                end
            else
                func.forEach(centres, function(centre)addLastBlock("yi_centre", centre) end)
            end
        elseif isFirst then
            if isTrack[5] then
                func.forEach(centres, function(centre)addBlock("ye_centre_t", centre) end)
            elseif not info.octa[5] then
                if (isPlatform[4] and rightConnected) or (leftConnected and isPlatform[6]) then
                    func.forEach(centres, function(centre)addBlock("ye_centre_t", centre) end)
                else
                    func.forEach(centres, function(centre)addBlock("ye_centre", centre) end)
                end
            else
                func.forEach(centres, function(centre)addBlock("yi_centre", centre) end)
            end
        else
            func.forEach(centres, function(centre)addBlock("yi_centre", centre) end)
        end
        
        if leftConnected then
            if isLast then
                if isTrack[1] or (isPlatform[8] and not isPlatform[1]) then
                    addLastBlock("xi_ye_right_t", left)
                elseif not isPlatform[1] then
                    addLastBlock("xi_ye_right", left)
                elseif not isPlatform[8] and isPlatform[1] then
                    addLastBlock("xi_yi_right_x", left)
                else
                    addLastBlock("xi_yi_right", left)
                end
            elseif isFirst then
                if isTrack[5] or (isPlatform[6] and not isPlatform[5]) then
                    addBlock("xi_ye_left_t", left)
                elseif not isPlatform[5] then
                    addBlock("xi_ye_left", left)
                elseif not isPlatform[6] and isPlatform[5] then
                    addBlock("xi_yi_left_x", left)
                else
                    addBlock("xi_yi_left", left)
                end
            else
                addBlock("xi_yi_left", left)
            end
        else
            if isLast and not isPlatform[1] then
                addLastBlock("xe_ye_right", left)
            elseif isFirst and not isPlatform[5] then
                addBlock("xe_ye_left", left)
            else
                addBlock("xe_yi_left", left)
            end
        end
        
        if rightConnected then
            if isLast then
                if isTrack[1] or (isPlatform[2] and not isPlatform[1]) then
                    addLastBlock("xi_ye_left_t", right)
                elseif not isPlatform[1] then
                    addLastBlock("xi_ye_left", right)
                elseif not isPlatform[2] and isPlatform[1] then
                    addLastBlock("xi_yi_left_x", right)
                else
                    addLastBlock("xi_yi_left", right)
                end
            elseif isFirst then
                if isTrack[5] or (isPlatform[4] and not isPlatform[5]) then
                    addBlock("xi_ye_right_t", right)
                elseif not isPlatform[5] then
                    addBlock("xi_ye_right", right)
                elseif not isPlatform[4] and isPlatform[5] then
                    addBlock("xi_yi_right_x", right)
                else
                    addBlock("xi_yi_right", right)
                end
            else
                addBlock("xi_yi_right", right)
            end
        else
            if isLast and not isPlatform[1] then
                addLastBlock("xe_ye_left", right)
            elseif isFirst and not isPlatform[5] then
                addBlock("xe_ye_right", right)
            else
                addBlock("xe_yi_right", right)
            end
        end
        
        local isLeftTerminal = isTrack[7] and octaModules[7].info.trackGroup and octaModules[7].info.trackGroup.right
        local isRightTerminal = isTrack[3] and octaModules[3].info.trackGroup and octaModules[3].info.trackGroup.left
        
        local addLeftTerminals = isLeftTerminal and function(f, t)
            local trackGroup = octaModules[7].info.trackGroup.right
            insert(result.models, ust.unitLane(f, t, tag, config.laneMdl))
            if not params.platformGroup[trackGroup] then params.platformGroup[trackGroup] = {models = {}, left = true} end
            insert(params.platformGroup[trackGroup].models, #result.models - 1)
        end or function(f, t)
            insert(result.models, ust.unitLane(f, t, tag))
        end
        
        local addRightTerminals = isRightTerminal and function(f, t)
            local trackGroup = octaModules[3].info.trackGroup.left
            insert(result.models, ust.unitLane(f, t, tag, config.laneMdl))
            
            if not params.platformGroup[trackGroup] then params.platformGroup[trackGroup] = {models = {}, right = true} end
            insert(params.platformGroup[trackGroup].models, #result.models - 1)
        end or function(f, t)
            insert(result.models, ust.unitLane(f, t, tag))
        end
        
        
        addLeftTerminals(leftLane[inf], leftLane[sup])
        if leftConnected then
            insert(result.models, ust.unitLane(leftLane[inf], leftLaneBorder[inf], tag))
            if isLast and not isPlatform[1] then
                insert(result.models, ust.unitLane(leftLane[sup], leftLaneBorder[sup], tag))
            end
        end
        
        addRightTerminals(rightLane[sup], rightLane[inf])
        if rightConnected then
            insert(result.models, ust.unitLane(rightLane[inf], rightLaneBorder[inf], tag))
            if isLast and not isPlatform[1] then
                insert(result.models, ust.unitLane(rightLane[sup], rightLaneBorder[sup], tag))
            end
        end
        
        for n = 1, #leftInterPts[inf] - 1 do
            insert(result.models, ust.unitLane(leftInterPts[inf][n], leftInterPts[inf][n + 1], tag))
        end
        for n = 1, #rightInterPts[inf] - 1 do
            insert(result.models, ust.unitLane(rightInterPts[inf][n], rightInterPts[inf][n + 1], tag))
        end
        
        -- intermediate lanes
        if #leftInterPts[inf] == #leftInterPts[sup] then
            for n = 2, #leftInterPts[inf] - 1 do
                addLeftTerminals(leftInterPts[inf][n], leftInterPts[sup][n])
            end
        else
            local short = leftInterPts[#leftInterPts[inf] < #leftInterPts[sup] and inf or sup]
            local long = leftInterPts[#leftInterPts[inf] > #leftInterPts[sup] and inf or sup]
            
            for n = 2, #long - 1 do
                local vec = func.min(func.map(short, function(pt) return pt - long[n] end), function(lhs, rhs) return lhs:length2() < rhs:length2() end)
                addLeftTerminals(leftInterPts[inf][n], leftInterPts[sup][n])
            end
        end
        
        if #rightInterPts[inf] == #rightInterPts[sup] then
            for n = 2, #rightInterPts[inf] - 1 do
                addRightTerminals(rightInterPts[sup][n], rightInterPts[inf][n])
            end
        else
            local short = rightInterPts[#rightInterPts[inf] < #rightInterPts[sup] and inf or sup]
            local long = rightInterPts[#rightInterPts[inf] > #rightInterPts[sup] and inf or sup]
            
            for n = 2, #long - 1 do
                local vec = func.min(func.map(short, function(pt) return pt - long[n] end), function(lhs, rhs) return lhs:length2() < rhs:length2() end)
                addRightTerminals(long[n] + vec, long[n])
                if (isTrack[7] and octaModules[7].info.trackGroup and octaModules[7].info.trackGroup.right) then
                    local trackGroup = octaModules[7].info.trackGroup.right
                    if not params.platformGroup[trackGroup] then params.platformGroup[trackGroup] = {models = {}, left = true} end
                    insert(params.platformGroup[trackGroup].models, #result.models - 1)
                end
            end
        end
        
        
        if isFirst and not isPlatform[5] then
            insert(result.models, ust.unitLane(centerLane[sup], centerLane[inf], tag))
            
            local vecLeft = (centerPts[inf] - leftPts[inf]) / (#leftInterPts[inf] - 1)
            for n = 1, #leftInterPts[inf] do
                insert(result.models, ust.unitLane(leftPts[inf] + vecLeft * (n - 1), leftInterPts[inf][n], tag))
            end
            
            local vecRight = (centerPts[inf] - rightPts[inf]) / (#rightInterPts[inf] - 1)
            for n = 1, #rightInterPts[inf] - 1 do
                insert(result.models, ust.unitLane(rightPts[inf] + vecRight * (n - 1), rightInterPts[inf][n], tag))
            end
        end
        if isLast and not isPlatform[1] then
            insert(result.models, ust.unitLane(centerLane[sup], centerLane[inf], tag))
            
            local vecLeft = (centerPts[sup] - leftPts[sup]) / (#leftInterPts[sup] - 1)
            for n = 1, #leftInterPts[sup] do
                insert(result.models, ust.unitLane(leftPts[sup] + vecLeft * (n - 1), leftInterPts[sup][n], tag))
            end
            
            local vecRight = (centerPts[sup] - rightPts[sup]) / (#rightInterPts[sup] - 1)
            for n = 1, #rightInterPts[sup] - 1 do
                insert(result.models, ust.unitLane(rightPts[sup] + vecRight * (n - 1), rightInterPts[sup][n], tag))
            end
            
            for n = 1, #leftInterPts[sup] - 1 do
                insert(result.models, ust.unitLane(leftInterPts[sup][n], leftInterPts[sup][n + 1], tag))
            end
            for n = 1, #rightInterPts[sup] - 1 do
                insert(result.models, ust.unitLane(rightInterPts[sup][n], rightInterPts[sup][n + 1], tag))
            end
        end
    end
    
    local face = pipe.new + leftEdge + func.rev(rightEdge)
    
    ust.initTerrainList(result, info.id)
    
    insert(result.terrainLists[info.id].equal, face * pipe.map(function(v) return v .. coor.transZ(-info.height + (info.extraHeight or 0)) end) * pipe.map(coor.vec2Tuple))
    result.groundFaceLists[info.id] = {
        face = func.map(face, coor.vec2Tuple),
        modes = {
            {
                type = "FILL",
                key = "shared/asphalt_01.gtex.lua"
            },
            {
                type = "STROKE_OUTER",
                key = "street_border.lua"
            },
        },
    }
    
    if params.debug == 1 then
        local text = tostring(info.id)
        local pos = string.format("(%d, %d)", info.pos.x, info.pos.y)
        
        local addText = function(label, fAlign, h)
            local nameModelsF, width = livetext(h or 2)(label)
            for _, m in ipairs(nameModelsF(function() return coor.trans(fAlign(width)) * coor.rotX90N * info.transf end)) do
                table.insert(result.models, m)
            end
        end
        
        addText(text, function(w) return coor.xyz(-0.5 * w, 0, 0) end)
        addText(pos, function(w) return coor.xyz(-0.5 * w, 0, -2) end, 0.75)
        
        ust.marking(result, slotId, params)
    end
end

function data()
    return {
        preClassify = ust.preClassify,
        postClassify = postClassify,
        postClassifyPlaceholder = postClassifyPlaceholder,
        preProcessAdd = preProcessAdd,
        preProcessRemove = preProcessRemove,
        slotSetup = slotSetup,
        gridization = gridization,
        updateFn = updateFn
    }

end

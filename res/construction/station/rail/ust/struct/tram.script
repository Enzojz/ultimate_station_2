local ust = require "ust"
local coor = require "ust/coor"

local insert = table.insert

local setTram = function(modules, classedModules, slotId, module)
    local lut = {}
    local function searchModules(slotId)
        lut[slotId] = true
        local m = modules[slotId]
        local info = m.info
        for _, octa in ipairs({info.octa[1], info.octa[5]}) do
            if octa and modules[octa] and modules[octa].metadata.isStreet then
                if not lut[octa] then
                    searchModules(octa)
                end
            end
        end
    end
    searchModules(slotId)
    for slotId, _ in pairs(lut) do
        local m = modules[slotId]
        if module then
            modules[m.makeData(27, 1)] = module
        else
            for _, slotId in ipairs(m.info.compList[27]) do
                modules[slotId] = nil
            end
        end
    end
end

local preProcessAdd = function(modules, change, classedModules, info)
    ust.octa(modules, classedModules)
    if info.data == 1 then
        setTram(modules, classedModules, classedModules[info.id].slotId, change.module)
    elseif info.data == -2 then
        setTram(modules, classedModules, classedModules[info.id].slotId)
    end
end

local addSlot = function(params, result)
    for id, info in pairs(params.classedModules) do
        local module = params.modules[info.slotId]
        if (module.metadata and module.metadata.isStreet) then
            local info = module.info
            local makeData = module.makeData
            local transf = info.transf * coor.transZ(info.height)
            if not info.comp[27] or makeData(27, 1) == info.compList[27][1] then
                insert(result.slots, {
                    id = makeData(27, 1),
                    transf = transf,
                    type = "ust_tram",
                    spacing = {0, 0, 0, 0}
                })
            else
                insert(result.slots, {
                    id = makeData(27, -2),
                    transf = coor.scale(coor.xyz(1, 0.1, 1)) * coor.rotZ(0.25 * math.pi) * transf,
                    type = "ust_tram",
                    spacing = {0, 0, 0, 0}
                })
                insert(result.slots, {
                    id = makeData(27, -2),
                    transf = coor.scale(coor.xyz(1, 0.1, 1)) * coor.rotZ(-0.25 * math.pi) * transf,
                    type = "ust_tram",
                    spacing = {0, 0, 0, 0}
                })
            end
        end
    end
end

function data()
    return {
        preProcessAdd = preProcessAdd,
        addSlot = addSlot,
        classify = ust.classifyComp
    }

end

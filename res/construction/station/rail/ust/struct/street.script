local func = require "ust/func"
local coor = require "ust/coor"
local pipe = require "ust/pipe"
local ust = require "ust"
local quat = require "ust/quaternion"
local livetext = require "ust/livetext"

local ustg = require "ust_gridization"

local insert = table.insert

local preProcessAdd = function(modules, change, classedModules, info)
    local maxId = func.max(func.keys(classedModules))
    if (info.data == -1) then
        local id = info.id
        local slotId = classedModules[id].slotId
        modules[slotId].name = change.module.name
    else
        local grid = ust.octa(modules, classedModules)
        
        local refPos = modules[classedModules[info.id].slotId].info.pos
        local pos = ({
            [1] = coor.xyz(0, 1, 0),
            [3] = coor.xyz(1, 0, 0),
            [5] = coor.xyz(0, -1, 0),
            [7] = coor.xyz(-1, 0, 0)
        })[info.data] + refPos
        
        local x, y, z = pos.x, pos.y, pos.z
        
        local octa = {
            [5] = grid[z][x] and grid[z][x][y - 1] or nil,
            [1] = grid[z][x] and grid[z][x][y + 1] or nil,
            [7] = grid[z][x - 1] and grid[z][x - 1][y] or nil,
            [3] = grid[z][x + 1] and grid[z][x + 1][y] or nil,
            [6] = grid[z][x - 1] and grid[z][x - 1][y - 1] or nil,
            [4] = grid[z][x + 1] and grid[z][x + 1][y - 1] or nil,
            [8] = grid[z][x - 1] and grid[z][x - 1][y + 1] or nil,
            [2] = grid[z][x + 1] and grid[z][x + 1][y + 1] or nil,
        }
        
        local function isTrack(pos)
            return octa[pos] and (modules[octa[pos]].metadata.isTrack or modules[octa[pos]].metadata.isStreet or modules[octa[pos]].metadata.isPlaceholder)
        end
        
        local function isPlatform(pos)
            return octa[pos] and modules[octa[pos]].metadata.isPlatform
        end
        
        local ref = {}
        if isTrack(1) then
            ref = {next = true}
        elseif isTrack(5) then
            ref = {prev = true}
        elseif isTrack(3) then
            ref = {right = true}
        elseif isTrack(7) then
            ref = {left = true}
        elseif isPlatform(1) then
            ref = {next = true}
        elseif isPlatform(5) then
            ref = {prev = true}
        elseif isPlatform(3) then
            ref = {right = true}
        elseif isPlatform(7) then
            ref = {left = true}
        end
        
        local newInfo = {
            id = maxId + 1,
            type = change.module.metadata.typeId,
            pos = pos,
            length = 20,
            width = change.module.metadata.width,
            ref = ref,
            extraHeight = (isTrack(5) and modules[octa[5]].info.extraHeight) or (isTrack(1) and modules[octa[1]].info.extraHeight) or nil
        }
        local slotId, dataIds = ust.slotIds(newInfo)
        modules[slotId] = change.module
        for m, slotIds in pairs(dataIds) do
            for _, slotId in ipairs(slotIds) do
                modules[slotId] = {
                    metadata = {isData = true},
                    name = string.format("station/rail/ust/data/%s.module", m),
                    updateScript = {
                        fileName = "",
                        params = {}
                    },
                    variant = 0
                }
            
            end
        end
    end
end

local preProcessRemove = function(modules, change, classedModules, info)
    if info.id ~= 1 then
        ust.octa(modules, classedModules)
        local info = modules[change.slotId].info
        local octaModules = {}
        for i = 1, 8 do
            octaModules[i] = info.octa[i] and modules[info.octa[i]] or false
        end
        if not (
            octaModules[1] and octaModules[1].info.ref.prev
            or octaModules[5] and octaModules[5].info.ref.next
            or octaModules[3] and octaModules[3].info.ref.left
            or octaModules[7] and octaModules[7].info.ref.right)
        then
            modules[change.slotId] = nil
            for slotId, m in pairs(modules) do
                local __, moduleId = ust.slotInfo(slotId)
                if moduleId == info.id then
                    modules[slotId] = nil
                end
            end
        end
    end
end

local slotSetup = function(params, result, slotId)
    local module = params.modules[slotId]
    local info = params.modules[slotId].info
    local makeData = params.modules[slotId].makeData
    
    local arcs = info.arcs
    
    local pos = info.pos
    local metadata = params.modules[slotId].metadata
    local refArc = arcs.center
    
    insert(result.slots, {
        id = slotId,
        transf = module.info.transf,
        type = module.metadata.typeName,
        spacing = {0, 0, 0, 0}
    })
    
    do
        local octaModules = {}
        for i = 1, 8 do
            octaModules[i] = info.octa[i] and params.modules[info.octa[i]] or false
        end
        if info.id ~= 1 and not (
            octaModules[1] and octaModules[1].info.ref.prev
            or octaModules[5] and octaModules[5].info.ref.next
            or octaModules[3] and octaModules[3].info.ref.left
            or octaModules[7] and octaModules[7].info.ref.right)
        then
            insert(result.slots, {
                id = makeData(4, -2),
                transf = info.transf,
                type = "ust_remove",
                spacing = {0, 0, 0, 0}
            })
        end
    end
    
    insert(
        result.slots,
        {
            id = makeData(1, -1),
            transf = info.transf,
            type = "ust_track",
            spacing = {0, 0, 0, 0}
        }
    )
    insert(
        result.slots,
        {
            id = makeData(4, -1),
            transf = info.transf,
            type = "ust_street",
            spacing = {0, 0, 0, 0}
        }
    )
    if (info.id ~= 1) then -- id 1 must be a track
        insert(
            result.slots,
            {
                id = makeData(2, -1),
                transf = info.transf,
                type = "ust_platform",
                spacing = {0, 0, 0, 0}
            }
    )
    end
    
    ust.initSlotGrid(params, pos)
    local newTopologySlots = ust.newTopologySlots(params, makeData, pos)
    
    if not (info.octa[3]) then
        local transf = coor.transX(metadata.width) * info.transf
        newTopologySlots(pos.x + 1, pos.y, transf, 3)
    end
    
    if not (info.octa[7]) then
        local transf = coor.transX(-metadata.width) * info.transf
        newTopologySlots(pos.x - 1, pos.y, transf, 7)
    end
    
    if not info.octa[1] then
        local fwPt = refArc.sup + 0.5 * (refArc.sup - refArc.inf)
        local transf = quat.byVec(coor.xyz(0, 1, 0), refArc:tangent(fwPt)):mRot() * coor.trans(refArc:pt(fwPt))
        newTopologySlots(pos.x, pos.y + 1, transf, 1)
    end
    
    if not info.octa[5] then
        local bwPt = refArc.inf - 0.5 * (refArc.sup - refArc.inf)
        local transf = quat.byVec(coor.xyz(0, -1, 0), refArc:tangent(bwPt)):mRot() * coor.trans(refArc:pt(bwPt))
        newTopologySlots(pos.x, pos.y - 1, transf, 5)
    end
end

local function gridization(x, y, z, data)
    local slotId = data.grid[z][x][y]
    
    ustg.calculateRaidus(x, y, z, data)
    ustg.genericArcs(x, y, z, data)
    
    coroutine.yield()
    
    local refArc = data.modules[slotId].info.arcs
        
    data.modules[slotId].info.transf =
        quat.byVec(coor.xyz(0, 1, 0), refArc.center:tangent((refArc.center.inf + refArc.center.sup) * 0.5)):mRot() *
        coor.trans(refArc.center:pt((refArc.center.inf + refArc.center.sup) * 0.5))
    
end

---@param modules table<slotid, module>
---@param classified classified_modules
---@param slotId slotid
---@param params any
local postClassify = function(modules, classified, slotId, params)
    modules[slotId].info.height = params.refHeight + (modules[slotId].info.extraHeight or 0)
end

local fitModels = {
    paving = ust.fitModel(1, 1, 1, true, true),
    tram = ust.fitModel(2, 0.2, 1, true, true)
}

local gap = 0.01

function data()
    return {
        preProcessAdd = preProcessAdd,
        preProcessRemove = preProcessRemove,
        slotSetup = slotSetup,
        preClassify = ust.preClassify,
        postClassify = postClassify,
        getModelsFn = function(params)
            return {}
        end,
        gridization = gridization
    }

end

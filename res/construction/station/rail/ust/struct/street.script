local func = require "ust/func"
local coor = require "ust/coor"
local pipe = require "ust/pipe"
local ust = require "ust"
local quat = require "ust/quaternion"
local livetext = require "ust/livetext"

local ustg = require "ust_gridization"

local insert = table.insert

local preProcessAdd = function(modules, change, classedModules, info)
    local maxId = func.max(func.keys(classedModules))
    if (info.data == -1) then
        local id = info.id
        local slotId = classedModules[id].slotId
        modules[slotId].name = change.module.name
    else
        local grid = ust.octa(modules, classedModules)
        
        local refPos = modules[classedModules[info.id].slotId].info.pos
        local pos = ({
            [1] = coor.xyz(0, 1, 0),
            [3] = coor.xyz(1, 0, 0),
            [5] = coor.xyz(0, -1, 0),
            [7] = coor.xyz(-1, 0, 0)
        })[info.data] + refPos
        
        local x, y, z = pos.x, pos.y, pos.z
        
        local octa = {
            [5] = grid[z][x] and grid[z][x][y - 1] or nil,
            [1] = grid[z][x] and grid[z][x][y + 1] or nil,
            [7] = grid[z][x - 1] and grid[z][x - 1][y] or nil,
            [3] = grid[z][x + 1] and grid[z][x + 1][y] or nil,
            [6] = grid[z][x - 1] and grid[z][x - 1][y - 1] or nil,
            [4] = grid[z][x + 1] and grid[z][x + 1][y - 1] or nil,
            [8] = grid[z][x - 1] and grid[z][x - 1][y + 1] or nil,
            [2] = grid[z][x + 1] and grid[z][x + 1][y + 1] or nil,
        }
        
        local function isTrack(pos)
            return octa[pos] and (modules[octa[pos]].metadata.isTrack or modules[octa[pos]].metadata.isStreet or modules[octa[pos]].metadata.isPlaceholder)
        end
        
        local function isPlatform(pos)
            return octa[pos] and modules[octa[pos]].metadata.isPlatform
        end
        
        local ref = {}
        if isTrack(1) then
            ref = {next = true}
        elseif isTrack(5) then
            ref = {prev = true}
        elseif isTrack(3) then
            ref = {right = true}
        elseif isTrack(7) then
            ref = {left = true}
        elseif isPlatform(1) then
            ref = {next = true}
        elseif isPlatform(5) then
            ref = {prev = true}
        elseif isPlatform(3) then
            ref = {right = true}
        elseif isPlatform(7) then
            ref = {left = true}
        end
        
        local newInfo = {
            id = maxId + 1,
            type = change.module.metadata.typeId,
            pos = pos,
            length = 20,
            width = change.module.metadata.width,
            ref = ref,
            extraHeight = (isTrack(5) and modules[octa[5]].info.extraHeight) or (isTrack(1) and modules[octa[1]].info.extraHeight) or nil
        }
        local slotId, dataIds = ust.slotIds(newInfo)
        modules[slotId] = change.module
        for m, slotIds in pairs(dataIds) do
            for _, slotId in ipairs(slotIds) do
                modules[slotId] = {
                    metadata = {isData = true},
                    name = string.format("station/rail/ust/data/%s.module", m),
                    updateScript = {
                        fileName = "",
                        params = {}
                    },
                    variant = 0
                }
            
            end
        end
    end
end

local preProcessRemove = function(modules, change, classedModules, info)
    if info.id ~= 1 then
        ust.octa(modules, classedModules)
        local info = modules[change.slotId].info
        local octaModules = {}
        for i = 1, 8 do
            octaModules[i] = info.octa[i] and modules[info.octa[i]] or false
        end
        if not (
            octaModules[1] and octaModules[1].info.ref.prev
            or octaModules[5] and octaModules[5].info.ref.next
            or octaModules[3] and octaModules[3].info.ref.left
            or octaModules[7] and octaModules[7].info.ref.right)
        then
            modules[change.slotId] = nil
            for slotId, m in pairs(modules) do
                local __, moduleId = ust.slotInfo(slotId)
                if moduleId == info.id then
                    modules[slotId] = nil
                end
            end
        end
    end
end

local slotSetup = function(params, result, slotId)
    local module = params.modules[slotId]
    local info = params.modules[slotId].info
    local makeData = params.modules[slotId].makeData
    
    local arcs = info.arcs
    
    local pos = info.pos
    local metadata = params.modules[slotId].metadata
    local refArc = arcs.center
    
    insert(result.slots, {
        id = slotId,
        transf = module.info.transf,
        type = module.metadata.typeName,
        spacing = {0, 0, 0, 0}
    })
    
    do
        local octaModules = {}
        for i = 1, 8 do
            octaModules[i] = info.octa[i] and params.modules[info.octa[i]] or false
        end
        if info.id ~= 1 and not (
            octaModules[1] and octaModules[1].info.ref.prev
            or octaModules[5] and octaModules[5].info.ref.next
            or octaModules[3] and octaModules[3].info.ref.left
            or octaModules[7] and octaModules[7].info.ref.right)
        then
            insert(result.slots, {
                id = makeData(4, -2),
                transf = info.transf,
                type = "ust_remove",
                spacing = {0, 0, 0, 0}
            })
        end
    end
    
    insert(
        result.slots,
        {
            id = makeData(1, -1),
            transf = info.transf,
            type = "ust_track",
            spacing = {0, 0, 0, 0}
        }
    )
    insert(
        result.slots,
        {
            id = makeData(4, -1),
            transf = info.transf,
            type = "ust_street",
            spacing = {0, 0, 0, 0}
        }
    )
    if (info.id ~= 1) then -- id 1 must be a track
        insert(
            result.slots,
            {
                id = makeData(2, -1),
                transf = info.transf,
                type = "ust_platform",
                spacing = {0, 0, 0, 0}
            }
    )
    end
    
    ust.initSlotGrid(params, pos)
    local newTopologySlots = ust.newTopologySlots(params, makeData, pos)
    
    if not (info.octa[3]) then
        local transf = coor.transX(metadata.width) * info.transf
        newTopologySlots(pos.x + 1, pos.y, transf, 3)
    end
    
    if not (info.octa[7]) then
        local transf = coor.transX(-metadata.width) * info.transf
        newTopologySlots(pos.x - 1, pos.y, transf, 7)
    end
    
    if not info.octa[1] then
        local fwPt = refArc.sup + 0.5 * (refArc.sup - refArc.inf)
        local transf = quat.byVec(coor.xyz(0, 1, 0), refArc:tangent(fwPt)):mRot() * coor.trans(refArc:pt(fwPt))
        newTopologySlots(pos.x, pos.y + 1, transf, 1)
    end
    
    if not info.octa[5] then
        local bwPt = refArc.inf - 0.5 * (refArc.sup - refArc.inf)
        local transf = quat.byVec(coor.xyz(0, -1, 0), refArc:tangent(bwPt)):mRot() * coor.trans(refArc:pt(bwPt))
        newTopologySlots(pos.x, pos.y - 1, transf, 5)
    end
end

local function gridization(x, y, z, data)
    local slotId = data.grid[z][x][y]
    
    ustg.calculateRaidus(x, y, z, data)
    ustg.genericArcs(x, y, z, data)
    
    coroutine.yield()
    
    local refArc = data.modules[slotId].info.arcs
    
    data.modules[slotId].info.transf =
        quat.byVec(coor.xyz(0, 1, 0), refArc.center:tangent((refArc.center.inf + refArc.center.sup) * 0.5)):mRot() *
        coor.trans(refArc.center:pt((refArc.center.inf + refArc.center.sup) * 0.5))

end

---@param modules table<slotid, module>
---@param classified classified_modules
---@param slotId slotid
---@param params any
local postClassify = function(modules, classified, slotId, params)
    modules[slotId].info.height = params.refHeight + (modules[slotId].info.extraHeight or 0)
end

local fitModels = {
    paving = ust.fitModel(1, 1, 1, true, true),
    tram = ust.fitModel(2, 0.2, 1, true, true)
}

local gap = 0.01

local updateFn = function(result, transform, tag, slotId, addModelFn, params, prefix)
    local info = params.modules[slotId].info
    local function setPos()
        if info.trackGroup.right then
            local trackGroup = params.trackGroup[info.trackGroup.right]
            local n = #trackGroup
            hasCenterNode = n % 2 == 1 and (n + 1) / 2 == info.trackGroup.rightPos
            hasInfNode = n % 2 == 0 and (n / 2) == info.trackGroup.rightPos - 1
            hasSupNode = n % 2 == 0 and (n / 2) == info.trackGroup.rightPos
            
            if hasCenterNode then
                local pos = {{0, 0.3}, {0.7, 1}}
                local posCore = {{0.3 + gap, 0.5}, {0.5, 0.7 - gap}}
                local conn = {{0.7 - gap, 0.7}, {0.3 + gap, 0.3}}
                local node = 1
                return {pos, posCore}, conn, node, {0, 1, 2, 3}, {1, 1}, {1, 4}
            elseif hasInfNode then
                local pos = {{0.2, 1}}
                local posCore = {{0, 0.2 - gap}}
                local conn = {{0.2 - gap, 0.2}}
                local node = 0
                return {pos, posCore}, conn, node, {0, 1}, {2, 1}, {1, 2}
            elseif hasSupNode then
                local pos = {{0, 0.8}}
                local posCore = {{0.8 + gap, 1}}
                local conn = {{0.8, 0.8 + gap}}
                return {pos, posCore}, conn, nil, {0, 1}, {1, 1}, {2, 2}
            elseif (info.octa[1] and params.modules[info.octa[1]].metadata.isStreet) or (info.octa[5] and params.modules[info.octa[5]].metadata.isStreet) then
                return {{{0, 1}}}, nil, nil, {0, 1}, {1, 1}, {1, 2}
            else
                return {{{0, 0.5}, {0.5, 1}}}, nil, nil, {0, 1, 2, 3}, {1, 1}, {1, 4}
            end
        elseif info.trackGroup.left then
            local trackGroup = params.trackGroup[info.trackGroup.left]
            local n = #trackGroup
            hasCenterNode = n % 2 == 1 and (n + 1) / 2 == info.trackGroup.leftPos
            hasInfNode = n % 2 == 0 and (n / 2) == info.trackGroup.leftPos - 1
            hasSupNode = n % 2 == 0 and (n / 2) == info.trackGroup.leftPos
            
            if hasCenterNode then
                local pos = {{1, 0.7}, {0.3, 0}}
                local posCore = {{0.7 - gap, 0.5}, {0.5, 0.3 + gap}}
                local conn = {{0.7 - gap, 0.7}, {0.3 + gap, 0.3}}
                local node = 1
                return {pos, posCore}, conn, node, {3, 2, 1, 0}, {1, 4}, {1, 1}
            elseif hasSupNode then
                local pos = {{0.8, 0}}
                local posCore = {{1, 0.8 + gap}}
                local conn = {{0.8, 0.8 + gap}}
                local node = 0
                return {pos, posCore}, conn, node, {1, 0}, {1, 2}, {2, 1}
            elseif hasInfNode then
                local pos = {{1, 0.2}}
                local posCore = {{0.2 - gap, 0}}
                local conn = {{0.2 - gap, 0.2}}
                return {pos, posCore}, conn, nil, {1, 0}, {2, 2}, {1, 1}
            elseif (info.octa[1] and params.modules[info.octa[1]].metadata.isStreet) or (info.octa[5] and params.modules[info.octa[5]].metadata.isStreet) then
                return {{{1, 0}}}, nil, nil, {1, 0}, {1, 2}, {1, 1}
            else
                return {{{1, 0.5}, {0.5, 0}}}, nil, nil, {3, 2, 1, 0}, {1, 4}, {1, 1}
            end
        elseif (info.octa[1] and params.modules[info.octa[1]].metadata.isStreet) or (info.octa[5] and params.modules[info.octa[5]].metadata.isStreet) then
            return {{{0, 1}}}, nil, nil, {0, 1}, {1, 1}, {1, 2}
        else
            return {{{0, 0.5}, {0.5, 1}}}, nil, nil, {0, 1, 2, 3}, {1, 1}, {1, 4}
        end
    end
    
    local pos, conn, node, seqNodes, bNode, eNode = setPos()
    
    params.edgeIndex[slotId] = {#result.edgeLists + bNode[1], bNode[2], #result.edgeLists + eNode[1], eNode[2], #result.edgeLists + 1}
    
    local e = func.map(pos,
        pipe.map(function(idx)
            local inf = info.arcs.center.inf * (1 - idx[1]) + info.arcs.center.sup * idx[1]
            local sup = info.arcs.center.inf * (1 - idx[2]) + info.arcs.center.sup * idx[2]
            local length = (idx[2] - idx[1]) * info.length
            return {
                {
                    info.arcs.center:pt(inf),
                    info.arcs.center:tangent(inf) * length
                },
                {
                    info.arcs.center:pt(sup),
                    info.arcs.center:tangent(sup) * length
                }
            }
        end)
    )
    local edges = {
        type = "STREET",
        alignTerrain = true,
        params = {
            type = ("ust/%s.lua"):format(prefix),
            tramTrackType = "NO"
        },
        edges = pipe.new * e[1] * pipe.flatten() * pipe.map(pipe.map(coor.vec2Tuple)),
        snapNodes = func.filter({(not info.octa[1]) and seqNodes[#seqNodes], (not info.octa[5]) and seqNodes[1]}, pipe.noop()),
        freeNodes = {},
        seqNodes = seqNodes,
        tag2nodes = {
            [tag] = seqNodes
        },
        slot = slotId
    }
    
    insert(result.edgeLists, edges)
    
    if e[2] then
        local edgesCore = {
            type = "STREET",
            alignTerrain = true,
            params = {
                type = ("ust/%s_core.lua"):format(prefix),
                tramTrackType = "NO"
            },
            edges = pipe.new * e[2] * pipe.flatten() * pipe.map(pipe.map(coor.vec2Tuple)),
            snapNodes = {},
            freeNodes = {},
            seqNodes = seqNodes,
            tag2nodes = {
                [tag] = seqNodes
            },
            slot = slotId
        }
        
        if node then
            local nodes = func.mapFlatten(result.edgeLists, function(e) return e.edges end)
            result.terminalGroups[info.trackGroup.left or info.trackGroup.right].vehicleNodeOverride = #nodes + node
        end
        insert(result.edgeLists, edgesCore)
        for _, conn in ipairs(conn) do
            local ptC = pipe.new * conn
                * pipe.map(function(c) return info.arcs.center.inf * (1 - c) + info.arcs.center.sup * c end)
                * pipe.map(function(rad) return info.arcs.center:pt(rad) end)
            
            insert(result.models, ust.unitLane(ptC[1], ptC[2], tag, "ust/transport_lane.mdl"))
            
            local ptRef = pipe.new * conn
                * pipe.map(function(c) return info.arcs.left.inf * (1 - c) + info.arcs.left.sup * c end)
                * pipe.map(function(rad) return info.arcs.left:pt(rad) end)
            
            local vecs = func.map2(ptC, ptRef, function(ptC, ptL) return (ptL - ptC):normalized() end)
            
            local ptL = func.map2(ptC, vecs, function(pt, vec) return pt + vec end)
            local ptR = func.map2(ptC, vecs, function(pt, vec) return pt - vec end)
            
            local centre = {
                lt = ptR[2],
                rt = ptL[2],
                rb = ptL[1],
                lb = ptR[1],
            }
            
            insert(result.invokeLater, function()
                if info.tramTrack then
                    insert(result.models, ust.newModel(("ust/paving/%s/tram_tl.mdl"):format(prefix), tag, fitModels.tram(centre, true)));
                    insert(result.models, ust.newModel(("ust/paving/%s/tram_br.mdl"):format(prefix), tag, fitModels.tram(centre, false)));
                    insert(result.models, ust.newModel(("ust/paving/%s/tram_paving_tl.mdl"):format(prefix), tag, fitModels.tram(centre, true)));
                    insert(result.models, ust.newModel(("ust/paving/%s/tram_paving_br.mdl"):format(prefix), tag, fitModels.tram(centre, false)));
                end
            end)
        end
    end
    
    local n = 4
    
    local leftPts = ust.basePts(info.arcs.left, n)
    local rightPts = ust.basePts(info.arcs.right, n)
    
    
    for i = 1, n do
        local sup = i + 1
        local inf = i
        local centre = {
            lt = leftPts[sup],
            rt = rightPts[sup],
            lb = leftPts[inf],
            rb = rightPts[inf],
        }
        
        insert(result.models, ust.newModel(("ust/paving/%s/paving_tl.mdl"):format(prefix), tag, fitModels.paving(centre, true)));
        insert(result.models, ust.newModel(("ust/paving/%s/paving_br.mdl"):format(prefix), tag, fitModels.paving(centre, false)));
    end
    
    if (info.octa[1] and params.modules[info.octa[1]].metadata.isStreet) then
        insert(result.invokeLater, function()
            local indexL = params.edgeIndex[slotId]
            local indexR = params.edgeIndex[info.octa[1]]
            local edgesL = result.edgeLists[indexL[3]]
            local edgesR = result.edgeLists[indexR[1]]
            local nodeL = edgesL.edges[indexL[4]]
            local nodeR = edgesR.edges[indexR[2]]
            local ptL = coor.tuple2Vec(nodeL[1])
            local ptR = coor.tuple2Vec(nodeR[1])
            local pt = ptL:avg(ptR):toTuple()
            result.edgeLists[indexL[3]].edges[indexL[4]][1] = pt
            result.edgeLists[indexR[1]].edges[indexR[2]][1] = pt
        end)
    end
    
    local face = pipe.new + leftPts + func.rev(rightPts)
    ust.initTerrainList(result, info.id)
    result.groundFaceLists[info.id] = {
        face = func.map(face, coor.vec2Tuple),
        modes = {
            {
                type = "FILL",
                key = "shared/asphalt_01.gtex.lua"
            },
            {
                type = "STROKE_OUTER",
                key = "street_border.lua"
            },
        },
    }
    
    if params.debug == 1 then
        local text = tostring(info.id)
        local pos = string.format("(%d, %d)", info.pos.x, info.pos.y)
        
        local addText = function(label, fAlign, h)
            local nameModelsF, width = livetext(h or 2)(label)
            for _, m in ipairs(nameModelsF(function() return coor.trans(fAlign(width)) * coor.rotX90N * info.transf end)) do
                table.insert(result.models, m)
            end
        end
        
        addText(text, function(w) return coor.xyz(-0.5 * w, 0, 0) end)
        addText(pos, function(w) return coor.xyz(-0.5 * w, 0, -2) end, 0.75)
        
        ust.marking(result, slotId, params)
    end
end

function data()
    return {
        preProcessAdd = preProcessAdd,
        preProcessRemove = preProcessRemove,
        slotSetup = slotSetup,
        preClassify = ust.preClassify,
        postClassify = postClassify,
        getModelsFn = function(params)
            return {}
        end,
        gridization = gridization,
        updateFn = updateFn
    }

end

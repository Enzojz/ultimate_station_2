local ust = require "ust"
local func = require "ust/func"
local pipe = require "ust/pipe"
local quat = require "ust/quaternion"
local coor = require "ust/coor"
local line = require "ust/coorline"

local insert = table.insert
local unpack = table.unpack


local addSlotFn = function(params, result, width, spacing, moduleId)
    for id, info in pairs(params.classedModules) do
        local module = params.modules[info.slotId]
        if (module.metadata and module.metadata.isPlatform) then
            local info = module.info
            local makeData = module.makeData
            local pos = info.pos
            
            local grid = {}
            for i = -2, 2 do
                grid[i] = {}
                for j = -2, 2 do
                    local posG = coor.xyz(i, j, 0) + pos
                    local m = params.grid[pos.z][posG.x] and params.grid[pos.z][posG.x][posG.y] and params.modules[params.grid[pos.z][posG.x][posG.y]]
                    if m then
                        grid[i][j] = m
                    end
                end
            end
            
            --- Head
            do
                local n = width / 5 - 1
                if n > 9 then n = 9 end
                if not grid[0][1] then
                    local arc = info.arcs.center
                    local pt = arc:pt(arc.sup)
                    local vec = (info.arcs.left:pt(info.arcs.left.sup) - info.arcs.right:pt(info.arcs.right.sup)):normalized()
                    
                    for i = -n, n do
                        insert(
                            result.slots, {
                                id = makeData(moduleId, 20 + i),
                                transf = quat.byVec(coor.xyz(1, 0, 0), vec):mRot() * coor.trans(pt + (vec * 2.5) * i),
                                type = "ust_component_main_" .. width,
                                spacing = spacing
                            })
                    end
                end
                
                if not grid[0][-1] then
                    local arc = info.arcs.center
                    local pt = arc:pt(arc.inf)
                    local vec = (info.arcs.right:pt(info.arcs.right.inf) - info.arcs.left:pt(info.arcs.left.inf)):normalized()
                    for i = -n, n do
                        insert(
                            result.slots, {
                                id = makeData(moduleId, 40 + i),
                                transf = quat.byVec(coor.xyz(1, 0, 0), vec):mRot() * coor.trans(pt + (vec * 2.5) * i),
                                type = "ust_component_main_" .. width,
                                spacing = spacing
                            })
                    end
                end
            end
            
            --- Side
            local lrData = {
                {
                    fnArc = function(arcs) return arcs.left end,
                    pos = {sup = 8, mid = 7, inf = 6},
                    cond = not grid[-1][0]
                },
                {
                    fnArc = function(arcs) return arcs.right end,
                    pos = {sup = 2, mid = 3, inf = 4},
                    cond = not grid[1][0]
                }
            }
            
            for _, d in ipairs(lrData) do
                if d.cond then
                    local arc = d.fnArc(info.arcs)
                    local pts = {
                        {arc:pt(arc.sup), d.pos.sup},
                        {arc:pt((arc.sup + arc.inf) * 0.5), d.pos.mid},
                        {arc:pt(arc.inf), d.pos.inf},
                    }
                    for _, ptId in ipairs(pts) do
                        local pt, octapos = unpack(ptId)
                        local vec = arc:tangent(arc:rad(pt)):normalized() .. coor.rotZ90P
                        local vecSup = (vec .. coor.rotZ90N) * (width / 2)
                        local vecInf = -vecSup
                        local lnSup = line.byVecPt(vec, pt + vecSup)
                        local lnInf = line.byVecPt(vec, pt + vecInf)
                        local xInfo = {
                            sup = nil,
                            inf = nil
                        }
                        for y = -2, 2 do
                            local m = grid[0][y]
                            if (m and m.metadata.isPlatform) then
                                local arc = d.fnArc(m.info.arcs)
                                
                                if not xInfo.sup then
                                    local x = func.filter(arc:xLine(lnSup, true), pipe.noop())
                                    if #x == 1 then
                                        local pt = unpack(x)
                                        xInfo.sup = {
                                            y = y,
                                            rad = arc:rad(pt),
                                            pt = pt,
                                            arc = arc
                                        }
                                    end
                                end
                                if not xInfo.inf then
                                    local x = func.filter(arc:xLine(lnInf, true), pipe.noop())
                                    if #x == 1 then
                                        local pt = unpack(x)
                                        xInfo.inf = {
                                            y = y,
                                            rad = arc:rad(pt),
                                            pt = pt,
                                            arc = arc
                                        }
                                    end
                                end
                            else
                                if (xInfo.sup and not xInfo.inf) or (xInfo.inf and not xInfo.sup) then
                                    break
                                end
                            end
                            if xInfo.sup and xInfo.inf then break end
                        end
                        if xInfo.sup and xInfo.inf then
                            params.extra[makeData(moduleId, octapos)] = {
                                seq = func.seq(xInfo.inf.y, xInfo.sup.y),
                                slotIds = func.map(func.seq(xInfo.inf.y, xInfo.sup.y), function(y) return grid[0][y].info.slotId end),
                                arcs = func.map(func.seq(xInfo.inf.y, xInfo.sup.y), function(y) return d.fnArc(grid[0][y].info.arcs) end),
                                vecNormal = octapos > 5 and vec or -vec,
                                xInfo = xInfo,
                                lnSup = lnSup,
                                lnInf = lnInf
                            }
                            insert(
                                result.slots, {
                                    id = makeData(moduleId, octapos),
                                    transf = quat.byVec(coor.xyz(0, -1, 0), octapos > 5 and vec or -vec):mRot() * coor.trans((xInfo.sup.pt + xInfo.inf.pt) * 0.5),
                                    type = "ust_component_main_" .. width,
                                    spacing = spacing
                                })
                        end
                    end
                end
            end
        end
    end
end

local function addSlot(params, result)
    addSlotFn(params, result, 10, {5, 5, 17, 1}, 31)
    addSlotFn(params, result, 20, {10, 10, 23, 1}, 32)
    addSlotFn(params, result, 40, {20, 20, 38, 0}, 33)
end

local function addModels(mdlList, transf, tag, result)
    for mdl, transfs in pairs(mdlList) do
        for _, t in ipairs(transfs) do
            insert(result, ust.newModel(mdl, tag, coor.mul(t, transf)));
        end
    end
end

local updateFnSide = function(result, transform, tag, slotId, addModelFn, params, config)
    local id = params.modules[slotId].info.id
    local info = params.modules[params.classedModules[id].slotId].info
    local hTrans = coor.transZ(-0.8)
    
    local data = params.modules[slotId].info.data
    
    -- Main building to platform faces
    local extra = params.extra[slotId]
    
    local arcs = extra.arcs
    local ptBuildingInfEdge = coor.xyz((data < 5 and -config.width or config.width) / 2, -config.depth, 0) .. transform
    local ptBuildingSupEdge = coor.xyz((data < 5 and config.width or -config.width) / 2, -config.depth, 0) .. transform
    
    local vecEdge = (ptBuildingSupEdge - ptBuildingInfEdge):normalized() * config.edgeWidth
    
    local ptBuildingInf = ptBuildingInfEdge + vecEdge
    local ptBuildingSup = ptBuildingSupEdge - vecEdge
    
    local ptPlatformInf = extra.xInfo.inf.pt + vecEdge
    local ptPlatformSup = extra.xInfo.sup.pt - vecEdge
    
    local addBlock = function(mdl, pos)
        if data < 5 then
            pos.lt, pos.lb, pos.rt, pos.rb = pos.lb, pos.lt, pos.rb, pos.rt
        end
        insert(result.models, ust.newModel(config.path .. mdl .. "_tl.mdl", tag, config.fitMdl[mdl](pos, true)));
        insert(result.models, ust.newModel(config.path .. mdl .. "_br.mdl", tag, config.fitMdl[mdl](pos, false)));
    end
    
    local platformPts = {}
    for i, arc in ipairs(arcs) do
        local lRad = arc.sup - arc.inf
        if (i > 1 and i < #arcs) then
            insert(platformPts, func.map({0, 0.25, 0.5, 0.75}, function(rad) return arc:pt(rad * lRad + arc.inf) end))
        elseif (i == 1 and i < #arcs) then
            local rad = arc:rad(ptPlatformInf)
            local pct = (rad - arc.inf) / lRad
            local rads = func.filter({0, 0.25, 0.5, 0.75}, function(radPct) return radPct > pct end)
            insert(rads, 1, pct)
            insert(platformPts, func.map(rads, function(rad) return arc:pt(rad * lRad + arc.inf) end))
        elseif (i == #arcs and i > 1) then
            local rad = arc:rad(ptPlatformSup)
            local pct = (rad - arc.inf) / lRad
            local rads = func.filter({0, 0.25, 0.5, 0.75, 1}, function(radPct) return radPct < pct end)
            insert(rads, pct)
            insert(platformPts, func.map(rads, function(rad) return arc:pt(rad * lRad + arc.inf) end))
        else
            local pctInf = (arc:rad(ptPlatformInf) - arc.inf) / lRad
            local pctSup = (arc:rad(ptPlatformSup) - arc.inf) / lRad
            local rads = func.filter({0, 0.25, 0.5, 0.75, 1}, function(radPct) return radPct < pctSup and radPct > pctInf end)
            insert(rads, 1, pctInf)
            insert(rads, pctSup)
            insert(platformPts, func.map(rads, function(rad) return arc:pt(rad * lRad + arc.inf) end))
            break
        end
    end
    
    platformPts = func.flatten(platformPts)
    
    local vecTangent = (ptBuildingSup - ptBuildingInf) * (1 / (#platformPts - 1))
    local buildingPts = func.map(func.seq(1, #platformPts), function(n) return ptBuildingInf + vecTangent * (n - 1) end)
    
    local pts = (data < 5)
        and func.zip(func.interlace(platformPts), func.interlace(buildingPts))
        or func.zip(func.interlace(buildingPts), func.interlace(platformPts))
    
    for _, ptg in ipairs(pts) do
        local buildingPts, platformPts = unpack(ptg)
        addBlock("yi_centre", {
            lt = buildingPts[2],
            lb = buildingPts[1],
            rt = platformPts[2],
            rb = platformPts[1]
        });
    end
    
    addBlock("xe_yi_left", {
        lt = ptBuildingInfEdge,
        lb = platformPts[1] - (platformPts[2] - platformPts[1]):normalized() * ((platformPts[2] - platformPts[1]):normalized():dot(vecEdge)),
        rb = platformPts[1],
        rt = ptBuildingInf
    })
    
    addBlock("xe_yi_left", {
        lt = platformPts[#platformPts] + (platformPts[#platformPts] - platformPts[#platformPts - 1]):normalized() * ((platformPts[#platformPts] - platformPts[#platformPts - 1]):normalized():dot(vecEdge)),
        lb = ptBuildingSupEdge,
        rb = ptBuildingSup,
        rt = platformPts[#platformPts]
    })
    
    -- Main building to platform Connection
    insert(result.invokeLater, function()
        local lanePts = pipe.new * params.extra[slotId].slotIds
            * pipe.map(function(slotId) return data > 5 and params.extra[slotId].leftLane or params.extra[slotId].rightLane end)
            * pipe.flatten()
            * pipe.filter(function(pt) return ((pt - ptBuildingSup):dot(vecTangent)) * ((pt - ptBuildingInf):dot(vecTangent)) < 0 end)
        
        for _, pt in ipairs(config.connectors) do
            local pt = pt .. transform
            local closesetPt = lanePts
                * pipe.map(function(lpt) return {pt = lpt, distance = (lpt - pt):length2()} end)
                * pipe.min(function(lhs, rhs) return lhs.distance < rhs.distance end)
            local lpt = closesetPt.pt
            insert(result.models, ust.unitLane(lpt, pt, tag))
        end
    end)
    
    for _, v in pairs(config.generatedData) do
        addModels(v, hTrans * transform, tag, result.models)
    end
    
    for _, mdl in ipairs(config.mdlList) do
        insert(result.models, ust.newModel(mdl, tag, hTrans * transform));
    end
    
    -- Terrains
    local terrainAlignmentLists = pipe.new /
        {
            coor.xyz(config.extend[1], config.extend[4], 0.0) .. (hTrans * transform),
            coor.xyz(config.extend[1], config.extend[3], 0.0) .. (hTrans * transform),
            coor.xyz(config.extend[2], config.extend[3], 0.0) .. (hTrans * transform),
            coor.xyz(config.extend[2], config.extend[4], 0.0) .. (hTrans * transform),
        }
        / (pipe.new * platformPts + func.rev(buildingPts))
        * pipe.map(pipe.map(coor.vec2Tuple))
    
    for _, t in ipairs(terrainAlignmentLists) do
        insert(result.terrainLists[info.id].equalOpt, t)
    end
    
    local groundFace = func.map({
        coor.xyz(config.extend[1], config.extend[4], 0.0) .. transform,
        coor.xyz(config.extend[1], config.extend[3], 0.0) .. transform,
        coor.xyz(config.extend[2], config.extend[3], 0.0) .. transform,
        coor.xyz(config.extend[2], config.extend[4], 0.0) .. transform,
    }, coor.vec2Tuple)
    
    insert(result.groundFaces, {
        face = groundFace,
        modes = {
            {
                type = "FILL",
                key = "shared/asphalt_01.gtex.lua"
            },
            {
                type = "STROKE_OUTER",
                key = "street_border.lua"
            },
        },
    })
end

local updateFnHead = function(result, transform, tag, slotId, addModelFn, params, config)
    local id = params.modules[slotId].info.id
    local info = params.modules[params.classedModules[id].slotId].info
    local hTrans = coor.transZ(-0.8)
    
    local data = params.modules[slotId].info.data
    
    for _, v in pairs(config.generatedData) do
        addModels(v, hTrans * transform, tag, result.models)
    end
    
    for _, mdl in ipairs(config.mdlList) do
        insert(result.models, ust.newModel(mdl, tag, hTrans * transform));
    end
    
    local addBlock = function(mdl, pos)
        insert(result.models, ust.newModel(config.path .. mdl .. "_tl.mdl", tag, config.fitMdl[mdl](pos, true) * transform));
        insert(result.models, ust.newModel(config.path .. mdl .. "_br.mdl", tag, config.fitMdl[mdl](pos, false) * transform));
    end
    
    local blocks = pipe.new
        * func.seq(-config.width / 10, config.width / 10)
        * pipe.map(function(x) return x * 5 end)
    
    blocks[1] = -config.width * 0.5 + config.edgeWidth
    blocks[#blocks] = config.width * 0.5 - config.edgeWidth
    
    for _, x in ipairs(blocks * pipe.interlace()) do
        local r, l = unpack(x)
        addBlock("ye_centre", {
            lt = coor.xyz(l, -5, 0),
            lb = coor.xyz(l, 0, 0),
            rt = coor.xyz(r, -5, 0),
            rb = coor.xyz(r, 0, 0)
        });
    end
    
    addBlock("xe_ye_left", {
        lt = coor.xyz(config.width * 0.5, -5, 0),
        lb = coor.xyz(config.width * 0.5, 0, 0),
        rt = coor.xyz(config.width * 0.5 - 0.85, -5, 0),
        rb = coor.xyz(config.width * 0.5 - 0.85, 0, 0)
    });
    
    addBlock("xe_ye_right", {
        lt = coor.xyz(-(config.width * 0.5 - 0.85), -5, 0),
        lb = coor.xyz(-(config.width * 0.5 - 0.85), 0, 0),
        rt = coor.xyz(-config.width * 0.5, -5, 0),
        rb = coor.xyz(-config.width * 0.5, 0, 0)
    });
    
    -- Terrains
    local terrainAlignmentLists = pipe.new /
        {
            coor.xyz(config.extend[1], config.extend[4], 0.0) .. (hTrans * transform),
            coor.xyz(config.extend[1], config.extend[3], 0.0) .. (hTrans * transform),
            coor.xyz(config.extend[2], config.extend[3], 0.0) .. (hTrans * transform),
            coor.xyz(config.extend[2], config.extend[4], 0.0) .. (hTrans * transform),
        }
        * pipe.map(pipe.map(coor.vec2Tuple))
    
    for _, t in ipairs(terrainAlignmentLists) do
        insert(result.terrainLists[info.id].equalOpt, t)
    end
    
    
    local id = params.modules[slotId].info.id
    local info = params.modules[params.classedModules[id].slotId].info
    local pos = info.pos
    
    local ptBuildingSup = coor.xyz(-config.width, -5, 0) .. transform
    local ptBuildingInf = coor.xyz(config.width, -5, 0) .. transform
    local vecTangent = (ptBuildingSup - ptBuildingInf)
    local pts = {}
    for x, ys in pairs(params.grid[info.pos.z]) do
        for y, slotId in pairs(ys) do
            if y == pos.y then
                local module = params.modules[slotId]
                if module and module.metadata.isPlatform then
                    insert(pts, module.info.arcs.center:pt(data < 30 and module.info.arcs.center.sup or module.info.arcs.center.inf))
                end
            end
        end
    end
    
    
    -- Main building to platform Connection
    insert(result.invokeLater, function()
        local lanePts = pipe.new * pts
            * pipe.filter(function(pt) return ((pt - ptBuildingSup):dot(vecTangent)) * ((pt - ptBuildingInf):dot(vecTangent)) < 0 end)
        
        for _, pt in ipairs(config.connectors) do
            local pt = pt .. transform
            local closesetPt = lanePts
                * pipe.map(function(lpt) return {pt = lpt, distance = (lpt - pt):length2()} end)
                * pipe.min(function(lhs, rhs) return lhs.distance < rhs.distance end)
            local lpt = closesetPt.pt
            insert(result.models, ust.unitLane(lpt, pt, tag))
        end
    end)
    
    local groundFace = func.map({
        coor.xyz(config.extend[1], config.extend[4], 0.0) .. transform,
        coor.xyz(config.extend[1], config.extend[3], 0.0) .. transform,
        coor.xyz(config.extend[2], config.extend[3], 0.0) .. transform,
        coor.xyz(config.extend[2], config.extend[4], 0.0) .. transform,
    }, coor.vec2Tuple)
    
    insert(result.groundFaces, {
        face = groundFace,
        modes = {
            {
                type = "FILL",
                key = "shared/asphalt_01.gtex.lua"
            },
            {
                type = "STROKE_OUTER",
                key = "street_border.lua"
            },
        },
    })
end

local updateFn = function(result, transform, tag, slotId, addModelFn, params, config)
    return (params.modules[slotId].info.data < 10 and updateFnSide or updateFnHead)(result, transform, tag, slotId, addModelFn, params, config)
end

function data()
    return {
        classify = ust.classifyComp,
        addSlot = addSlot,
        updateFn = updateFn
    }

end

local ust = require "ust"
local coor = require "ust/coor"

local insert = table.insert

local preProcessAdd = function(modules, change, classedModules, info)
    if info.data == 0 then
        ust.gridization(modules, classedModules)
        
        local addSlot = ust.base(info.id, 27)
        modules[addSlot] = change.module
        
        if classedModules[info.id].slot[26] then
            modules[classedModules[info.id].slot[26]] = nil
        end
    elseif info.data == -1 then
        local addSlot = ust.base(info.id, 27)
        if (modules[addSlot].name == change.module.name) then
            modules[addSlot] = nil
        else
            modules[addSlot] = change.module
        end
    elseif info.data == 1 then
        modules[ust.base(info.id, 27)] = nil
    end
end

local preProcessRemove = function(modules, change, classedModules, info)
    for _, slotId in pairs(classedModules[info.id].slot) do
        modules[slotId] = nil
    end
    modules[change.slotId] = nil
end

local addSlot = function(params, result)
    for id, info in pairs(params.classedModules) do
        local module = params.modules[info.slotId]
        if (module.metadata and module.metadata.isTrack) then
            local info = module.info
            local makeData = module.makeData
            local refH = module.metadata.height + (info.extraHeight or 0)
            local transf = info.transf * coor.transZ(refH)
            
            insert(result.slots, {
                id = makeData(27, 0),
                transf = transf,
                type = "ust_catenary",
                spacing = {0, 0, 0, 0}
            })
        end
    end
end

local slotSetup = function(params, result, slotId)
    local info = params.modules[slotId].info
    local id = info.id
    local parent = params.classedModules[id].slotId
    local m = params.modules[parent]
    insert(result.slots, {
        id = slotId,
        transf = m.info.transf,
        type = "ust_catenary",
        spacing = {0, 0, 0, 0}
    })
end

function data()
    return {
        preProcessAdd = preProcessAdd,
        preProcessRemove = preProcessRemove,
        addSlot = addSlot,
        slotSetup = slotSetup,
        classify = ust.classifyComp
    }

end

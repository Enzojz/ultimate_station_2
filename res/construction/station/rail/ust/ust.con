local func = require "ust/func"
local coor = require "ust/coor"
local arc = require "ust/coorarc"
local line = require "ust/coorline"
local quat = require "ust/quaternion"
local pipe = require "ust/pipe"
local general = require "ust/general"
local ust = require "ust"
local dump = require "luadump"
local livetext = require "ust/livetext"

local unpack = table.unpack
local insert = table.insert
local abs = math.abs
local pow = math.pow
local floor = math.floor
local pi = math.pi

local rList = {15, 12, 10, 8, 7.5, 6, 5, 4, 3.5, 3, 2.5, 2, 1.75, 1.5, 1.25, 1, 0.9, 0.85, 0.8, 0.75, 0.7, 0.666, 0.633, 0.6, 0.566, 0.533, 0.5, 0.475, 0.45, 0.425, 0.4, 0.375, 0.35, 0.325, 0.3, 0.28, 0.26, 0.24, 0.22, 0.2, 0.18, 0.16, 0.14, 0.12, 0.1, 0.09, 0.08, 0.07, 0.06, 0.05}

rList = pipe.new * rList * pipe.map(pipe.neg()) * pipe.rev() / ust.infi + rList
local hPlatformList = {200, 280, 380, 550, 680, 760, 915, 960, 1100, 1219, 1250, 1380}
local trackLengths = {40, 60, 80, 100, 140, 160, 200, 240, 320, 400, 480, 500, 550, 850, 1050}
local trackNumberList = {1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}

local arcPacker = function(pt, vec, length, radius)
    local nVec = vec:withZ(0):normalized()
    local tVec = coor.xyz(-nVec.y, nVec.x, 0)
    local o = pt + tVec * radius
    local ar = arc.byOR(o, abs(radius))
    local inf = ar:rad(pt)
    local sup = inf + length / radius
    ar = ar:withLimits({
        sup = sup,
        inf = inf
    })
    return function(...)
        local result = func.map({...}, function(dr)
            return arc.byOR(o, abs(radius + dr), {
                sup = sup,
                inf = inf
            })
        end)
        return ar, unpack(result)
    end
end

local function classifyModules(params)
    local result = {}
    for slotId, m in pairs(params) do
        local slotIdAbs = abs(slotId)
        local type = slotIdAbs % 100
        local id = (slotIdAbs - type) / 100 % 10000
        m.typeId = type
        if not result[id] then result[id] = {info = {}, slot = {}, metadata = {}} end
        if (type < 50) then
            result[id].type = type
            result[id].slotId = slotId
            result[id].data = slotId > 0 and floor(slotIdAbs / 1000000) or -floor(slotIdAbs / 1000000)
        else
            local data = slotId > 0 and floor(slotIdAbs / 1000000) or -floor(slotIdAbs / 1000000)
            result[id].info[type] = data
            result[id].slot[type] = slotId
            result[id].metadata[type] = m.metadata
        end
    end
    return result
end

local calculateLimit = function(arc)
    return function(l, ptvec)
        local pt = func.min(arc / l, function(lhs, rhs) return (lhs - ptvec[1]):length2() < (rhs - ptvec[1]):length2() end)
        return arc:rad(pt)
    end
end

local function gridization(modules, classedModules)
    local grid = {}
    for id, info in pairs(classedModules) do
        modules[info.slotId].info = ust.slotInfo(info.slotId, classedModules)
        modules[info.slotId].makeData = function(type, data)
            return ust.mixData(ust.base(id, type), data)
        end
        for id, slotId in pairs(info.slot) do
            modules[slotId].info = ust.slotInfo(slotId, classedModules)
        end
        
        local pos = modules[info.slotId].info.pos
        local x, y, z = pos.x, pos.y, pos.z
        if not grid[z] then grid[z] = {} end
        if not grid[z][x] then grid[z][x] = {} end
        grid[z][x][y] = info.slotId
    end
    
    for slotId, module in pairs(modules) do
        if not module.metadata.isData then
            local info = module.info
            local x, y, z = info.pos.x, info.pos.y, info.pos.z
            
            if grid[z][x][y - 1] then
                modules[grid[z][x][y - 1]].info.octa[1] = slotId
                module.info.octa[5] = grid[z][x][y - 1]
            end
            
            if grid[z][x][y + 1] then
                modules[grid[z][x][y + 1]].info.octa[5] = slotId
                module.info.octa[1] = grid[z][x][y + 1]
            end
            
            if grid[z][x - 1] and grid[z][x - 1][y] then
                modules[grid[z][x - 1][y]].info.octa[3] = slotId
                module.info.octa[7] = grid[z][x - 1][y]
            end
            
            if grid[z][x + 1] and grid[z][x + 1][y] then
                modules[grid[z][x + 1][y]].info.octa[7] = slotId
                module.info.octa[3] = grid[z][x + 1][y]
            end
            
            if grid[z][x - 1] and grid[z][x - 1][y - 1] then
                modules[grid[z][x - 1][y - 1]].info.octa[2] = slotId
                module.info.octa[6] = grid[z][x - 1][y - 1]
            end
            
            if grid[z][x + 1] and grid[z][x + 1][y - 1] then
                modules[grid[z][x + 1][y - 1]].info.octa[8] = slotId
                module.info.octa[4] = grid[z][x + 1][y - 1]
            end
            
            if grid[z][x - 1] and grid[z][x - 1][y + 1] then
                modules[grid[z][x - 1][y + 1]].info.octa[4] = slotId
                module.info.octa[8] = grid[z][x - 1][y + 1]
            end
            
            if grid[z][x + 1] and grid[z][x + 1][y + 1] then
                modules[grid[z][x + 1][y + 1]].info.octa[6] = slotId
                module.info.octa[2] = grid[z][x + 1][y + 1]
            end
        end
    end
    
    for z, g in pairs(grid) do
        
        local queue = {}
        local parentMap = {}
        
        local enqueue = function(slotId, parent)
            if slotId and not parentMap[slotId] then
                table.insert(queue, slotId)
                parentMap[slotId] = parent
            end
        end
        
        local function searchMap(index)
            local current = queue[index]
            if (current) then
                local m = modules[current]
                local info = m.info
                local x, y = info.pos.x, info.pos.y
                if y >= 0 then
                    enqueue(info.octa[1], current)
                    enqueue(info.octa[5], current)
                else
                    enqueue(info.octa[5], current)
                    enqueue(info.octa[1], current)
                end
                if x >= 0 then
                    enqueue(info.octa[3], current)
                    enqueue(info.octa[7], current)
                else
                    enqueue(info.octa[7], current)
                    enqueue(info.octa[3], current)
                end
                searchMap(index + 1)
            end
        end
        
        enqueue(g[0][0], true)
        searchMap(1)
        
        local xPos = func.seq(0, func.max(func.keys(g)))
        local xNeg = func.seq(func.min(func.keys(g)), -1)
        
        local infoX = {
            pos = {[0] = 0},
            width = {}
        }
        do
            local xGroup = {}
            
            for _, x in ipairs(func.concat(xPos, func.rev(xNeg))) do
                local width = nil
                if grid[z][x] then
                    local yList = func.concat(
                        func.sort(func.filter(func.keys(grid[z][x]), function(k) return k >= 0 end)),
                        func.rev(func.sort(func.filter(func.keys(grid[z][x]), function(k) return k < 0 end)))
                    )
                    for _, y in ipairs(func.rev(yList)) do
                        local slotId = grid[z][x][y]
                        local m = modules[slotId]
                        local w = m.info.width or m.metadata.width
                        if not width or width < w then
                            width = w
                        end
                    end
                    
                    local sortedY = func.sort(yList)
                    for i, y in ipairs(sortedY) do
                        if xGroup[x] then
                            if y - sortedY[i - 1] == 1 then
                                table.insert(xGroup[x][#xGroup[x]], y)
                            else
                                table.insert(xGroup[x], {y})
                            end
                        else
                            xGroup[x] = {{y}}
                        end
                    end
                else
                    width = 5
                end
                
                if width then
                    infoX.width[x] = width
                    if x > 0 then
                        infoX.pos[x] = infoX.pos[x - 1] + infoX.width[x - 1] * 0.5 + width * 0.5
                    elseif x < 0 then
                        infoX.pos[x] = infoX.pos[x + 1] - infoX.width[x + 1] * 0.5 - width * 0.5
                    end
                end
            end
        end
        
        local processY = function(x, y)
            return function()
                local slotId = grid[z][x][y]
                local m = modules[slotId]
                
                if m.metadata.isTrack or m.metadata.isPlatform then
                    if not m.info.width then
                        m.info.width = m.metadata.width or 5
                    end
                    
                    local width = m.info.width
                    
                    local yState = {
                        width = width,
                        radius = m.info.straight and 10e8 or m.info.radius,
                        length = m.info.length
                    }
                    
                    local anchor = parentMap[slotId]
                    
                    if (anchor == m.info.octa[3] or anchor == m.info.octa[7]) then
                        local octa5 = m.info.octa[5] and modules[m.info.octa[5]]
                        local octa1 = m.info.octa[1] and modules[m.info.octa[1]]
                        if octa5 or octa1 then
                            if octa5 and octa5.info and octa5.info.pts and octa1 and octa1.info and octa1.info.pts then
                                anchor = m.info.octa[y >= 0 and 5 or 1]
                            elseif octa5 and octa5.info and octa5.info.pts then
                                anchor = m.info.octa[5]
                            elseif octa1 and octa1.info and octa1.info.pts then
                                anchor = m.info.octa[1]
                            end
                        end
                    end

                    if x == 0 and y == 0 then
                        yState.pos = coor.xyz(infoX.pos[0], 0, 0)
                        yState.vec = coor.xyz(0, 1, 0)
                    else
                        if anchor == m.info.octa[5] then
                            yState.pos = modules[anchor].info.pts[4][1]
                            yState.vec = modules[anchor].info.pts[4][2]
                        elseif anchor == m.info.octa[1] then
                            yState.pos = modules[anchor].info.pts[3][1]
                            yState.vec = -modules[anchor].info.pts[3][2]
                        elseif anchor == m.info.octa[3] then
                            local pos = modules[anchor].info.pts[1][1]
                            local vec = modules[anchor].info.pts[1][2]
                            
                            yState.pos = pos + (vec:normalized() .. coor.rotZ((y < 0 and 0.5 or -0.5) * pi)) * (infoX.pos[x] - infoX.pos[x + 1])
                            yState.vec = vec
                        elseif anchor == m.info.octa[7] then
                            local pos = modules[anchor].info.pts[1][1]
                            local vec = modules[anchor].info.pts[1][2]
                            
                            yState.pos = pos + (vec:normalized() .. coor.rotZ((y < 0 and 0.5 or -0.5) * pi)) * (infoX.pos[x] - infoX.pos[x - 1])
                            yState.vec = vec
                        end
                    end
                    
                    if not yState.radius then
                        if anchor == m.info.octa[5] or anchor == m.info.octa[1] then
                            for i = y + (y < 0 and 1 or -1), 0, (y < 0 and 1 or -1) do
                                if grid[z][x] and grid[z][x][i] then
                                    yState.radius = modules[grid[z][x][i]].info.radius
                                    break
                                end
                            end
                        end
                        if not yState.radius then
                            local loop = {}
                            if m.metadata.isTrack then
                                loop = {x + (x < 0 and 1 or -1), (x < 0 and func.max(xPos) or func.min(xNeg) or 0), (x < 0 and 1 or -1)}
                            elseif m.metadata.isPlatform then
                                if (x < 0) then
                                    if m.info.octa[3] and m.info.octa[7] and modules[m.info.octa[3]].metadata.isPlatform and modules[m.info.octa[7]].metadata.isTrack and modules[m.info.octa[7]].info.radius then
                                        loop = {x - 1, func.min(xNeg), -1}
                                    else
                                        loop = {x + 1, func.max(xPos) or 0, 1}
                                    end
                                else
                                    if m.info.octa[7] and m.info.octa[3] and modules[m.info.octa[7]].metadata.isPlatform and modules[m.info.octa[3]].metadata.isTrack and modules[m.info.octa[3]].info.radius then
                                        loop = {x + 1, func.max(xPos), 1}
                                    else
                                        loop = {x - 1, func.min(xNeg) or 0, -1}
                                    end
                                end
                            end
                            for i = loop[1], loop[2], loop[3] do
                                if grid[z][i] and grid[z][i][y] then
                                    yState.radius = modules[grid[z][i][y]].info.radius + (infoX.pos[x] - infoX.pos[i])
                                    yState.radiusRef = i
                                    break
                                end
                            end
                        end
                        if not yState.radius then
                            yState.radius = 10e8
                        end
                    end
                    
                    modules[slotId].info.radius = yState.radius
                    modules[slotId].info.length = yState.length
                    
                    local packer = arcPacker(yState.pos, yState.vec, yState.length, y < 0 and -yState.radius or yState.radius)
                    local ar, arL, arR = packer(-yState.width * 0.5, yState.width * 0.5)
                    if y < 0 then arL, arR = arR, arL end
                    
                    if x < 0 and m.info.octa[3] and modules[m.info.octa[3]].metadata.isTrack then
                        if (y >= 0 and m.info.octa[1] and modules[m.info.octa[1]].metadata.isPlatform)
                            or (y < 0 and m.info.octa[5] and modules[m.info.octa[5]].metadata.isPlatform) then
                            local sup = modules[m.info.octa[3]].info.arcs.center.sup
                            arL.sup = sup
                            arR.sup = sup
                            ar.sup = sup
                        elseif (y >= 0 and m.info.octa[5] and modules[m.info.octa[5]].metadata.isPlatform)
                            or (y < 0 and m.info.octa[1] and modules[m.info.octa[1]].metadata.isPlatform) then
                            local inf = modules[m.info.octa[3]].info.arcs.center.inf
                            arL.inf = inf
                            arR.inf = inf
                            ar.inf = inf
                        end
                    elseif x >= 0 and m.info.octa[7] and modules[m.info.octa[7]].metadata.isTrack then
                        if (y >= 0 and m.info.octa[1] and modules[m.info.octa[1]].metadata.isPlatform)
                            or (y < 0 and m.info.octa[5] and modules[m.info.octa[5]].metadata.isPlatform) then
                            local sup = modules[m.info.octa[7]].info.arcs.center.sup
                            arL.sup = sup
                            arR.sup = sup
                            ar.sup = sup
                        elseif (y >= 0 and m.info.octa[5] and modules[m.info.octa[5]].metadata.isPlatform)
                            or (y < 0 and m.info.octa[1] and modules[m.info.octa[1]].metadata.isPlatform) then
                            local inf = modules[m.info.octa[7]].info.arcs.center.inf
                            arL.inf = inf
                            arR.inf = inf
                            ar.inf = inf
                        end
                    end
                    
                    local refArc = {
                        left = arL,
                        right = arR,
                        center = ar
                    }
                    
                    modules[slotId].info.arcs = refArc
                    
                    modules[slotId].info.pts = {
                        {
                            refArc.center:pt(refArc.center.inf),
                            refArc.center:tangent(refArc.center.inf)
                        },
                        {
                            refArc.center:pt(refArc.center.sup),
                            refArc.center:tangent(refArc.center.sup)
                        }
                    }
                    
                    if y >= 0 then
                        modules[slotId].info.pts[3] = modules[slotId].info.pts[1]
                        modules[slotId].info.pts[4] = modules[slotId].info.pts[2]
                    else
                        modules[slotId].info.pts[3] = {
                            modules[slotId].info.pts[2][1],
                            -modules[slotId].info.pts[2][2]
                        }
                        modules[slotId].info.pts[4] = {
                            modules[slotId].info.pts[1][1],
                            -modules[slotId].info.pts[1][2]
                        }
                    end
                    
                    modules[slotId].info.gravity = {
                        refArc.center:pt((refArc.center.inf + refArc.center.sup) * 0.5),
                        refArc.center:tangent((refArc.center.inf + refArc.center.sup) * 0.5)
                    }
                    modules[slotId].info.limits = func.map(modules[slotId].info.pts, function(ptvec) return line.byVecPt(ptvec[2] .. coor.rotZ(0.5 * pi), ptvec[1]) end)
                    
                    if m.metadata.isPlatform then
                        coroutine.yield()
                        
                        local function findLeftTrack(slotId)
                            if not slotId or not modules[slotId] then
                                return nil
                            elseif modules[slotId].metadata.isTrack then
                                return modules[slotId].info.pos
                            elseif modules[slotId].metadata.isPlatform then
                                return findLeftTrack(modules[slotId].info.octa[7])
                            else
                                return nil
                            end
                        end
                        
                        local function findRightTrack(slotId)
                            if not slotId or not modules[slotId] then
                                return nil
                            elseif modules[slotId].metadata.isTrack then
                                return modules[slotId].info.pos
                            elseif modules[slotId].metadata.isPlatform then
                                return findRightTrack(modules[slotId].info.octa[3])
                            else
                                return nil
                            end
                        end
                        
                        local leftTrackPos = findLeftTrack(slotId)
                        local rightTrackPos = findRightTrack(slotId)
                        
                        local ref = {
                            left = (leftTrackPos and not rightTrackPos) or (leftTrackPos and rightTrackPos and leftTrackPos.x == x - 1 and rightTrackPos.x ~= x + 1),
                            right = (rightTrackPos and not leftTrackPos) or (leftTrackPos and rightTrackPos and leftTrackPos.x ~= x - 1 and rightTrackPos.x == x + 1),
                            leftRight = leftTrackPos and rightTrackPos and leftTrackPos.x == x - 1 and rightTrackPos.x == x + 1,
                        }
                        
                        if y >= 0 then
                            if (x >= 0) then
                                if (ref.left and not ref.right and leftTrackPos ~= x - 1) then
                                    if (m.info.octa[5] and modules[m.info.octa[5]].metadata.isPlatform and modules[m.info.octa[5]].info.ref and modules[m.info.octa[5]].info.ref.right) then
                                        ref = {prev = true}
                                    end
                                end
                            else
                                if (ref.right and not ref.left and rightTrackPos ~= x + 1) then
                                    if (m.info.octa[5] and modules[m.info.octa[5]].metadata.isPlatform and modules[m.info.octa[5]].info.ref and modules[m.info.octa[5]].info.ref.left) then
                                        ref = {prev = true}
                                    end
                                end
                            end
                        else
                            if (x >= 0) then
                                if (ref.left and not ref.right and leftTrackPos ~= x - 1) then
                                    if (m.info.octa[1] and modules[m.info.octa[1]].metadata.isPlatform and modules[m.info.octa[1]].info.ref and modules[m.info.octa[1]].info.ref.right) then
                                        ref = {next = true}
                                    end
                                end
                            else
                                if (not ref.leftRight and m.info.octa[1] and modules[m.info.octa[1]].metadata.isPlatform and modules[m.info.octa[1]].info.ref and modules[m.info.octa[1]].info.ref.leftRight) then
                                    ref = {next = true}
                                elseif (ref.right and not ref.left and rightTrackPos ~= x + 1) then
                                    if (m.info.octa[1] and modules[m.info.octa[1]].metadata.isPlatform and modules[m.info.octa[1]].info.ref and modules[m.info.octa[1]].info.ref.left) then
                                        ref = {next = true}
                                    end
                                end
                            end
                        end
                        
                        modules[slotId].info.ref = ref
                        
                        local packer = arcPacker(yState.pos, yState.vec, yState.length, y < 0 and -yState.radius or yState.radius)
                        local ar, arL, arR = packer(-yState.width * 0.5, yState.width * 0.5)
                        if y < 0 then arL, arR = arR, arL end
                        
                        local aligned = false;
                        
                        if ref.leftRight then
                            local leftTrack = modules[grid[z][leftTrackPos.x][y]]
                            local leftO = leftTrack.info.arcs.center.o
                            local leftRadius = leftTrack.info.radius + (infoX.pos[x] - infoX.pos[leftTrackPos.x])
                            arL = arc.byOR(leftO, leftRadius - m.info.width * 0.5, leftTrack.info.arcs.center:limits())
                            
                            local rightTrack = modules[grid[z][rightTrackPos.x][y]]
                            local rightO = rightTrack.info.arcs.center.o
                            local rightRadius = rightTrack.info.radius + (infoX.pos[x] - infoX.pos[rightTrackPos.x])
                            arR = arc.byOR(rightO, rightRadius + m.info.width * 0.5, rightTrack.info.arcs.center:limits())
                            
                            local sup = leftTrack.info.pts[2][1]:avg(rightTrack.info.pts[2][1])
                            
                            local vecSupL = (leftTrack.info.radius > 0 and (leftTrack.info.pts[2][1] - arL.o) or (arL.o - leftTrack.info.pts[2][1])):normalized()
                            local vecSupR = (rightTrack.info.radius > 0 and (rightTrack.info.pts[2][1] - arR.o) or (arR.o - rightTrack.info.pts[2][1])):normalized()
                            local vecSup = (vecSupL + vecSupR):normalized()
                            local limitSup = line.byVecPt(vecSup, sup)
                            
                            supL = calculateLimit(arL)(limitSup, leftTrack.info.pts[2])
                            supR = calculateLimit(arR)(limitSup, rightTrack.info.pts[2])
                            
                            local infL = arL:rad(yState.pos)
                            if (y == 0 or y == -1) then
                                infL = leftTrack.info.arcs.center.inf
                            elseif (y > 0 and m.info.octa[5]) then
                                infL = arL:rad(modules[m.info.octa[5]].info.pts[2][1])
                            elseif (y < 0 and m.info.octa[1]) then
                                infL = arL:rad(modules[m.info.octa[1]].info.pts[2][1])
                            end
                            
                            local infR = arR:rad(yState.pos)
                            if (y == 0 or y == -1) then
                                infR = rightTrack.info.arcs.center.inf
                            elseif (y > 0 and m.info.octa[5]) then
                                infR = arR:rad(modules[m.info.octa[5]].info.pts[2][1])
                            elseif (y < 0 and m.info.octa[1]) then
                                infR = arR:rad(modules[m.info.octa[1]].info.pts[2][1])
                            end
                            
                            arL = arL:withLimits({sup = supL, inf = infL})
                            arR = arR:withLimits({sup = supR, inf = infR})
                            aligned = true
                        elseif ref.left then
                            local leftTrack = modules[grid[z][leftTrackPos.x][y]]
                            local leftO = leftTrack.info.arcs.center.o
                            local leftRadius = leftTrack.info.radius + (infoX.pos[x] - infoX.pos[leftTrackPos.x])
                            arL = arc.byOR(leftO, leftRadius - m.info.width * 0.5, leftTrack.info.arcs.center:limits())
                            arR = arc.byOR(leftO, leftRadius + m.info.width * 0.5, leftTrack.info.arcs.center:limits())
                            
                            local limitSup = leftTrack.info.limits[2]
                            local supL = calculateLimit(arL)(limitSup, leftTrack.info.pts[2])
                            local supR = calculateLimit(arR)(limitSup, leftTrack.info.pts[2])
                            
                            local inf = arL:rad(yState.pos)
                            if (y == 0 or y == -1) then
                                inf = leftTrack.info.arcs.center.inf
                            elseif (y > 0 and m.info.octa[5]) then
                                inf = arL:rad(modules[m.info.octa[5]].info.pts[2][1])
                            elseif (y < 0 and m.info.octa[1]) then
                                inf = arL:rad(modules[m.info.octa[1]].info.pts[2][1])
                            end
                            
                            arL = arL:withLimits({sup = supL, inf = inf})
                            arR = arR:withLimits({sup = supR, inf = inf})
                            aligned = true
                        elseif ref.right then
                            local rightTrack = modules[grid[z][rightTrackPos.x][y]]
                            local rightO = rightTrack.info.arcs.center.o
                            local rightRadius = rightTrack.info.radius + (infoX.pos[x] - infoX.pos[rightTrackPos.x])
                            arL = arc.byOR(rightO, rightRadius - m.info.width * 0.5, rightTrack.info.arcs.center:limits())
                            arR = arc.byOR(rightO, rightRadius + m.info.width * 0.5, rightTrack.info.arcs.center:limits())
                            
                            local limitSup = rightTrack.info.limits[2]
                            local supL = calculateLimit(arL)(limitSup, rightTrack.info.pts[2])
                            local supR = calculateLimit(arR)(limitSup, rightTrack.info.pts[2])
                            
                            local inf = arL:rad(yState.pos)
                            if (y == 0 or y == -1) then
                                inf = rightTrack.info.arcs.center.inf
                            elseif (y > 0 and m.info.octa[5]) then
                                inf = arL:rad(modules[m.info.octa[5]].info.pts[2][1])
                            elseif (y < 0 and m.info.octa[1]) then
                                inf = arL:rad(modules[m.info.octa[1]].info.pts[2][1])
                            end
                            
                            arL = arL:withLimits({sup = supL, inf = inf})
                            arR = arR:withLimits({sup = supR, inf = inf})
                            aligned = true
                        elseif ref.prev then
                            local arcs = modules[m.info.octa[5]].info.arcs
                            
                            arL = arc.byOR(arcs.left.o, arcs.left.r, arcs.left:limits())
                            arR = arc.byOR(arcs.right.o, arcs.right.r, arcs.right:limits())
                            
                            arL = arL:withLimits({
                                inf = arL.sup,
                                sup = arL.sup + arL.sup - arL.inf
                            })
                            
                            arR = arR:withLimits({
                                inf = arR.sup,
                                sup = arR.sup - arR.inf + arR.sup
                            })
                            
                            aligned = true
                        elseif ref.next then
                            local arcs = modules[m.info.octa[1]].info.arcs
                            
                            arL = arc.byOR(arcs.left.o, arcs.left.r, arcs.left:limits())
                            arR = arc.byOR(arcs.right.o, arcs.right.r, arcs.right:limits())
                            
                            arL = arL:withLimits({
                                inf = arL.sup,
                                sup = arL.sup + arL.sup - arL.inf
                            })
                            
                            arR = arR:withLimits({
                                inf = arR.sup,
                                sup = arR.sup - arR.inf + arR.sup
                            })
                            
                            aligned = true
                        end
                        
                        if aligned then
                            local pts = {
                                arL:pt(arL.inf):avg(arR:pt(arR.inf)),
                                nil,
                                arL:pt(arL.sup):avg(arR:pt(arR.sup))
                            }
                            pts[2] = arL:ptByPt(pts[1]:avg(pts[3])):avg(arR:ptByPt(pts[1]:avg(pts[3])))
                            local midPts = {
                                pts[1]:avg(pts[2]),
                                pts[3]:avg(pts[2])
                            }
                            
                            local lines = {
                                line.pend(line.byPtPt(pts[1], pts[2]), midPts[1]),
                                line.pend(line.byPtPt(pts[3], pts[2]), midPts[2]),
                            }
                            
                            local o = lines[1] - lines[2]
                            if not o then
                                local halfChordLength2 = (pts[3] - pts[1]):length2() * 0.25
                                local normalLength = math.sqrt(10e8 * 10e8 - halfChordLength2)
                                local midPt = pts[1]:avg(pts[3])
                                o = midPt + ((pts[3] - pts[1]):normalized() .. coor.rotZ(0.5 * pi)) * normalLength
                                r = 10e8
                            end
                            
                            o = o:withZ(0)
                            
                            local vecInf = pts[1] - o
                            local vecSup = pts[3] - o
                            
                            local r = vecInf:length()
                            if r > 10e8 then
                                local halfChordLength2 = (pts[3] - pts[1]):length2() * 0.25
                                local normalLength = math.sqrt(10e8 * 10e8 - halfChordLength2)
                                o = pts[1]:avg(pts[3]) + (o - pts[2]):normalized() * normalLength
                                vecInf = pts[1] - o
                                vecSup = pts[3] - o
                                r = 10e8
                            end
                            ar = arc.byOR(o, r)
                            
                            local inf = ar:rad(pts[1])
                            
                            local length = math.asin(vecInf:cross(vecSup).z / (r * r)) * r
                            local sup = inf + length / r
                            ar = ar:withLimits({
                                sup = sup,
                                inf = inf
                            })
                            modules[slotId].info.radius = (length > 0 and 1 or -1) * (y < 0 and -1 or 1) * r
                            modules[slotId].info.length = math.abs(length)
                        end
                        
                        local refArc = {
                            left = arL,
                            right = arR,
                            center = ar
                        }
                        
                        modules[slotId].info.arcs = refArc
                        modules[slotId].info.pts = {
                            {
                                refArc.center:pt(refArc.center.inf),
                                refArc.center:tangent(refArc.center.inf)
                            },
                            {
                                refArc.center:pt(refArc.center.sup),
                                refArc.center:tangent(refArc.center.sup)
                            }
                        }
                        
                        if y >= 0 then
                            modules[slotId].info.pts[3] = modules[slotId].info.pts[1]
                            modules[slotId].info.pts[4] = modules[slotId].info.pts[2]
                        else
                            modules[slotId].info.pts[3] = {
                                modules[slotId].info.pts[2][1],
                                -modules[slotId].info.pts[2][2]
                            }
                            modules[slotId].info.pts[4] = {
                                modules[slotId].info.pts[1][1],
                                -modules[slotId].info.pts[1][2]
                            }
                        end
                        
                        modules[slotId].info.gravity = {
                            refArc.center:pt((refArc.center.inf + refArc.center.sup) * 0.5),
                            refArc.center:tangent((refArc.center.inf + refArc.center.sup) * 0.5)
                        }
                    end
                
                end
            end
        end
        
        local trackQueue = {}
        local platformQueue = {}
        
        local cr = {}
        
        for _, current in ipairs(queue) do
            local m = modules[current]
            local info = m.info
            local pos = info.pos
            cr[current] = coroutine.create(processY(pos.x, pos.y))
            if m.metadata.isTrack then
                table.insert(trackQueue, current)
            elseif m.metadata.isPlatform then
                table.insert(platformQueue, current)
            end
        end
        
        local finalQueue = func.concat(trackQueue, platformQueue)
        
        for _, current in ipairs(func.concat(queue, finalQueue)) do
            local result = coroutine.resume(cr[current])
            if not result then
                print(debug.traceback(cr[current]))
            end
        end
    end
    return grid
end

local constructionTemplates =
    {
        {
            constructionType = "RAIL_STATION",
            type = "DYNAMIC",
            availability = {
                yearFrom = 0,
                yearTo = 0
            },
            description = {
                name = _("MENU_NAME"),
                description = _("MENU_NAME")
            },
            data = {
                params = {}
            },
        }
    }

local createTemplateFn = function(params)
    local baseLength = trackLengths[params.lPlatform + 1]
    local nbTracks = trackNumberList[params.trackNb + 1]
    local radius = rList[params.radius]
    
    local nSeg = baseLength / 20
    
    local posList = params.platformLeft and ust.posGen(nbTracks, false) or ust.posGen(nbTracks)
    -- local trackType = ("%s%s.module"):format(params.capturedParams.moduleList[params.trackType + 1], params.catenary == 1 and "_catenary" or "")
    local result = {}
    local id = 1
    
    local yMax = nSeg % 2 == 0 and (nSeg / 2 - 1) or (nSeg - 1) / 2
    local yMin = nSeg % 2 == 0 and (-nSeg / 2) or (1 - nSeg) / 2
    
    for i, pos in ipairs(posList) do
        local x = #posList - i
        if pos then
            for y = yMin, yMax do
                local info = {
                    id = id,
                    type = 1,
                    pos = coor.xyz(x, y, 0),
                    length = 20,
                    width = 5,
                }
                local slotId, slotIds = ust.slotIds(info)
                result[slotId] = "station/rail/ust/tracks/high_speed.module"
                for _, slotId in pairs(slotIds) do
                    result[slotId] = "station/rail/ust/ust_data.module"
                end
                id = id + 1
            end
        else
            for y = yMin, yMax do
                local info = {
                    id = id,
                    type = 2,
                    pos = coor.xyz(x, y, 0),
                    length = 20,
                    width = 5,
                }
                local slotId, slotIds = ust.slotIds(info)
                result[slotId] = "station/rail/ust/ust_platform.module"
                for _, slotId in pairs(slotIds) do
                    result[slotId] = "station/rail/ust/ust_data.module"
                end
                id = id + 1
            end
        end
    end
    return result
end

local preProcessFn = function(modules, change)
    local classedModules = classifyModules(modules)
    
    local maxId = 0
    for slotId, module in pairs(modules) do
        module.info = ust.slotInfo(slotId, classedModules)
        if maxId < module.info.id then
            maxId = module.info.id
        end
    end
    
    local info = ust.slotInfo(change.slotId, classedModules)
    local data = change.slotId > 0 and floor(change.slotId / 1000000) or -floor(-change.slotId / 1000000)
    if change.added then
        if (info.type == 1 and data > 0) then
            if (data == 9) then
                local id = info.id
                local slotId = classedModules[id].slotId
                modules[slotId].name = change.module.name
            else
                local dpos = ({
                    [1] = coor.xyz(0, info.pos.y < 0 and -1 or 1, 0),
                    [3] = coor.xyz(1, 0, 0),
                    [5] = coor.xyz(0, info.pos.y < 0 and 1 or -1, 0),
                    [7] = coor.xyz(-1, 0, 0)
                })[data]
                local newInfo = {
                    id = maxId + 1,
                    type = change.module.metadata.typeId,
                    pos = info.pos + dpos,
                    length = 20,
                    width = 5
                }
                local slotId, dataIds = ust.slotIds(newInfo)
                modules[slotId] = change.module
                for key, slotId in pairs(dataIds) do
                    modules[slotId] = {
                        metadata = {isData = true},
                        name = "station/rail/ust/ust_data.module",
                        updateScript = {
                            fileName = "",
                            params = {}
                        },
                        variant = 0
                    }
                end
                for id, m in pairs(modules) do
                    if m.name == "station/rail/ust/ust_radius_modifier.module" then
                        modules[id] = nil
                    end
                end
            end
        elseif (info.type == 2 and data > 0) then
            if (data == 9) then
                local id = info.id
                local slotId = classedModules[id].slotId
                modules[slotId].name = change.module.name
            else
                local dpos = ({
                    [1] = coor.xyz(0, info.pos.y < 0 and -1 or 1, 0),
                    [3] = coor.xyz(1, 0, 0),
                    [5] = coor.xyz(0, info.pos.y < 0 and 1 or -1, 0),
                    [7] = coor.xyz(-1, 0, 0)
                })[data]
                local newInfo = {
                    id = maxId + 1,
                    type = change.module.metadata.typeId,
                    pos = info.pos + dpos,
                    length = 20,
                    width = 5
                }
                local slotId, dataIds = ust.slotIds(newInfo)
                modules[slotId] = change.module
                for key, slotId in pairs(dataIds) do
                    modules[slotId] = {
                        metadata = {isData = true},
                        name = "station/rail/ust/ust_data.module",
                        updateScript = {
                            fileName = "",
                            params = {}
                        },
                        variant = 0
                    }
                end
                for id, m in pairs(modules) do
                    if m.name == "station/rail/ust/ust_radius_modifier.module" then
                        modules[id] = nil
                    end
                end
            end
        elseif info.type == 99 and info.id ~= 1 then
            for _, slotId in pairs(classedModules[info.id].slot) do
                modules[slotId] = nil
            end
            modules[classedModules[info.id].slotId] = nil
            modules[change.slotId] = nil
        elseif info.type == 80 and data == 1 then
            modules[ust.base(info.id, 80)] = nil
        elseif info.type == 80 and data == 0 then
            modules[ust.base(info.id, 80)] = change.module
        elseif info.type >= 81 and info.type <= 86 then
            gridization(modules, classedModules)
            local id = info.id
            local m = modules[classedModules[id].slotId]
            
            if classedModules[id].slot[54] then
                modules[classedModules[id].slot[54]] = nil
            end
            
            if classedModules[id].slot[55] then
                modules[classedModules[id].slot[55]] = nil
            end
            
            if classedModules[id].slot[56] then
                modules[classedModules[id].slot[56]] = nil
            end
            
            modules[classedModules[id].slot[80]].variant = 1 - modules[classedModules[id].slot[80]].variant
            
            if info.type >= 81 and info.type <= 84 then
                local radius = m.info.radius
                
                if info.type == 81 or info.type == 82 then
                    local delta = data > 0 and pow(10, data - 1) or -pow(10, -data - 1)
                    if m.info.radius == 10e8 or m.info.straight then
                        radius = delta
                    else
                        radius = radius + delta
                    end
                else
                    local refArc = m.info.arcs.center
                    local i = data
                    local rad = (refArc.inf - refArc.sup) + i * pi / 180
                    radius = -floor(20 / rad)
                end
                
                if radius > 999999 then radius = 999999 elseif radius < -999999 then radius = -999999 end
                
                local addSlot = ust.mixData(ust.base(id, 54), radius > 0 and radius % 1000 or -(-radius % 1000))
                modules[addSlot] = {
                    metadata = {isData = true},
                    name = "station/rail/ust/ust_data.module",
                    updateScript = {
                        fileName = "",
                        params = {}
                    },
                    variant = 0
                }
                
                local addSlot = ust.mixData(ust.base(id, 55), radius > 0 and floor(radius / 1000) or -(floor(-radius / 1000)))
                modules[addSlot] = {
                    metadata = {isData = true},
                    name = "station/rail/ust/ust_data.module",
                    updateScript = {
                        fileName = "",
                        params = {}
                    },
                    variant = 0
                }
            elseif info.type == 85 or info.type == 86 then
                
                if data == 0 then
                    local addSlot = ust.mixData(ust.base(id, 56), 0)
                    modules[addSlot] = {
                        metadata = {isData = true},
                        name = "station/rail/ust/ust_data.module",
                        updateScript = {
                            fileName = "",
                            params = {}
                        },
                        variant = 0
                    }
                end
            end
        else
            modules[change.slotId] = change.module
        end
    else
        if (info.type == 1 and data == 0) then
            for _, slotId in pairs(classedModules[info.id].slot) do
                modules[slotId] = nil
            end
            modules[change.slotId] = nil
        end
    end
    
    return modules
end

local upgradeFn = function(_) end

local updateFn = function(params, closureParams)
    local result = {
        entryConnectors = {},
        colliders = {},
        terrainAlignmentLists = {{type = "EQUAL", faces = {}}},
        groundFaces = {},
        terminalGroups = {},
        stations = {},
        dependentSlots = {},
        edgeLists = {},
        slotConfig = {},
        occupied = {{}, {}, {}, {}},
        cost = 0,
        models = pipe.new * {},
        slots = {},
        labelText = {}
    }
    
    
    params.classedModules = classifyModules(params.modules)
    
    for id, info in pairs(params.classedModules) do
        params.modules[info.slotId].info = ust.slotInfo(info.slotId, params.classedModules)
        params.modules[info.slotId].makeData = function(type, data)
            return ust.mixData(ust.base(id, type), data)
        end
        for id, slotId in pairs(info.slot) do
            params.modules[slotId].info = ust.slotInfo(slotId, params.classedModules)
        end
    end
    
    local grid = gridization(params.modules, params.classedModules)
    
    params.grid = grid
    params.slotGrid = {}
    
    params.anyRadiusModifiable = false
    for _, module in pairs(params.modules) do
        params.anyRadiusModifiable = params.anyRadiusModifiable or module.info.canModifyRadius
    end
    
    for slotId, module in pairs(params.modules) do
        if module.metadata.isTrack then
            local baseTransf =
                quat.byVec(coor.xyz(0, module.info.pos.y < 0 and -1 or 1, 0), module.info.gravity[2]):mRot() *
                coor.trans(module.info.gravity[1])
            
            insert(result.slots, {
                id = slotId,
                transf = baseTransf,
                type = "ust_track",
                spacing = {2.5, 2.5, 2.5, 2.5}
            })
        elseif module.metadata.isPlatform then
            insert(result.slots, {
                id = slotId,
                transf = coor.I(),
                type = "ust_platform",
                spacing = {2.5, 2.5, 2.5, 2.5}
            })
        elseif module.metadata.isData then
            insert(result.slots, {
                id = slotId,
                transf = coor.I(),
                type = "ust_data",
                spacing = {0, 0, 0, 0}
            })
        end
    end
    
    result.terminateConstructionHook = function()
            -- dump()(result.slots)
            for _, z in pairs(params.slotGrid) do
                for _, x in pairs(z) do
                    for _, y in pairs(x) do
                        for _, s in pairs(y) do
                            insert(result.slots, s)
                        end
                    end
                end
            end
    end
    return result
end

function data()
    return {
        type = "RAIL_STATION",
        description = {
            name = _("MENU_NAME"),
            description = _("MENU_NAME")
        },
        availability = {
            yearFrom = 0,
            yearTo = 0
        },
        order = 1000,
        constructionTemplates = constructionTemplates,
        createTemplateFn = createTemplateFn,
        params = {
            {
                key = "trackNb",
                name = _("MENU_TRACK_NR"),
                values = func.map(trackNumberList, tostring),
                uiType = "SLIDER",
                defaultIndex = 0
            },
            {
                key = "trackType",
                name = _("MENU_TRACK_TYPE"),
                uiType = "COMBOBOX",
                values = {_("Standard"), _("High-Speed")},
                defaultIndex = 0
            },
            {
                key = "catenary",
                name = _("MENU_TRACK_CAT"),
                values = {_("YES"), _("NO")},
                defaultIndex = 0
            },
            {
                key = "radius",
                name = _("MENU_RADIUS"),
                values = rList * pipe.map(function(r) return r > 15 and "∞" or tostring(math.floor(r * 1000)) end),
                uiType = "SLIDER",
                defaultIndex = (#rList - 1) / 2
            },
            {
                key = "lPlatform",
                name = _("MENU_PLATFORM_LENGTH"),
                values = func.map(trackLengths, tostring),
                uiType = "SLIDER",
                defaultIndex = 0
            },
            {
                key = "hPlatform",
                name = _("MENU_PLATFORM_HEIGHT"),
                values = func.map(hPlatformList, tostring),
                uiType = "SLIDER",
                defaultIndex = 3
            },
            {
                key = "platformWidth",
                name = _("MENU_PLATFORM_WIDTH"),
                values = {"5", "10", "15", "20"},
                defaultIndex = 1
            },
            {
                key = "platformLeft",
                name = _("MENU_PLATFORM_LEFT"),
                values = {_("YES"), _("NO")},
                defaultIndex = 0
            },
            {
                key = "platformRight",
                name = _("MENU_PLATFORM_RIGHT"),
                values = {_("YES"), _("NO"), _("AUTO")},
                defaultIndex = 2
            },
        },
        upgradeFn = upgradeFn,
        updateFn = updateFn,
        preProcessFn = preProcessFn
    }
end

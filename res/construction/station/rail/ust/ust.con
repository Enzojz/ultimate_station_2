local func = require "ust/func"
local coor = require "ust/coor"
local pipe = require "ust/pipe"
local ust = require "ust"

local unpack = table.unpack
local insert = table.insert
local remove = table.remove

local dump = require "luadump"

local rList = {15, 12, 10, 8, 7.5, 6, 5, 4, 3.5, 3, 2.5, 2, 1.75, 1.5, 1.25, 1, 0.9, 0.85, 0.8, 0.75, 0.7, 0.666, 0.633, 0.6, 0.566, 0.533, 0.5, 0.475, 0.45, 0.425, 0.4, 0.375, 0.35, 0.325, 0.3, 0.28, 0.26, 0.24, 0.22, 0.2, 0.18, 0.16, 0.14, 0.12, 0.1, 0.09, 0.08, 0.07, 0.06, 0.05}

rList = pipe.new * rList * pipe.map(pipe.neg()) * pipe.rev() / ust.infi + rList
local hPlatformList = {200, 280, 380, 550, 680, 760, 915, 960, 1100, 1219, 1250, 1380}
local trackLengths = {40, 60, 80, 100, 140, 160, 200, 240, 320, 400, 480, 500, 550, 850, 1050}
local trackNumberList = {1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}

---@param g table<integer, table<integer, integer>>
---@param modules modules
---@return integer[]
---@return integer[]
local function fnQueue(g, modules)
    local groups = {}
    
    for x, g in pairs(g) do
        insert(groups, {})
        local ySeq = func.sort(func.keys(g))
        local function f(y, yNext, ...)
            local slotId = g[y]
            insert(groups[#groups], slotId)
            if yNext then
                if yNext - y > 1 then
                    insert(groups[#groups], slotId)
                    insert(groups, {})
                end
                f(yNext, ...)
            end
        end
        f(unpack(ySeq))
    end
    
    local parentMap = {}
    local moduleDeps = {}
    
    local function slotDeps(module)
        local pos = module.info.pos
        for _, posocta in ipairs({{"next", 1}, {"right", 3}, {"prev", 5}, {"left", 7}}) do
            local pos, octa = unpack(posocta)
            if module.info.ref[pos] then
                if not moduleDeps[module.info.octa[octa]] then
                    moduleDeps[module.info.octa[octa]] = {}
                end
                insert(moduleDeps[module.info.octa[octa]], module.info.slotId)
            end
        end
    end
    
    for x, g in pairs(g) do
        local ySeq = func.sort(func.keys(g))
        for _, y in ipairs(ySeq) do
            slotDeps(modules[g[y]])
        end
    end
    
    local queue = {}
    local monoYDeps = {g[0][0]}
    local monoXDeps = {}
    local doubleDeps = {}
    local depthMap = {[g[0][0]] = 0}
    
    while #monoXDeps > 0 or #monoYDeps > 0 or #doubleDeps > 0 do
        local slotId = #monoYDeps > 0 and remove(monoYDeps, 1) or (#monoXDeps > 0 and remove(monoXDeps, 1) or remove(doubleDeps, 1))
        local module = modules[slotId]
        insert(queue, slotId)
        if moduleDeps[slotId] then
            for _, depSlotId in ipairs(moduleDeps[slotId]) do
                local mDep = modules[depSlotId]
                if not parentMap[depSlotId] then
                    if mDep.info.ref.left and mDep.info.ref.right then
                        insert(doubleDeps, depSlotId)
                        parentMap[depSlotId] = slotId
                        depthMap[depSlotId] = depthMap[slotId] + 1
                    elseif mDep.info.octa[1] == module.info.slotId or mDep.info.octa[5] == module.info.slotId then
                        insert(monoYDeps, depSlotId)
                        parentMap[depSlotId] = slotId
                        depthMap[depSlotId] = depthMap[slotId] + 1
                    elseif mDep.info.octa[3] == module.info.slotId or mDep.info.octa[7] == module.info.slotId then
                        insert(monoXDeps, depSlotId)
                        parentMap[depSlotId] = slotId
                        depthMap[depSlotId] = depthMap[slotId] + 1
                    end
                end
            end
        end
    end
    dump()(
        {depthMap = depthMap, parentMap = parentMap, queue = queue}
    )
    for _, slotIds in ipairs(groups) do
        local modules = func.map(slotIds, function(slotId) return modules[slotId] end)
        local validModules = func.filter(modules, function(module) return not (module.info.ref.left and module.info.ref.right) end)
        if #validModules > 0 then
            local shallowest = func.min(validModules, function(lhs, rhs) dump()({lhs.info.slotId, rhs.info.slotId}) return depthMap[lhs.info.slotId] < depthMap[rhs.info.slotId] end)
            for _, m in ipairs(modules) do
                m.info.refPos = shallowest.info.pos
            end
        else
            local shallowest = func.min(modules, function(lhs, rhs) return depthMap[lhs.info.slotId] < depthMap[rhs.info.slotId] end)
            for _, m in ipairs(modules) do
                m.info.refPos = shallowest.info.pos
            end
        end
    end
    
    return pipe.new * queue, parentMap
end


---@param modules modules
---@param classedModules classified_modules
---@return table
---@return integer
ust.gridization = function(modules, classedModules)
        ---@type grid
        local grid = ust.octa(modules, classedModules)
        
        for z, g in pairs(grid) do
            local queue, parentMap = fnQueue(g, modules)
            local queue2 = queue * pipe.filter(function(slotId) return not (modules[slotId].info.ref.left and modules[slotId].info.ref.right) end)
                + queue * pipe.filter(function(slotId) return modules[slotId].info.ref.left and modules[slotId].info.ref.right end)
            
            local globalQueue = queue + queue + queue2
            
            -- Build the gridization queue
            -- Collect X postion and width information
            local xPos = func.seq(0, func.max(func.keys(g)))
            local xNeg = func.seq(func.min(func.keys(g)), -1)
            
            local xState = {
                pos = {[0] = 0},
                width = {}
            }
            do
                local xGroup = {}
                
                for _, x in ipairs(func.concat(xPos, func.rev(xNeg))) do
                    local width = 0
                    if grid[z][x] then
                        local yList = func.concat(
                            func.sort(func.filter(func.keys(grid[z][x]), function(k) return k >= 0 end)),
                            func.rev(func.sort(func.filter(func.keys(grid[z][x]), function(k) return k < 0 end)))
                        )
                        for _, y in ipairs(func.rev(yList)) do
                            local slotId = grid[z][x][y]
                            local m = modules[slotId]
                            local w = m.info.width or m.metadata.width
                            if not width or width < w then
                                width = w
                            end
                        end
                        
                        local sortedY = func.sort(yList)
                        for i, y in ipairs(sortedY) do
                            if xGroup[x] then
                                if y - sortedY[i - 1] == 1 then
                                    insert(xGroup[x][#xGroup[x]], y)
                                else
                                    insert(xGroup[x], {y})
                                end
                            else
                                xGroup[x] = {{y}}
                            end
                        end
                    else
                        width = 5
                    end
                    
                    if width then
                        xState.width[x] = width
                        if x > 0 then
                            xState.pos[x] = xState.pos[x - 1] + xState.width[x - 1] * 0.5 + width * 0.5
                        elseif x < 0 then
                            xState.pos[x] = xState.pos[x + 1] - xState.width[x + 1] * 0.5 - width * 0.5
                        end
                    end
                end
            end
            
            -- Collect X postion and width information
            -- Process in Y axis
            local processY = function(fn, x, y)
                return function()
                    local data = {
                        modules = modules,
                        grid = grid,
                        xState = xState,
                        xPos = xPos,
                        xNeg = xNeg,
                        parentMap = parentMap,
                    }
                    
                    fn(x, y, z, data)
                end
            end
            
            local cr = {}
            
            for _, slotId in ipairs(queue) do
                local m = modules[slotId]
                if (m.metadata.scriptName and game.res.script[m.metadata.scriptName]) then
                    local fn = game.res.script[m.metadata.scriptName][m.metadata.gridization or "gridization"]
                    if fn then
                        local pos = modules[slotId].info.pos
                        cr[slotId] = coroutine.create(processY(fn, pos.x, pos.y))
                    end
                end
            end
            
            for _, slotId in ipairs(globalQueue) do
                local result = coroutine.resume(cr[slotId])
                if not result then
                    error(debug.traceback(cr[slotId]))
                end
            end
        end
        return grid
end





---@param modules modules
---@return classified_modules
local function classifyModules(modules)
    local result = {}
    for slotId, m in pairs(modules) do
        if (m.metadata and m.metadata.preClassify) then
            game.res.script[m.metadata.scriptName][m.metadata.preClassify](modules, result, slotId)
        end
    end
    for slotId, m in pairs(modules) do
        if (m.metadata and m.metadata.classify) then
            game.res.script[m.metadata.scriptName][m.metadata.classify](modules, result, slotId)
        end
    end
    
    
    return result
end

local constructionTemplates = {
    {
        constructionType = "RAIL_STATION",
        type = "DYNAMIC",
        availability = {
            yearFrom = 0,
            yearTo = 0
        },
        description = {
            name = _("MENU_NAME"),
            description = _("MENU_DESC")
        },
        data = {
            params = {
                {
                    key = "trackType",
                    name = _("MENU_TRACK_TYPE"),
                    uiType = "COMBOBOX",
                    values = {_("Standard"), _("High-Speed")},
                    defaultIndex = 0
                },
                {
                    key = "catenary",
                    name = _("MENU_TRACK_CAT"),
                    values = {_("YES"), _("NO")},
                    defaultIndex = 0
                },
                {
                    key = "trackNb",
                    name = _("MENU_TRACK_NR"),
                    values = func.map(trackNumberList, tostring),
                    uiType = "SLIDER",
                    defaultIndex = 1
                },
                {
                    key = "lPlatform",
                    name = _("MENU_PLATFORM_LENGTH"),
                    values = func.map(trackLengths, tostring),
                    uiType = "SLIDER",
                    defaultIndex = 5
                },
                {
                    key = "platformWidth",
                    name = _("MENU_PLATFORM_WIDTH"),
                    values = {"5", "10", "15", "20"},
                    defaultIndex = 0
                },
                {
                    key = "radius",
                    name = _("MENU_RADIUS"),
                    values = rList * pipe.map(function(r) return r > 15 and "∞" or tostring(math.floor(r * 1000)) end),
                    uiType = "SLIDER",
                    defaultIndex = (#rList - 1) / 2
                },
                {
                    key = "hPlatform",
                    name = _("MENU_PLATFORM_HEIGHT"),
                    values = func.map(hPlatformList, tostring),
                    uiType = "SLIDER",
                    defaultIndex = 3
                },
                {
                    key = "platformLeft",
                    name = _("MENU_PLATFORM_LEFT"),
                    values = {_("YES"), _("NO")},
                    defaultIndex = 0
                },
                {
                    key = "platformRight",
                    name = _("MENU_PLATFORM_RIGHT"),
                    values = {_("YES"), _("AUTO")},
                    defaultIndex = 2
                }
            }
        },
    }
}

---@param params params
---@return table
local createTemplateFn = function(params)
    return game.res.script["construction/station/rail/ust/ust"]["createTemplateFn"](params)
end

---@param modules modules
---@return modules
local preProcessFn = function(modules, change)
    local classedModules = classifyModules(modules)
    
    local type, id, data = ust.slotInfo(change.slotId)
    
    local info = {
        type = type,
        id = id,
        data = data
    }
    
    if change.added then
        if change.module.metadata.preProcessAdd then
            game.res.script[change.module.metadata.scriptName][change.module.metadata.preProcessAdd](modules, change, classedModules, info)
        else
            if data == -1 then
                modules[change.slotId] = nil
                modules[ust.base(id, change.module.metadata.typeId)] = change.module
            else
                modules[change.slotId] = nil
                modules[ust.mixData(ust.base(id, change.module.metadata.typeId), data)] = change.module
            end
        end
        
        for k, module in pairs(modules) do
            if (module.metadata and module.metadata.preProcessPostAdd) then
                game.res.script[module.metadata.scriptName][module.metadata.preProcessPostAdd](modules, change, k, classedModules, info)
            end
        end
    else
        local m = modules[change.slotId]
        if m.metadata.preProcessRemove then
            game.res.script[m.metadata.scriptName][m.metadata.preProcessRemove](modules, change, classedModules, info)
        else
            modules[change.slotId] = nil
        end
    end
    
    return modules
end

local function searchTerminalGroups(params, current, ...)
    if current == nil then
        return
    end
    
    local m = params.modules[current]
    if m.metadata.isTrack and not m.info.trackGroup then
        while m.info.octa[1] and params.modules[m.info.octa[1]].metadata.isTrack do
            m = params.modules[m.info.octa[1]]
        end
        
        local groupLeft = {{}}
        local groupRight = {{}}
        
        repeat
            if not m.info.trackGroup then
                m.info.trackGroup = {}
            end
            if m.info.octa[7] and params.modules[m.info.octa[7]].metadata.isPlatform then
                insert(groupLeft[#groupLeft], m.info.slotId)
            elseif (#groupLeft[#groupLeft] > 0) then
                insert(groupLeft, {})
            end
            if m.info.octa[3] and params.modules[m.info.octa[3]].metadata.isPlatform then
                insert(groupRight[#groupRight], m.info.slotId)
            elseif (#groupRight[#groupRight] > 0) then
                insert(groupRight, {})
            end
            m = params.modules[m.info.octa[5]]
        until not m or not m.metadata.isTrack
        
        for _, groupLeft in ipairs(groupLeft) do
            if (#groupLeft > 0) then
                insert(params.trackGroup, groupLeft)
                for _, slotId in ipairs(groupLeft) do
                    params.modules[slotId].info.trackGroup.left = #params.trackGroup
                end
            end
        end
        
        for _, groupRight in ipairs(groupRight) do
            if (#groupRight > 0) then
                insert(params.trackGroup, groupRight)
                for _, slotId in ipairs(groupRight) do
                    params.modules[slotId].info.trackGroup.right = #params.trackGroup
                end
            end
        end
    end
    searchTerminalGroups(params, ...)
end


local upgradeFn = function(params)
    local classedModules = classifyModules(params.modules)
    ust.octa(params.modules, classedModules)
    local result = {}
    local lut = {}
    local function searchTracks(slotId)
        lut[slotId] = true
        local m = params.modules[slotId]
        local info = m.info
        for _, octa in ipairs({info.octa[1], info.octa[5]}) do
            if octa and params.modules[octa] and params.modules[octa].metadata.isTrack then
                if not lut[octa] then
                    searchTracks(octa)
                end
            end
        end
    end
    searchTracks(params.slotId)
    
    if params.catenaryToggle == 1 then
        for slotId, _ in pairs(lut) do
            local module = params.modules[slotId]
            insert(result, {module.makeData(27, 0), "station/rail/ust/struct/catenary.module"})
        end
    end
    
    if params.trackTypeToggle == 1 then
        for slotId, _ in pairs(lut) do
            local module = params.modules[slotId]
            insert(result, {slotId, ("station/rail/ust/tracks/%s.module"):format(module.name:match("high_speed") and "standard" or "high_speed")})
        end
    end
    
    return result
end

---@alias vec3 {[1]: number, [2]:number, [3]: number}
---@alias vec2 {[1]: number, [2]:number}
---
---@class terrain_alignment
---@field type "EQUAL"|"LESS"|"GREATER"
---@field faces vec3[][]
---
---@class ground_face
---@field mode {type: "FILL"|"STROKE"|"STROKE_OUTER"|"STROKE_INNER", key: string}
---@field face vec3[]
---
---@class collider
---@field params {halfExtents: vec3}|{points: vec3[]}
---@field transf matrix
---@field type "BOX"|"CYLINDER"|"POINT_CLOUD"
---
---@class terminal_group
---@field terminals {[1]: integer, [2]: integer}[]
---@field vehicleNodeOverride integer
---
---@class station
---@field terminals integer[]
---@field tag string
---
---@class edge_list
---@field type "STREET"|"TRACK"
---@field params {type: string, tramTrackType?: "YES"|"NO", catenary: boolean}
---@field edgeType? "BRIDGE"|"TUNNEL"
---@field edgeTypeName? string
---@field edges {[1]: vec3, [2]: vec3}[]
---@field snapNodes integer[]
---@field freeNodes? integer[]
---@field tag2Nodes table<string, integer[]>
---
---@class slotConfig
---@field maxModules integer
---@field message string
---@field skipCollisionCheck boolean
---
---@class model
---@field id string
---@field transf matrix
---@field tag string
---
---@class slot
---@field id integer
---@field type string
---@field transf matrix
---@field spacing {[1]: number, [2]: number, [3]: number, [4]: number}
---@field shape integer
---@field height number
---
---@class param
---@field key string
---@field name? string
---@field uiType? "BUTTON"|"SLIDER"|"COMBOBOX"|"ICON_BUTTON"|"CHECKBOX"
---@field values string[]
---@field defaultIndex? integer
---@field yearFrom? integer
---@field yearTo integer
---@field tooltip string
---
---@class params
---@field modules modules
---@field classedModules classified_modules
---
---@class result
---@field entryConnectors table
---@field colliders collider[]
---@field terminalGroups terminal_group[]
---@field groundFaces ground_face[]
---@field terrainAlignmentLists terrain_alignment[]
---@field stations station[]
---@field edgeLists edge_list[]
---@field slotConfig table<string, slotConfig>
---@field models model[]
---@field slots slot[]
---@field labelText? table<integer, string[]>
---@field cost? integer
---@field bulldozeCost? integer
---@field maintenanceCost? integer
---@field connectors any
---@field connections any
---@field invokeLater fun()[]
---
---comment
---@param params params
---@param closureParams any
---@return result
local updateFn = function(params, closureParams)
    local refHeight = pipe.new * func.values(params.modules)
        * pipe.filter(function(m) return m.metadata.isTrack end)
        * pipe.map(function(m) return m.metadata.height end)
        * pipe.max()
    
    params.refHeight = refHeight or 0
    params.platformHeight = params.refHeight + hPlatformList[params.hPlatform + 1] * 0.001
    
    ---@type result
    local result = {
        entryConnectors = {},
        colliders = {},
        -- callInvalidModules = true,
        terrainAlignmentLists = {
            {type = "EQUAL", faces = {}},
            {type = "LESS", faces = {}},
            {type = "GREATER", faces = {}},
            {type = "EQUAL", faces = {}, optional = true},
            {type = "LESS", faces = {}, optional = true},
            {type = "GREATER", faces = {}, optional = true}
        },
        terrainLists = {},
        groundFaces = {},
        terminalGroups = {},
        stations = {},
        edgeLists = {},
        slotConfig = {},
        cost = 0,
        models = pipe.new * {},
        slots = {},
        labelText = {},
        connectors = {
            overpass = {},
            underpass = {},
            misc = {}
        },
        connections = {
            underpass = {}
        },
        invokeLater = {}
    }
    
    params.classedModules = classifyModules(params.modules)
    for slotId, m in pairs(params.modules) do
        if (m.metadata and m.metadata.postClassify) then
            game.res.script[m.metadata.scriptName][m.metadata.postClassify](params.modules, result, slotId, params)
        end
    end
    
    params.grid = ust.gridization(params.modules, params.classedModules)
    
    params.slotGrid = {}
    
    params.trackGroup = {}
    params.platformGroup = {}
    params.edgeIndex = {}
    params.extra = {}
    
    searchTerminalGroups(params, unpack(func.map(func.sort(func.keys(params.classedModules)), function(id) return params.classedModules[id].slotId end)))
    params.edgeGroup = {}
    
    -- slotSetup adds slots for modules itself
    for slotId, module in pairs(params.modules) do
        if module.metadata.slotSetup then
            game.res.script[module.metadata.scriptName][module.metadata.slotSetup](params, result, slotId)
        end
    end
    
    -- addSlot adds slots for
    for k, s in pairs(game.res.script) do
        if s.addSlot and k:match("construction/station/rail/ust/") then
            s.addSlot(params, result)
        end
    end
    
    result.terminateConstructionHook = function()
        for i, track in ipairs(params.trackGroup) do
            local platform = params.platformGroup[i]
            if platform then
                local edge = func.map(track, function(t) return params.edgeGroup[t] end)
                if (platform.right) then
                    insert(
                        result.terminalGroups,
                        {
                            terminals = func.map(platform.models, function(p) return {p, 0} end),
                            vehicleNodeOverride = #edge % 2 == 0 and edge[#edge / 2][11] or edge[(#edge + 1) / 2][8]
                        }
                )
                end
                
                if (platform.left) then
                    insert(
                        result.terminalGroups,
                        {
                            terminals = func.map(platform.models, function(p) return {p, 0} end),
                            vehicleNodeOverride = #edge % 2 == 0 and edge[#edge / 2 + 1][1] or edge[(#edge + 1) / 2][6]
                        }
                )
                end
            end
        end
        
        for _, z in pairs(params.slotGrid) do
            for _, x in pairs(z) do
                for _, y in pairs(x) do
                    for _, s in pairs(y) do
                        insert(result.slots, s)
                    end
                end
            end
        end
        
        for _, fn in ipairs(result.invokeLater) do
            fn()
        end
        
        for id, terrains in pairs(result.terrainLists) do
            if terrains.equal then
                for _, t in ipairs(terrains.equal) do
                    insert(result.terrainAlignmentLists[1].faces, t)
                end
            end
            if terrains.less then
                for _, t in ipairs(terrains.less) do
                    insert(result.terrainAlignmentLists[2].faces, t)
                end
            end
            if terrains.greater then
                for _, t in ipairs(terrains.greater) do
                    insert(result.terrainAlignmentLists[3].faces, t)
                end
            end
            if terrains.equalOpt then
                for _, t in ipairs(terrains.equalOpt) do
                    insert(result.terrainAlignmentLists[4].faces, t)
                end
            end
            if terrains.lessOpt then
                for _, t in ipairs(terrains.lessOpt) do
                    insert(result.terrainAlignmentLists[5].faces, t)
                end
            end
            if terrains.greaterOpt then
                for _, t in ipairs(terrains.greaterOpt) do
                    insert(result.terrainAlignmentLists[6].faces, t)
                end
            end
        end
    
    
    end
    return result
end

function data()
    return {
        type = "RAIL_STATION",
        description = {
            name = _("MENU_NAME"),
            description = _("MENU_NAME")
        },
        availability = {
            yearFrom = 0,
            yearTo = 0
        },
        order = 1000,
        constructionTemplates = constructionTemplates,
        createTemplateFn = createTemplateFn,
        params = {
            {
                key = "debug",
                name = _("MENU_DEBUG"),
                values = {_("No"), _("Yes")},
                defaultIndex = 0
            },
        },
        upgradeFn = upgradeFn,
        updateFn = updateFn,
        preProcessFn = preProcessFn
    }
end

local func = require "ust/func"
local coor = require "ust/coor"
local arc = require "ust/coorarc"
local quat = require "ust/quaternion"
local pipe = require "ust/pipe"
local general = require "ust/general"
local ust = require "ust"
local dump = require "luadump"
local livetext = require "ust/livetext"

local unpack = table.unpack
local insert = table.insert
local abs = math.abs
local pow = math.pow
local floor = math.floor
local pi = math.pi

local arcPacker = function(pt, vec, length, radius)
    local nVec = vec:withZ(0):normalized()
    local tVec = coor.xyz(-nVec.y, nVec.x, 0)
    local o = pt + tVec * radius
    local ar = arc.byOR(o, abs(radius))
    local inf = ar:rad(pt)
    local sup = inf + length / radius
    ar = ar:withLimits({
        sup = sup,
        inf = inf
    })
    return function(...)
        local result = func.map({...}, function(dr)
            return arc.byOR(o, abs(radius + dr), {
                sup = sup,
                inf = inf
            })
        end)
        return ar, unpack(result)
    end
end

local function classifyModules(params)
    local result = {}
    for slotId, m in pairs(params) do
        local slotIdAbs = abs(slotId)
        local type = slotIdAbs % 100
        local id = (slotIdAbs - type) / 100 % 10000
        m.typeId = type
        if not result[id] then result[id] = {info = {}, slot = {}} end
        if (type < 50) then
            result[id].type = type
            result[id].slotId = slotId
            result[id].data = slotId > 0 and floor(slotIdAbs / 1000000) or -floor(slotIdAbs / 1000000)
        else
            local data = slotId > 0 and floor(slotIdAbs / 1000000) or -floor(slotIdAbs / 1000000)
            result[id].info[type] = data
            result[id].slot[type] = slotId
        end
    end
    return result
end

local function gridization(modules, classedModules)
    local grid = {}
    for id, info in pairs(classedModules) do
        modules[info.slotId].info = ust.slotInfo(info.slotId, classedModules)
        modules[info.slotId].makeData = function(type, data)
            return ust.mixData(ust.base(id, type), data)
        end
        for id, slotId in pairs(info.slot) do
            modules[slotId].info = ust.slotInfo(slotId, classedModules)
        end
    end
    
    for slotId, module in pairs(modules) do
        if not module.metadata.isData then
            local info = module.info
            if not grid[info.pos.z] then grid[info.pos.z] = {} end
            if not grid[info.pos.z][info.pos.x] then grid[info.pos.z][info.pos.x] = {} end
            grid[info.pos.z][info.pos.x][info.pos.y] = slotId
        end
    end
    
    for z, zv in pairs(grid) do
        local xPos = func.sort(func.filter(func.keys(zv), function(k) return k >= 0 end))
        local xNeg = func.rev(func.sort(func.filter(func.keys(zv), function(k) return k < 0 end)))
        local xState = false
        
        local processX = function(x)
            if (not xState) then
                xState = {
                    pos = 0,
                    refList = {},
                }
            end
            
            local yPos = func.sort(func.filter(func.keys(grid[z][x]), function(k) return k >= 0 end))
            local yNeg = func.rev(func.sort(func.filter(func.keys(grid[z][x]), function(k) return k < 0 end)))
            
            for _, y in ipairs(func.rev(func.concat(yNeg, yPos))) do
                local slotId = grid[z][x][y]
                local m = modules[slotId]
                local w = m.info.width or m.metadata.width
                if w then
                    if xState.width then
                        xState.pos = xState.pos + xState.width * (x < 0 and -0.5 or 0.5)
                    end
                    xState.width = w
                    xState.pos = xState.pos + xState.width * (x < 0 and -0.5 or 0.5)
                    xState.refList[x] = xState.pos
                    break
                end
            end
            
            local processY = function(y)
                local slotId = grid[z][x][y]
                local m = modules[slotId]
                
                if grid[z][x][y - 1] then
                    modules[grid[z][x][y - 1]].info.next = slotId
                    m.info.prev = grid[z][x][y - 1]
                end
                
                if grid[z][x][y + 1] then
                    modules[grid[z][x][y + 1]].info.prev = slotId
                    m.info.next = grid[z][x][y + 1]
                end
                
                if not m.info.width then
                    m.info.width = m.metadata.width or 5
                end
                
                local yState = {}
                
                local width = m.info.width
                local ref = (y > 0 and grid[z][x][y - 1]) or (y < 0 and grid[z][x][y + 1])
                if y == 0 or y == -1 then
                    yState = {
                        pos = coor.xyz(xState.pos, 0, 0),
                        vec = coor.xyz(0, y < 0 and -1 or 1, 0),
                        width = width,
                        radius = m.info.straight and 10e8 or m.info.radius,
                        length = m.info.length
                    }
                elseif ref then
                    yState = {
                        pos = modules[ref].info.pts[2][1],
                        vec = modules[ref].info.pts[2][2],
                        width = width,
                        radius = m.info.straight and 10e8 or (m.info.radius or modules[ref].info.radius),
                        length = m.info.length
                    }
                else
                    for ix = x + (x < 0 and 1 or -1), 0, (x < 0 and 1 or -1) do
                        if grid[z][ix][y] then
                            local pos = modules[grid[z][ix][y]].info.pts[1][1]
                            local vec = modules[grid[z][ix][y]].info.pts[1][2]
                            
                            yState = {
                                pos = pos + (vec:normalized() .. coor.rotZ((y < 0 and 0.5 or -0.5) * pi)) * (xState.pos - xState.refList[ix]),
                                vec = vec,
                                width = width,
                                radius = m.info.straight and 10e8 or m.info.radius,
                                length = m.info.length
                            }
                            break
                        end
                    end
                end
                
                if not yState.radius then
                    if ref then
                        for i = y + (y < 0 and 1 or -1), 0, (y < 0 and 1 or -1) do
                            if grid[z][x] and grid[z][x][i] then
                                yState.radius = modules[grid[z][x][i]].info.radius
                                break
                            end
                        end
                    end
                    if not yState.radius then
                        for i = x + (x < 0 and 1 or -1), (x < 0 and func.max(xPos) or func.min(xNeg) or 0), (x < 0 and 1 or -1) do
                            if grid[z][i] and grid[z][i][y] then
                                yState.radius = modules[grid[z][i][y]].info.radius + (xState.pos - xState.refList[i])
                                break
                            end
                        end
                    end
                    if not yState.radius then
                        yState.radius = 10e8
                    end
                end
                m.info.radius = yState.radius
                
                local ar, arL, arR =
                    arcPacker(yState.pos, yState.vec, yState.length, y < 0 and -yState.radius or yState.radius)(-yState.width * 0.5, yState.width * 0.5)
                if y < 0 then arL, arR = arR, arL end
                local refArc = {
                    left = arL,
                    right = arR,
                    center = ar
                }
                
                modules[slotId].info.arcs = refArc
                
                modules[slotId].info.pts = {
                    {
                        refArc.center:pt(refArc.center.inf),
                        refArc.center:tangent(refArc.center.inf)
                    },
                    {
                        refArc.center:pt(refArc.center.sup),
                        refArc.center:tangent(refArc.center.sup)
                    }
                }
                
                yState.vec = y < 0 and -refArc.center:tangent(refArc.center.sup) or refArc.center:tangent(refArc.center.sup)
                yState.pos = refArc.center:pt(refArc.center.sup)
            end
            
            for _, y in ipairs(yPos) do processY(y) end
            yState = false
            for _, y in ipairs(yNeg) do processY(y) end
        end
        
        for _, x in ipairs(xPos) do processX(x) end
        if xState then
            xState.pos = 0
            xState.width = nil
        end
        for _, x in ipairs(xNeg) do processX(x) end
    end
    return grid
end

local constructionTemplates =
    {
        {
            constructionType = "RAIL_STATION",
            type = "DYNAMIC",
            availability = {
                yearFrom = 0,
                yearTo = 0
            },
            description = {
                name = _("MENU_NAME"),
                description = _("MENU_NAME")
            },
            data = {
                params = {}
            },
        }
    }

local createTemplateFn = function(_)
    local result = {
        [101] = "station/rail/ust/ust_track.module",
        [151] = "station/rail/ust/ust_data.module",
        [152] = "station/rail/ust/ust_data.module",
        [153] = "station/rail/ust/ust_data.module",
        [100000154] = "station/rail/ust/ust_data.module",
        [-155] = "station/rail/ust/ust_data.module",
        [20000157] = "station/rail/ust/ust_data.module",
        
        [301] = "station/rail/ust/ust_track.module",
        [351] = "station/rail/ust/ust_data.module",
        [-001000352] = "station/rail/ust/ust_data.module",
        [353] = "station/rail/ust/ust_data.module",
        [-100000354] = "station/rail/ust/ust_data.module",
        [-001000355] = "station/rail/ust/ust_data.module",
        [20000357] = "station/rail/ust/ust_data.module",
    }
    
    return result
end

local preProcessFn = function(modules, change)
    local classedModules = classifyModules(modules)
    
    local maxId = 0
    for slotId, module in pairs(modules) do
        module.info = ust.slotInfo(slotId, classedModules)
        if maxId < module.info.id then
            maxId = module.info.id
        end
    end
    
    local info = ust.slotInfo(change.slotId, classedModules)
    local data = change.slotId > 0 and floor(change.slotId / 1000000) or -floor(-change.slotId / 1000000)
    if change.added then
        
        if (info.type == 1 and data < 5 and data > 0) then
            local dpos = ({
                coor.xyz(-1, 0, 0),
                coor.xyz(1, 0, 0),
                coor.xyz(0, info.pos.y < 0 and 1 or -1, 0),
                coor.xyz(0, info.pos.y < 0 and -1 or 1, 0)
            })[data]
            local newInfo = {
                id = maxId + 1,
                type = change.module.metadata.typeId,
                pos = info.pos + dpos,
                length = 20,
                width = 5
            }
            local slotId, dataIds = ust.slotIds(newInfo)
            modules[slotId] = change.module
            for key, slotId in pairs(dataIds) do
                modules[slotId] = {
                    metadata = {isData = true},
                    name = "station/rail/ust/ust_data.module",
                    updateScript = {
                        fileName = "",
                        params = {}
                    },
                    variant = 0
                }
            end
        elseif info.type == 99 and info.id ~= 1 then
            for _, slotId in pairs(classedModules[info.id].slot) do
                modules[slotId] = nil
            end
            modules[classedModules[info.id].slotId] = nil
            modules[change.slotId] = nil
        elseif info.type == 80 and data == 1 then
            modules[ust.base(info.id, 80)] = nil
            modules[change.slotId] = change.module
        elseif info.type == 80 and data == 2 then
            modules[ust.mixData(ust.base(info.id, 80), 1)] = nil
        elseif info.type >= 81 and info.type <= 86 then
            local grid = gridization(modules, classedModules)
            local id = info.id
            local m = modules[classedModules[id].slotId]
            
            if classedModules[id].slot[54] then
                modules[classedModules[id].slot[54]] = nil
            end
            
            if classedModules[id].slot[55] then
                modules[classedModules[id].slot[55]] = nil
            end
            
            if classedModules[id].slot[56] then
                modules[classedModules[id].slot[56]] = nil
            end
            
            modules[classedModules[id].slot[80]].variant = 1 - modules[classedModules[id].slot[80]].variant
            
            if info.type >= 81 and info.type <= 84 then
                
                local radius = m.info.radius
                
                if info.type == 81 or info.type == 82 then
                    local delta = data > 0 and pow(10, data - 1) or -pow(10, -data - 1)
                    if m.info.radius == 10e8 or m.info.straight then
                        radius = delta
                    else
                        radius = radius + delta
                    end
                else
                    local refArc = m.info.arcs.center
                    local i = data
                    local rad = (refArc.inf - refArc.sup) + i * pi / 180
                    radius = -floor(20 / rad)
                end
                
                if radius > 999999 then radius = 999999 elseif radius < -999999 then radius = -999999 end
                
                local addSlot = ust.mixData(ust.base(id, 54), radius > 0 and radius % 1000 or -(-radius % 1000))
                modules[addSlot] = {
                    metadata = {isData = true},
                    name = "station/rail/ust/ust_data.module",
                    updateScript = {
                        fileName = "",
                        params = {}
                    },
                    variant = 0
                }
                
                local addSlot = ust.mixData(ust.base(id, 55), radius > 0 and floor(radius / 1000) or -(floor(-radius / 1000)))
                modules[addSlot] = {
                    metadata = {isData = true},
                    name = "station/rail/ust/ust_data.module",
                    updateScript = {
                        fileName = "",
                        params = {}
                    },
                    variant = 0
                }
            elseif info.type == 85 or info.type == 86 then
                
                if data == 0 then
                    local addSlot = ust.mixData(ust.base(id, 56), 0)
                    modules[addSlot] = {
                        metadata = {isData = true},
                        name = "station/rail/ust/ust_data.module",
                        updateScript = {
                            fileName = "",
                            params = {}
                        },
                        variant = 0
                    }
                end
            end
        else
            modules[change.slotId] = change.module
        end
    else
        if (info.type == 1 and data == 0) then
            for _, slotId in pairs(classedModules[info.id].slot) do
                modules[slotId] = nil
            end
            modules[change.slotId] = nil
        end
    end
    
    return modules
end

local upgradeFn = function(_) end

local updateFn = function(params)
    local result = {
        entryConnectors = {},
        colliders = {},
        terrainAlignmentLists = {{type = "EQUAL", faces = {}}},
        groundFaces = {},
        terminalGroups = {},
        stations = {},
        dependentSlots = {},
        edgeLists = {},
        slotConfig = {},
        occupied = {{}, {}, {}, {}},
        cost = 0,
        models = pipe.new * {},
        slots = {},
        labelText = {}
    }
    
    
    params.classedModules = classifyModules(params.modules)
    
    for id, info in pairs(params.classedModules) do
        params.modules[info.slotId].info = ust.slotInfo(info.slotId, params.classedModules)
        params.modules[info.slotId].makeData = function(type, data)
            return ust.mixData(ust.base(id, type), data)
        end
        for id, slotId in pairs(info.slot) do
            params.modules[slotId].info = ust.slotInfo(slotId, params.classedModules)
        end
    end
    
    local grid = gridization(params.modules, params.classedModules)
    params.grid = grid
    
    params.anyRadiusModifiable = false
    for _, module in pairs(params.modules) do
        params.anyRadiusModifiable = params.anyRadiusModifiable or module.info.canModifyRadius or module.info.canModifyDest
    end
    
    for slotId, module in pairs(params.modules) do
        if not module.metadata.isData then
            local refArc = module.info.arcs.center
            local midPt = 0.5 * (refArc.sup + refArc.inf)
            local baseTransf =
                quat.byVec(coor.xyz(0, module.info.pos.y < 0 and -1 or 1, 0), refArc:tangent(midPt)):mRot() *
                coor.trans(refArc:pt(midPt))
            
            insert(result.slots, {
                id = slotId,
                transf = baseTransf,
                type = ust.typeList[module.typeId] or "ust_data",
                spacing = {2.5, 2.5, 2.5, 2.5}
            })
            
            result.dependentSlots[slotId] = {}
        
        else
            insert(result.slots, {
                id = slotId,
                transf = coor.I(),
                type = "ust_data",
                spacing = {1.5, 1.5, 1.5, 1.5}
            })
        end
    end
    
    
    for z, gridx in pairs(grid) do
        for x, gridy in pairs(gridx) do
            local ys = func.keys(gridy)
            local min = func.min(ys)
            local max = func.max(ys)
        end
    end
    
    
    
    
    result.terminateConstructionHook = function()
        end
    return result
end

function data()
    
    return {
        type = "RAIL_STATION",
        description = {
            name = _("MENU_NAME"),
            description = _("MENU_NAME")
        },
        availability = {
            yearFrom = 0,
            yearTo = 0
        },
        order = 1000,
        constructionTemplates = constructionTemplates,
        createTemplateFn = createTemplateFn,
        params = {
        },
        upgradeFn = upgradeFn,
        updateFn = updateFn,
        preProcessFn = preProcessFn
    }
end

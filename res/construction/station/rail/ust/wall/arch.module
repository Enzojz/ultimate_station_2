local coor = require "ust/coor"
local ust = require "ust"

local insert = table.insert

local fitModels = ust.fitModel(0.5, 5, 5, true, true)


local updateFn = function(result, transform, tag, slotId, addModelFn, params)
    local id = params.modules[slotId].info.id
    local info = params.modules[params.classedModules[id].slotId].info
    local baseHeight = info.height
    local data = params.modules[slotId].info.data
    
    local hTrans = coor.transZ(baseHeight)
    
    local h = 4
    if data == 3 or data == 7 then
        local sideModule = info.octa[data] and params.modules[info.octa[data]]
        if sideModule then
            local info = sideModule.info
            local sideHeight = info.height
            if sideHeight - baseHeight > 3 then
                h = sideHeight - baseHeight
            end
        end
        local n = 4
        local cpts = ust.basePts(info.arcs.center, n)
        local pts = ust.basePts(data == 3 and info.arcs.right or info.arcs.left, n)
        
        for i = 1, n do
            local coords = data == 7 and {
                rt = pts[i],
                rb = pts[i + 1],
                lt = (cpts[i] - pts[i]):normalized() * 0.25 + pts[i],
                lb = (cpts[i + 1] - pts[i + 1]):normalized() * 0.25 + pts[i + 1]
            } or {
                lt = pts[i],
                lb = pts[i + 1],
                rt = (cpts[i] - pts[i]):normalized() * 0.25 + pts[i],
                rb = (cpts[i + 1] - pts[i + 1]):normalized() * 0.25 + pts[i + 1]
            }
            
            if data == 7 then
                insert(result.models, ust.newModel("ust/walls/arch_top_tl.mdl", tag, coor.transZ(h - 3) * hTrans * fitModels(coords, true)))
                insert(result.models, ust.newModel("ust/walls/arch_top_br.mdl", tag, coor.transZ(h - 3) * hTrans * fitModels(coords, false)))
                insert(result.models, ust.newModel("ust/walls/arch_tl.mdl", tag, coor.scaleZ(h - 3) * hTrans * fitModels(coords, true)))
                insert(result.models, ust.newModel("ust/walls/arch_br.mdl", tag, coor.scaleZ(h - 3) * hTrans * fitModels(coords, false)))
            else
                insert(result.models, ust.newModel("ust/walls/arch_top_br.mdl", tag, coor.rotZ(math.pi) * coor.transZ(h - 3) * hTrans * fitModels(coords, true)))
                insert(result.models, ust.newModel("ust/walls/arch_top_tl.mdl", tag, coor.rotZ(math.pi) * coor.transZ(h - 3) * hTrans * fitModels(coords, false)))
                insert(result.models, ust.newModel("ust/walls/arch_br.mdl", tag, coor.rotZ(math.pi) * coor.scaleZ(h - 3) * hTrans * fitModels(coords, true)))
                insert(result.models, ust.newModel("ust/walls/arch_tl.mdl", tag, coor.rotZ(math.pi) * coor.scaleZ(h - 3) * hTrans * fitModels(coords, false)))
                end
        end
    elseif data == 1 or data == 5 then
        local rank = data == 5 and 1 or 3
        
        local ptL = info.arcs.left:pt(data == 1 and info.arcs.left.sup or info.arcs.left.inf)
        local ptR = info.arcs.right:pt(data == 1 and info.arcs.right.sup or info.arcs.right.inf)
        local width = (ptL - ptR):length()
        
        local n = width < 5 and 1 or math.ceil(width / 5)
        local baseLength = width / n
        local vec = (ptR - ptL):normalized()
        
        for i = 1, n do
            local refPt = ptL + vec * ((i - 0.5) * baseLength)
            local transf = hTrans
                * coor.scaleX(baseLength / config.width)
                * quat.byVec(coor.xyz(data == 1 and -1 or 1, 0, 0), vec):mRot()
                * coor.trans(refPt)
            
            insert(result.models, ust.newModel(config.fence:format(color), tag, transf));
        end
        
        
        local coords = data == 1 and {
            lt = ptsR[rank],
            lb = ptsL[rank],
            rt = (ptsR[2] - ptsR[rank]):normalized() * 0.25 + ptsR[rank],
            rb = (ptsL[2] - ptsL[rank]):normalized() * 0.25 + ptsL[rank]
        } or {
            rt = ptsR[rank],
            rb = ptsL[rank],
            lt = (ptsR[2] - ptsR[rank]):normalized() * 0.25 + ptsR[rank],
            lb = (ptsL[2] - ptsL[rank]):normalized() * 0.25 + ptsL[rank]
        }
        
        insert(result.models, ust.newModel("ust/walls/arch_top_tl.mdl", tag, coor.transZ(h - 3) * hTrans * fitModels(coords, true)))
        insert(result.models, ust.newModel("ust/walls/arch_top_br.mdl", tag, coor.transZ(h - 3) * hTrans * fitModels(coords, false)))
        insert(result.models, ust.newModel("ust/walls/arch_tl.mdl", tag, coor.scaleZ(h - 3) * hTrans * fitModels(coords, true)))
        insert(result.models, ust.newModel("ust/walls/arch_br.mdl", tag, coor.scaleZ(h - 3) * hTrans * fitModels(coords, false)))
    end

end

function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        buildMode = "SINGLE",
        cost = {
            price = 0,
        },
        description = {
            name = _("MENU_MODULE_WALL_ARCH"),
            description = _("MENU_MODULE_WALL_ARCH_DESC"),
        },
        category = {
            categories = {"ust_cat_wall"},
        },
        type = "ust_component_fence",
        order = {
            value = 204,
        },
        metadata = {
            scriptName = "construction/station/rail/ust/struct/fence",
            classify = "classify",
            typeName = "ust_component_fence",
            isComponent = true,
            isFence = true,
            typeId = 24,
            width = 5
        },
        
        updateFn = updateFn,
        
        getModelsFn = function(params)
            return {}
        end
    }

end

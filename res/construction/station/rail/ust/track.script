local func = require "ust/func"
local coor = require "ust/coor"
local pipe = require "ust/pipe"
local ust = require "ust"
local general = require "ust/general"
local quat = require "ust/quaternion"
local dump = require "luadump"
local livetext = require "ust/livetext"


local unpack = table.unpack
local insert = table.insert
local ma = math
local pi = ma.pi
local abs = ma.abs
local pow = ma.pow


local preProcessAdd = function(modules, change, classedModules, info)
    local maxId = func.max(func.keys(classedModules))
    
    if (info.data == -1) then
        local id = info.id
        local slotId = classedModules[id].slotId
        modules[slotId].name = change.module.name
    else
        local pos = modules[classedModules[info.id].slotId].info.pos
        local dpos = ({
            [1] = coor.xyz(0, 1, 0),
            [3] = coor.xyz(1, 0, 0),
            [5] = coor.xyz(0, -1, 0),
            [7] = coor.xyz(-1, 0, 0)
        })[info.data]
        local newInfo = {
            id = maxId + 1,
            type = change.module.metadata.typeId,
            pos = pos + dpos,
            length = 20,
            width = 5
        }
        local slotId, dataIds = ust.slotIds(newInfo)
        modules[slotId] = change.module
        for m, slotIds in pairs(dataIds) do
            for _, slotId in ipairs(slotIds) do
                modules[slotId] = {
                    metadata = {isData = true},
                    name = string.format("station/rail/ust/%s.module", m),
                    updateScript = {
                        fileName = "",
                        params = {}
                    },
                    variant = 0
                }
            
            end
        end
    end
end

local preProcessRemove = function(modules, change, classedModules, info)
    for _, slotId in pairs(classedModules[info.id].slot) do
        modules[slotId] = nil
    end
    modules[change.slotId] = nil
end

local slotSetup = function(params, result, slotId)
    local module = params.modules[slotId]
    local info = params.modules[slotId].info
    local makeData = params.modules[slotId].makeData
    
    local arcs = info.arcs
    local transfPosC = info.transf
    
    local pos = info.pos
    local metadata = params.modules[slotId].metadata
    local refArc = arcs.center
    
    insert(result.slots, {
        id = slotId,
        transf = module.info.transf,
        type = module.metadata.typeName,
        spacing = {0, 0, 0, 0}
    })
    
    do
        local octaModules = {}
        for i = 1, 8 do
            octaModules[i] = info.octa[i] and params.modules[info.octa[i]] or false
        end
        if not (octaModules[1] and octaModules[1].info.ref.prev
            or octaModules[5] and octaModules[5].info.ref.next
            or octaModules[3] and octaModules[3].info.ref.left
            or octaModules[7] and octaModules[7].info.ref.right)
        then
            if (info.id ~= 1) then
                insert(result.slots, {
                    id = makeData(2, -2),
                    transf = transfPosC,
                    type = "ust_remove",
                    spacing = {0, 0, 0, 0}
                })
            end
        end
    end
    
    
    insert(
        result.slots,
        {
            id = makeData(1, -1),
            transf = transfPosC,
            type = "ust_track",
            spacing = {0, 0, 0, 0}
        }
    )
    if (info.id ~= 1) then -- id 1 must be a track
        insert(
            result.slots,
            {
                id = makeData(2, -1),
                transf = transfPosC,
                type = "ust_platform",
                spacing = {0, 0, 0, 0}
            }
    )
    end
    
    ust.initSlotGrid(params, pos)
    local newTopologySlots = ust.newTopologySlots(params, makeData, pos)
    
    if not (info.octa[3]) then
        local transf = coor.trans(coor.xyz(metadata.width, 0, 0)) * transfPosC
        newTopologySlots(pos.x + 1, pos.y, transf, 3)
    end
    
    if not (info.octa[7]) then
        local transf = coor.trans(coor.xyz(-metadata.width, 0, 0)) * transfPosC
        newTopologySlots(pos.x - 1, pos.y, transf, 7)
    end
    
    if not info.octa[1] then
        local fwPt = refArc.sup + 0.5 * (refArc.sup - refArc.inf)
        local transf = quat.byVec(coor.xyz(0, 1, 0), refArc:tangent(fwPt)):mRot() * coor.trans(refArc:pt(fwPt))
        newTopologySlots(pos.x, pos.y + 1, transf, 1)
    end
    
    if not info.octa[5] then
        local bwPt = refArc.inf - 0.5 * (refArc.sup - refArc.inf)
        local transf = quat.byVec(coor.xyz(0, -1, 0), refArc:tangent(bwPt)):mRot() * coor.trans(refArc:pt(bwPt))
        newTopologySlots(pos.x, pos.y - 1, transf, 5)
    end
end

local updateFn = function(result, transform, tag, slotId, addModelFn, params, closureParams)
        -- dump()(params.modules[slotId].info)
        local trackType = closureParams.trackType
        local catenary = closureParams.catenary
        
        local info = params.modules[slotId].info
        
        local zOffset = params.modules[slotId].metadata.height - params.lowestHeight
        
        local pos = {0, 0.1, 0.4, 0.5, 0.6, 0.9, 1}
        local e = pipe.new
            * {{2, 1}, {3, 2}, {4, 3}, {4, 5}, {5, 6}, {6, 7}}
            * pipe.rev()
            * pipe.map(function(idx)
                local inf = info.arcs.center.inf * (1 - pos[idx[1]]) + info.arcs.center.sup * pos[idx[1]]
                local sup = info.arcs.center.inf * (1 - pos[idx[2]]) + info.arcs.center.sup * pos[idx[2]]
                local length = (pos[idx[2]] - pos[idx[1]]) * info.length
                return {
                    {
                        info.arcs.center:pt(inf) + coor.xyz(0, 0, zOffset),
                        info.arcs.center:tangent(inf) * length
                    },
                    {
                        info.arcs.center:pt(sup) + coor.xyz(0, 0, zOffset),
                        info.arcs.center:tangent(sup) * length
                    }
                }
            end)
        
        -- if params.debug then
        --     local nodeCount = #func.mapFlatten(result.edgeLists, function(e) return e.edges end)
        --     for n, nodes in ipairs(e) do
        --         local text1 = tostring(nodeCount + n * 2 - 1)
        --         local text2 = tostring(nodeCount + n * 2)
        --         local addText = function(label, pos, fAlign, h)
        --             local nameModelsF, width = livetext(h or 2)(label)
        --             for _, m in ipairs(nameModelsF(function() return coor.trans(fAlign(width)) * coor.rotX(-0.5 * pi) * coor.trans(pos + coor.xyz(0, 0, 3)) end)) do
        --                 table.insert(result.models, m)
        --             end
        --         end
        --         addText(text1, nodes[1][1], function(w) return coor.xyz(-1.5 * w, 0, 0) end, 0.5)
        --         addText(text2, nodes[2][1], function(w) return coor.xyz(0.5 * w, 0, 0) end, 0.5)
        --     end
        -- end
        local edges = {
            type = "TRACK",
            alignTerrain = true,
            params = {
                type = trackType,
                catenary = catenary,
            },
            edges = e * pipe.flatten() * pipe.map(pipe.map(coor.vec2Tuple)),
            snapNodes = func.filter({(not info.octa[1]) and 1, (not info.octa[5]) and 11}, pipe.noop()),
            freeNodes = {},
            tag2nodes = {
                [tag] = func.seq(0, 11)
            },
            slot = slotId
        }
        
        insert(result.edgeLists, edges)
        params.edgeIndex[slotId] = #result.edgeLists
        if (info.octa[1] and params.modules[info.octa[1]].metadata.isTrack) then
            insert(result.invokeLater, function()
                local indexL = params.edgeIndex[slotId]
                local indexR = params.edgeIndex[info.octa[1]]
                local ptL = coor.tuple2Vec(result.edgeLists[indexL].edges[2][1])
                local ptR = coor.tuple2Vec(result.edgeLists[indexR].edges[12][1])
                local pt = ptL:avg(ptR):toTuple()
                result.edgeLists[indexL].edges[2][1] = pt
                result.edgeLists[indexR].edges[12][1] = pt
            end)
        end
        
        if info.trackGroup then
            local nodes = func.mapFlatten(result.edgeLists, function(e) return e.edges end)
            params.edgeGroup[slotId] = func.seq(#nodes - 12, #nodes - 1)
        end
        
        if params.debug then
            local text = tostring(info.id)
            local pos = string.format("(%d, %d)", info.pos.x, info.pos.y)
            
            local addText = function(label, pos, fAlign, h)
                local nameModelsF, width = livetext(h or 2)(label)
                for _, m in ipairs(nameModelsF(function() return coor.trans(fAlign(width)) * coor.rotX(-0.5 * pi) * quat.byVec(coor.xyz(0, 1, 0), info.gravity[2]):mRot() * coor.trans(pos + coor.xyz(0, 0, 3)) end)) do
                    insert(result.models, m)
                end
            end
            
            addText(text, info.gravity[1], function(w) return coor.xyz(-0.5 * w, 0, 0) end)
            addText(pos, info.gravity[1], function(w) return coor.xyz(-0.5 * w, 0, -2) end, 0.75)
        end

end

function data()
    return {
        preProcessAdd = preProcessAdd,
        preProcessRemove = preProcessRemove,
        slotSetup = slotSetup,
        updateFn = updateFn,
        preClassify = ust.preClassify,
        getModelsFn = function(params)
            return {}
        end
    }

end

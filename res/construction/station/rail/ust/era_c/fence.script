local ust = require "ust"
local coor = require "ust/coor"
local quat = require "ust/quaternion"
local insert = table.insert
-- local dump = require "luadump"

local math = math
local floor = math.floor
local abs = math.abs

local addSlot = function(params, result)
    for id, info in pairs(params.classedModules) do
        local module = params.modules[info.slotId]
        if (module.metadata and module.metadata.isPlatform) then
            local info = module.info
            local makeData = module.makeData
            local pos = info.pos
            
            local n = 2
            
            local ptsL, vecL = ust.basePts(info.arcs.left, n)
            local ptsR, vecR = ust.basePts(info.arcs.right, n)
            
            local refPtL = ptsL[2]
            local refVecL = vecL[2]
            
            local transfL =
                quat.byVec(coor.xyz(1, 0, 0), refVecL):mRot()
                * coor.trans(refPtL)
            
            insert(
                result.slots, {
                    id = makeData(24, 7),
                    transf = coor.scale(coor.xyz(5, 0.2, 1)) * transfL,
                    type = "ust_component_fence",
                    spacing = {0, 0, 0, 0}
                })
            
            
            local refPtR = ptsR[2]
            local refVecR = vecR[2]
            
            local transfR =
                quat.byVec(coor.xyz(1, 0, 0), refVecR):mRot()
                * coor.trans(refPtR)
            
            insert(
                result.slots, {
                    id = makeData(24, 3),
                    transf = coor.scale(coor.xyz(5, 0.2, 1)) * transfR,
                    type = "ust_component_fence",
                    spacing = {0, 0, 0, 0}
                })
            
            
            if not info.octa[1] then
                local refPt = ptsR[3]:avg(ptsL[3])
                local refVec = (ptsR[3] - ptsL[3]):normalized()

                local transf =
                    quat.byVec(coor.xyz(1, 0, 0), refVec):mRot()
                    * coor.trans(refPt)

                insert(
                    result.slots, {
                        id = makeData(24, 1),
                        transf = coor.scale(coor.xyz(2, 0.2, 1)) * transf,
                        type = "ust_component_fence",
                        spacing = {0, 0, 0, 0}
                    })
            end
            
            if not info.octa[5] then
                local refPt = ptsR[1]:avg(ptsL[1])
                local refVec = (ptsR[1] - ptsL[1]):normalized()

                local transf =
                    quat.byVec(coor.xyz(1, 0, 0), refVec):mRot()
                    * coor.trans(refPt)

                insert(
                    result.slots, {
                        id = makeData(24, 5),
                        transf = coor.scale(coor.xyz(2, 0.2, 1)) * transf,
                        type = "ust_component_fence",
                        spacing = {0, 0, 0, 0}
                    })
            end
        end
    end
end

function data()
    return {
        classify = ust.classifyComp,
        addSlot = addSlot
    }
end

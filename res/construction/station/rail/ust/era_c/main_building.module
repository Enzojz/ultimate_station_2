local func = require "ust/func"
local coor = require "ust/coor"
local pipe = require "ust/pipe"
local ust = require "ust"
local general = require "ust/general"
local quat = require "ust/quaternion"
local livetext = require "ust/livetext"
local line = require "ust/coorline"

local trainstationutil = require "modules/trainstationutil"
local constructionutil = require "constructionutil"

local dump = require "luadump"

local unpack = table.unpack
local insert = table.insert

local ma = math
local pi = ma.pi

--Begin Generated
local generatedData = {
    ["main"] = {
        models = {
            ["station/rail/era_c/station_3_main.mdl"] = {
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000},
            },
        },
    },
    ["clock"] = {
        models = {
            ["station/rail/asset/era_c_big_clock.mdl"] = {
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.01041, -28.19261, 10.29505, 1.00000},
                {-1.00000, -0.00000, 0.00000, 0.00000, 0.00000, -1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.01041, -5.62261, 7.29505, 1.00000},
            },
        },
    },
    ["assets"] = {
        models = {
            ["asset/roof/era_b_lamp_b_02.mdl"] = {
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 16.24430, -5.20000, 4.39750, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 8.76413, -5.20000, 4.39750, 1.00000},
                {-1.00000, -0.00000, 0.00000, 0.00000, 0.00000, -1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 8.76413, -32.00000, 3.63750, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 1.25469, -5.20000, 4.39750, 1.00000},
                {-1.00000, -0.00000, 0.00000, 0.00000, 0.00000, -1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 1.25469, -32.00000, 3.63750, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -6.25279, -5.20000, 4.39750, 1.00000},
                {-1.00000, -0.00000, 0.00000, 0.00000, 0.00000, -1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -6.25279, -32.00000, 3.63750, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -13.73960, -5.20000, 4.39750, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 13.73960, -5.20000, 4.39750, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 6.25943, -5.20000, 4.39750, 1.00000},
                {-1.00000, -0.00000, 0.00000, 0.00000, 0.00000, -1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 6.25943, -32.00000, 3.63750, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -1.25000, -5.20000, 4.39750, 1.00000},
                {-1.00000, -0.00000, 0.00000, 0.00000, 0.00000, -1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -1.25000, -32.00000, 3.63750, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -8.75749, -5.20000, 4.39750, 1.00000},
                {-1.00000, -0.00000, 0.00000, 0.00000, 0.00000, -1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -8.75749, -32.00000, 3.63750, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -16.24430, -5.20000, 4.39750, 1.00000},
            },
            ["station/rail/asset/era_c_single_chair.mdl"] = {
                {-0.00000, -1.00000, 0.00000, 0.00000, 1.00000, -0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 16.24430, -4.60000, 0.80000, 1.00000},
                {-0.00000, -1.00000, 0.00000, 0.00000, 1.00000, -0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -13.72513, -4.60000, 0.80000, 1.00000},
                {-0.00000, 1.00000, 0.00000, 0.00000, -1.00000, -0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -17.50000, -30.54000, 0.00000, 1.00000},
                {-0.00000, -1.00000, 0.00000, 0.00000, 1.00000, -0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 13.73960, -4.60000, 0.80000, 1.00000},
                {-0.00000, 1.00000, 0.00000, 0.00000, -1.00000, -0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 17.50000, -30.54000, 0.00000, 1.00000},
                {-0.00000, -1.00000, 0.00000, 0.00000, 1.00000, -0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -16.22982, -4.60000, 0.80000, 1.00000},
            },
            ["station/rail/asset/era_c_street_pillar.mdl"] = {
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -20.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -18.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -16.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -14.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -12.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -10.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -8.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -6.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -4.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -2.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 2.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 4.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 6.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 8.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 10.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 12.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 14.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 16.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 18.00000, -37.00000, 0.00000, 1.00000},
                {1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 20.00000, -37.00000, 0.00000, 1.00000},
            },
            ["station/rail/asset/era_c_trashcan.mdl"] = {
                {-0.00000, 1.00000, 0.00000, 0.00000, -1.00000, -0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 11.25000, -4.50000, 0.80000, 1.00000},
                {-1.00000, -0.00000, 0.00000, 0.00000, 0.00000, -1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 15.41500, -31.15000, 0.00000, 1.00000},
                {-0.00000, 1.00000, 0.00000, 0.00000, -1.00000, -0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -11.25000, -4.50000, 0.80000, 1.00000},
                {-1.00000, -0.00000, 0.00000, 0.00000, 0.00000, -1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -15.41500, -31.15000, 0.00000, 1.00000},
            },
        },
    },
}

local config = {
    extend = {21, -21, 0, -38, 4, 0},
    main = "ust/main_buildings/station_3_main.mdl",
    con_left = {"station/rail/era_c/station_3_main_con_l_1.mdl", "station/rail/era_c/station_3_main_con_l_2.mdl", "station/rail/era_c/station_3_main_con_l_3.mdl", },
    con_right = {"station/rail/era_c/station_3_main_con_r_1.mdl", "station/rail/era_c/station_3_main_con_r_2.mdl", "station/rail/era_c/station_3_main_con_r_3.mdl", },
    end_left = "station/rail/era_c/station_3_main_end_l.mdl",
    end_right = "station/rail/era_c/station_3_main_end_r.mdl",
    roof_side = "station/rail/era_c/station_3_roof_perron_side.mdl",
    roof_head = "station/rail/era_c/station_3_roof_perron_head.mdl",
    slotIdOffset = 1,
    translationY = 0,
}

local mdlList = {
    config.end_left,
    config.end_right,
    config.roof_side,
    -- config.roof_head,
    config.main
}

local connectors = {
    coor.xyz(0, -2.5, 0),
    coor.xyz(10, -2.5, 0),
    coor.xyz(20, -2.5, 0),
    coor.xyz(-10, -2.5, 0),
    coor.xyz(-20, -2.5, 0)
}

local fitModels = {
    surface = ust.fitModel(3.3, 5, -2, true, true),
    edge = ust.fitModel(0.85, 5, -2, true, true),
}

local fitMdl = {
    ["xe_ye_left"] = fitModels.edge,
    ["xe_ye_right"] = fitModels.edge,
    ["xe_yi_left"] = fitModels.edge,
    ["xe_yi_right"] = fitModels.edge,
    ["xi_ye_left"] = fitModels.edge,
    ["xi_ye_left_t"] = fitModels.edge,
    ["xi_ye_right"] = fitModels.edge,
    ["xi_ye_right_t"] = fitModels.edge,
    ["xi_yi_left"] = fitModels.edge,
    ["xi_yi_left_x"] = fitModels.edge,
    ["xi_yi_right"] = fitModels.edge,
    ["xi_yi_right_x"] = fitModels.edge,
    ["ye_centre"] = fitModels.surface,
    ["ye_centre_t"] = fitModels.surface,
    ["yi_centre"] = fitModels.surface,
}

local updateFn = function(result, transform, tag, slotId, addModelFn, params)
    local hRef = params.platformHeight
    local hVec = coor.xyz(0, 0, hRef - 0.8)
    local hTrans = coor.trans(hVec)
    local hTransP = coor.trans(coor.xyz(0, 0, hRef))
    
    local id = params.modules[slotId].info.id
    local data = params.modules[slotId].info.data
    local info = params.modules[params.classedModules[id].slotId].info
    
    -- Main building to platform faces
    local extra = params.extra[slotId]
    
    local arcs = extra.arcs
    local ptInf = extra.xInfo.inf.pt + extra.vecNormal * 5
    local ptSup = extra.xInfo.sup.pt + extra.vecNormal * 5
    
    local addBlock = function(mdl, pos)
        table.insert(result.models, general.newModel("ust/platform/era_c/" .. mdl .. "_tl.mdl", tag, hTransP * fitMdl[mdl](pos, true)));
        table.insert(result.models, general.newModel("ust/platform/era_c/" .. mdl .. "_br.mdl", tag, hTransP * fitMdl[mdl](pos, false)));
    end
    local addLastBlock = function(mdl, pos)
        table.insert(result.models, general.newModel("ust/platform/era_c/" .. mdl .. "_br.mdl", tag, coor.rotZ(pi) * hTransP * fitMdl[mdl](pos, true)));
        table.insert(result.models, general.newModel("ust/platform/era_c/" .. mdl .. "_tl.mdl", tag, coor.rotZ(pi) * hTransP * fitMdl[mdl](pos, false)));
    end
    
    local platformPts = {}
    for i, arc in ipairs(arcs) do
        local lRad = arc.sup - arc.inf
        if (i > 1 and i < #arcs) then
            table.insert(platformPts, func.map({0, 0.25, 0.5, 0.75}, function(rad) return arc:pt(rad * lRad + arc.inf) end))
        elseif (i == 1 and i < #arcs) then
            local xInfo = extra.xInfo.inf
            local pct = (xInfo.rad - arc.inf) / lRad
            local rads = func.filter({0, 0.25, 0.5, 0.75}, function(radPct) return radPct > pct end)
            table.insert(rads, 1, pct)
            table.insert(platformPts, func.map(rads, function(rad) return arc:pt(rad * lRad + arc.inf) end))
        elseif (i == #arcs and i > 1) then
            local xInfo = extra.xInfo.sup
            local pct = (xInfo.rad - arc.inf) / lRad
            local rads = func.filter({0, 0.25, 0.5, 0.75, 1}, function(radPct) return radPct < pct end)
            table.insert(rads, pct)
            table.insert(platformPts, func.map(rads, function(rad) return arc:pt(rad * lRad + arc.inf) end))
        else
            local pctInf = (extra.xInfo.inf.rad - arc.inf) / lRad
            local pctSup = (extra.xInfo.sup.rad - arc.inf) / lRad
            local rads = func.filter({0, 0.25, 0.5, 0.75, 1}, function(radPct) return radPct < pctSup and radPct > pctInf end)
            table.insert(rads, 1, pctInf)
            table.insert(rads, pctSup)
            table.insert(platformPts, func.map(rads, function(rad) return arc:pt(rad * lRad + arc.inf) end))
            break
        end
    end
    
    platformPts = func.flatten(platformPts)
    
    local vecTangent = (ptSup - ptInf) * (1 / (#platformPts - 1))
    local buildingPts = func.map(func.seq(1, #platformPts), function(n) return ptInf + vecTangent * (n - 1) end)
    
    local pts = (data < 5) and func.zip(func.interlace(platformPts), func.interlace(buildingPts)) or func.zip(func.interlace(buildingPts), func.interlace(platformPts))
    for _, ptg in ipairs(pts) do
        local buildingPts, platformPts = unpack(ptg)
        local size = {
            lt = buildingPts[2],
            lb = buildingPts[1],
            rt = platformPts[2],
            rb = platformPts[1]
        }
        addBlock("yi_centre", size);
    end
    
    -- Main building to platform Connection
    insert(result.invokeLater, function()
        local lanePts = pipe.new * params.extra[slotId].slotIds
            * pipe.map(function(slotId) return data > 5 and params.extra[slotId].leftLane or params.extra[slotId].rightLane end)
            * pipe.flatten()
            * pipe.filter(function(pt) return ((pt - ptSup):dot(vecTangent)) * ((pt - ptInf):dot(vecTangent)) < 0 end)
        
        for _, pt in ipairs(connectors) do
            local pt = pt .. (hTransP * transform)
            local closesetPt = lanePts
                * pipe.map(function(lpt) return {pt = lpt, distance = (lpt - pt):length2()} end)
                * pipe.min(function(lhs, rhs) return lhs.distance < rhs.distance end)
            local lpt = closesetPt.pt
            table.insert(result.models, ust.unitLane(lpt, pt, tag))
        end
    end)
    
    -- Models
    constructionutil.addModels(generatedData["clock"], result.models, hTrans * transform, tag)
    constructionutil.addModels(generatedData["assets"], result.models, hTrans * transform, tag)
    
    for _, mdl in ipairs(mdlList) do
        table.insert(result.models, general.newModel(mdl, tag, hTrans * transform));
    end
    
    -- Terrains
    local terrainAlignmentLists = pipe.new /
        {
            coor.xyz(config.extend[1], config.extend[4], 0.0) .. (hTrans * transform),
            coor.xyz(config.extend[1], config.extend[3], 0.0) .. (hTrans * transform),
            coor.xyz(config.extend[2], config.extend[3], 0.0) .. (hTrans * transform),
            coor.xyz(config.extend[2], config.extend[4], 0.0) .. (hTrans * transform),
        }
        / (pipe.new * platformPts + func.rev(buildingPts))
        * pipe.map(pipe.map(coor.vec2Tuple))
    
    table.insert(result.terrainAlignmentLists, {
        type = "EQUAL",
        faces = terrainAlignmentLists,
        optional = true
    })

end
function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        buildMode = "SINGLE",
        cost = {
            price = 0,
        },
        description = {
            name = _("MENU_MODULE_MAIN_BUILDING"),
            description = _("MENU_MODULE_MAIN_BUILDING_DESC"),
        },
        category = {
            categories = {"Building"},
        },
        type = "ust_component_main_20",
        order = {
            value = 260,
        },
        metadata = {
            scriptName = "construction/station/rail/ust/era_c/main_building",
            classify = "classify",
            typeName = "ust_component_main_20",
            isComponent = true,
            isBuilding = true,
            typeId = 23,
            width = 5,
            spacing = {20, 20, 38, 0}
        },
        
        updateFn = updateFn,
        
        getModelsFn = function(params)
            return {}
        end
    }

end

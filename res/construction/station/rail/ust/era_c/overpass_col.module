local func = require "ust/func"
local pipe = require "ust/pipe"
local coor = require "ust/coor"
local ust = require "ust"
local quat = require "ust/quaternion"

local insert = table.insert

local fitModels = {
    inter = ust.fitModel(2, 1, 7, true, true),
    overpass = ust.fitModel(1, 2.9, 7, true, true)
}

local interCoords = {
    coor.xyz(-1, -1.45, 0),
    coor.xyz(1, -1.45, 0),
    coor.xyz(1, 1.45, 0),
    coor.xyz(-1, 1.45, 0)
}

local updateFn = function(result, transform, tag, slotId, addModelFn, params, closureParams)
    local id = params.modules[slotId].info.id
    local moduleSlotId = params.classedModules[id].slotId
    local module = params.modules[moduleSlotId]
    local info = module.info
    local makeData = module.makeData
    
    local hPlatform = info.height
    
    local allOverpass = pipe.new * func.values(params.modules)
        * pipe.filter(function(m) return m.metadata.isOverpass end)
        * pipe.map(function(m)
            local id = m.info.id
            local pos = params.modules[params.classedModules[id].slotId].info.pos
            if pos.y == info.pos.y then
                return {
                    slotId = m.info.slotId,
                    x = pos.x
                }
            else
                return false
            end
        end)
        * pipe.filter(function(m) return m end)
        * pipe.sort(function(l, r) return l.x < r.x end)
        * pipe.map(function(m)
            local id = params.modules[m.slotId].info.id
            return {
                slotId = m.slotId,
                info = params.modules[params.classedModules[id].slotId].info,
            }
        end)
    
    
    local highest = allOverpass * pipe.map(function(m) return m.info.height end) * pipe.max()
    
    local nearest = allOverpass * pipe.map(function(m) return m.info.pos.x end) * pipe.min()
    local furthest = allOverpass * pipe.map(function(m) return m.info.pos.x end) * pipe.max()
    
    local highestRail = pipe.new * func.values(params.modules)
        * pipe.filter(function(m) return m.metadata.isTrack end)
        * pipe.map(function(m)
            local id = m.info.id
            local pos = params.modules[params.classedModules[id].slotId].info.pos
            if pos.y == info.pos.y and pos.x <= furthest and pos.x >= nearest then
                return m.info.comp[27] and m.info.height + 1.5 or m.info.height
            else
                return false
            end
        end)
        * pipe.filter(function(m) return m end)
        * function(ls) return #ls > 0 and math.max(table.unpack(ls)) or nil end 
    
    local hOverpass = highestRail and (highestRail + 6.5 > highest and highestRail + 6.5 or highest) or highest
    local tPlatform = coor.transZ(hPlatform)
    local tOverpass = coor.transZ(hOverpass)
    
    params.modules[slotId].info.height = hOverpass
    
    local centerPts, centerVecs = ust.basePts(info.arcs.center, 4)
    
    local centerTransfZ0 = (quat.byVec(coor.xyz(0, 1, 0), centerVecs[3]):mRot()) * coor.trans(centerPts[3])
    local centerTransf = tOverpass * centerTransfZ0
    
    local currentIndex = false
    for index, slot in ipairs(allOverpass) do
        if slot.slotId == slotId then
            currentIndex = index
            break
        end
    end
    
    if hOverpass - hPlatform < 0.5 then
        local leftPts = ust.basePts(info.arcs.left, 4)
        local rightPts = ust.basePts(info.arcs.right, 4)
        local leftLane = params.extra[moduleSlotId].leftLane
        local rightLane = params.extra[moduleSlotId].rightLane
        
        local rect = func.map(interCoords, function(pt) return pt .. coor.scaleX(info.width / 2) * tPlatform * centerTransfZ0 end)
        params.modules[slotId].info.rect = rect
        
        local isLeftEdge = not info.octa[7] or (params.modules[info.octa[7]].info.height < 7.5)
        local isRightEdge = not info.octa[3] or (params.modules[info.octa[3]].info.height < 7.5)
        local isBuilt = false
        if currentIndex and #allOverpass > 1 then
            if currentIndex ~= 1 and isLeftEdge then
                isBuilt = true
                local info = allOverpass[currentIndex - 1].info
                local prevSlotId = allOverpass[currentIndex - 1].slotId
                
                local open = {info.arcs.left:rad(rect[1]), info.arcs.left:rad(rect[4])}
                
                if not params.extra[moduleSlotId].open then
                    params.extra[moduleSlotId].open = {}
                end
                params.extra[moduleSlotId].open[7] = open
                
                if info.height ~= hPlatform then
                    insert(result.invokeLater, function()
                        local prevRect = params.modules[prevSlotId].info.rect
                        
                        local overpassCoords = {
                            lt = prevRect[3]:avg(rect[4]),
                            lb = prevRect[2]:avg(rect[1]),
                            rt = rect[4],
                            rb = rect[1]
                        }
                        
                        insert(result.models, ust.newModel("ust/stairs/era_c/stairs_overpass_tl.mdl", tag, fitModels.overpass(overpassCoords, true)))
                        insert(result.models, ust.newModel("ust/stairs/era_c/stairs_overpass_br.mdl", tag, fitModels.overpass(overpassCoords, false)))
                    end)
                    if module.metadata.isPlaceholder then
                        insert(result.models, ust.unitLane(leftPts[3] .. tPlatform, leftLane[3], tag, "ust/linking_lane.mdl"))
                    else
                        insert(result.models, ust.unitLane(leftPts[3] .. tPlatform, leftLane[3], tag))
                    end
                
                end
            end
            if currentIndex ~= #allOverpass and isRightEdge then
                isBuilt = true
                local info = allOverpass[currentIndex + 1].info
                local nextSlotId = allOverpass[currentIndex + 1].slotId
                
                local open = {info.arcs.right:rad(rect[2]), info.arcs.right:rad(rect[3])}
                
                if not params.extra[moduleSlotId].open then
                    params.extra[moduleSlotId].open = {}
                end
                params.extra[moduleSlotId].open[3] = open
                
                if info.height ~= hPlatform then
                    insert(result.invokeLater, function()
                        local nextRect = params.modules[nextSlotId].info.rect
                        
                        local overpassCoords = {
                            rt = nextRect[4]:avg(rect[3]),
                            rb = nextRect[1]:avg(rect[2]),
                            lt = rect[3],
                            lb = rect[2]
                        }
                        
                        insert(result.models, ust.newModel("ust/stairs/era_c/stairs_overpass_tl.mdl", tag, fitModels.overpass(overpassCoords, true)))
                        insert(result.models, ust.newModel("ust/stairs/era_c/stairs_overpass_br.mdl", tag, fitModels.overpass(overpassCoords, false)))
                    end)
                    if module.metadata.isPlaceholder then
                        insert(result.models, ust.unitLane(rightPts[3] .. tPlatform, rightLane[3], tag, "ust/linking_lane.mdl"))
                    else
                        insert(result.models, ust.unitLane(rightPts[3] .. tPlatform, rightLane[3], tag))
                    end
                end
            end
        end
        if not isBuilt then
            insert(result.models, ust.newModel("ust/stairs/era_c/stairs_col.mdl", tag, coor.scaleZ(3) * tPlatform * centerTransfZ0))
        end
    else
        local rect = func.map(interCoords, function(pt) return pt .. centerTransf end)
        params.modules[slotId].info.rect = rect
        
        insert(result.models, ust.newModel("ust/stairs/era_c/stairs_col.mdl", tag, coor.scaleZ(hOverpass - hPlatform - 0.4) * tPlatform * centerTransfZ0))
        if currentIndex and #allOverpass > 1 then
            if currentIndex ~= 1 then
                local prevSlotId = allOverpass[currentIndex - 1].slotId
                insert(result.invokeLater, function()
                    local prevRect = params.modules[prevSlotId].info.rect
                    
                    local overpassCoords = {
                        lt = prevRect[3]:avg(rect[4]),
                        lb = prevRect[2]:avg(rect[1]),
                        rt = rect[4],
                        rb = rect[1]
                    }
                    
                    insert(result.models, ust.newModel("ust/stairs/era_c/stairs_overpass_tl.mdl", tag, fitModels.overpass(overpassCoords, true)))
                    insert(result.models, ust.newModel("ust/stairs/era_c/stairs_overpass_br.mdl", tag, fitModels.overpass(overpassCoords, false)))
                end)
            end
            if currentIndex ~= #allOverpass then
                local nextSlotId = allOverpass[currentIndex + 1].slotId
                insert(result.invokeLater, function()
                    local nextRect = params.modules[nextSlotId].info.rect
                    
                    local overpassCoords = {
                        rt = nextRect[4]:avg(rect[3]),
                        rb = nextRect[1]:avg(rect[2]),
                        lt = rect[3],
                        lb = rect[2]
                    }
                    
                    insert(result.models, ust.newModel("ust/stairs/era_c/stairs_overpass_tl.mdl", tag, fitModels.overpass(overpassCoords, true)))
                    insert(result.models, ust.newModel("ust/stairs/era_c/stairs_overpass_br.mdl", tag, fitModels.overpass(overpassCoords, false)))
                end)
            end
        end
        
        if params.modules[info.octa[1]] then
            local info = params.modules[info.octa[1]].info
            local centerPts, centerVecs = ust.basePts(info.arcs.center, 4)
            local tPlatform = coor.transZ(info.height)
            for i = 2, 5 do
                local pt = centerPts[i]
                local vec = centerVecs[i]
                local centerTransfZ0 = (quat.byVec(coor.xyz(1, 0, 0), vec):mRot()) * coor.trans(pt) * tPlatform
                insert(
                    result.slots,
                    {
                        id = makeData(22, 10 + i),
                        transf = coor.transX(-1) * centerTransfZ0,
                        type = "ust_overpass_step",
                        spacing = {0, 0, 0, 0},
                        shape = 1
                    }
            )
            end
        end
        
        if params.modules[info.octa[5]] then
            local info = params.modules[info.octa[5]].info
            local centerPts, centerVecs = ust.basePts(info.arcs.center, 4)
            local tPlatform = coor.transZ(info.height)
            for i = 1, 4 do
                local pt = centerPts[i]
                local vec = centerVecs[i]
                local centerTransfZ0 = (quat.byVec(coor.xyz(-1, 0, 0), vec):mRot()) * coor.trans(pt) * tPlatform
                insert(
                    result.slots,
                    {
                        id = makeData(22, 50 + i),
                        transf = coor.transX(-1) * centerTransfZ0,
                        type = "ust_overpass_step",
                        spacing = {0, 0, 0, 0},
                        shape = 1
                    }
            )
            end
        end
        
        for _, i in ipairs({1, 2, 4, 5}) do
            local pt = centerPts[i]
            local vec = centerVecs[i]
            local centerTransfZ0 = (quat.byVec(coor.xyz(i > 3 and 1 or -1, 0, 0), vec):mRot()) * coor.trans(pt) * tPlatform
            insert(
                result.slots,
                {
                    id = makeData(22, 30 + (6 - i)),
                    transf = coor.transX(-1) * centerTransfZ0,
                    type = "ust_overpass_step",
                    spacing = {0, 0, 0, 0},
                    shape = 1
                }
        )
        end
        
        local stepIdPos = pipe.new * {32, 31, 12, 13, 14, 15}
            * pipe.map(function(i) return makeData(22, i) end)
            * pipe.filter(function(slotId) return params.modules[slotId] or false end)
        local stepIdNeg = pipe.new * {51, 52, 53, 54, 35, 34}
            * pipe.map(function(i) return makeData(22, i) end)
            * pipe.filter(function(slotId) return params.modules[slotId] or false end)
        
        if slotId == allOverpass[#allOverpass].slotId then
            insert(result.models, ust.newModel("ust/stairs/era_c/stairs_left_1.mdl", tag, centerTransf))
            if #stepIdNeg > 0 then
                insert(result.models, ust.newModel("ust/stairs/era_c/stairs_left_0.mdl", tag, centerTransf))
            else
                insert(result.models, ust.newModel("ust/stairs/era_c/stairs_right_2.mdl", tag, coor.flipX() * coor.flipY() * centerTransf))
            end
            if #stepIdPos > 0 then
                insert(result.models, ust.newModel("ust/stairs/era_c/stairs_right_0.mdl", tag, coor.flipX() * coor.flipY() * centerTransf))
            else
                insert(result.models, ust.newModel("ust/stairs/era_c/stairs_left_2.mdl", tag, centerTransf))
            end
        elseif slotId == allOverpass[1].slotId then
            insert(result.models, ust.newModel("ust/stairs/era_c/stairs_right_1.mdl", tag, centerTransf))
            if #stepIdNeg > 0 then
                insert(result.models, ust.newModel("ust/stairs/era_c/stairs_right_0.mdl", tag, centerTransf))
            else
                insert(result.models, ust.newModel("ust/stairs/era_c/stairs_left_2.mdl", tag, coor.flipX() * coor.flipY() * centerTransf))
            end
            if #stepIdPos > 0 then
                insert(result.models, ust.newModel("ust/stairs/era_c/stairs_left_0.mdl", tag, coor.flipX() * coor.flipY() * centerTransf))
            else
                insert(result.models, ust.newModel("ust/stairs/era_c/stairs_right_2.mdl", tag, centerTransf))
            end
        else
            insert(result.models, ust.newModel("ust/stairs/era_c/stairs_y_1.mdl", tag, centerTransf))
            if #stepIdNeg > 0 then
                insert(result.models, ust.newModel("ust/stairs/era_c/stairs_y_0.mdl", tag, centerTransf))
            else
                insert(result.models, ust.newModel("ust/stairs/era_c/stairs_y_2.mdl", tag, coor.flipX() * coor.flipY() * centerTransf))
            end
            if #stepIdPos > 0 then
                insert(result.models, ust.newModel("ust/stairs/era_c/stairs_y_0.mdl", tag, coor.flipX() * coor.flipY() * centerTransf))
            else
                insert(result.models, ust.newModel("ust/stairs/era_c/stairs_y_2.mdl", tag, centerTransf))
            end
        end
    
    end
end

local function getModelsFn(result, transform, tag, slotId, addModelFn, params)
    return {}
end

function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        buildMode = "SINGLE",
        cost = {
            price = 0,
        },
        description = {
            name = _("MENU_MODULE_PLATFORM_OVERPASS_COL"),
            description = _("MENU_MODULE_PLATFORM_OVERPASS_COL"),
        },
        category = {
            categories = {"ust_cat_comp"},
        },
        type = "ust_overpass",
        order = {
            value = 200,
        },
        metadata = {
            typeName = "ust_overpass",
            isComponent = true,
            isOverpass = true,
            typeId = 22,
            width = 5,
            scriptName = "construction/station/rail/ust/struct/overpass",
            classify = "classify",
            preProcessAdd = "preProcessAdd"
        },
        
        updateFn = updateFn,
        getModelsFn = getModelsFn
    }

end

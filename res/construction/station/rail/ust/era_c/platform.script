local func = require "ust/func"
local coor = require "ust/coor"
local ust = require "ust"

local insert = table.insert
local math = math
local abs = math.abs
local floor = math.floor

local preProcessAdd = function(modules, change, classedModules, info)
    local maxId = func.max(func.keys(classedModules))
    
    if (info.data == -1) then
        local id = info.id
        local slotId = classedModules[id].slotId
        modules[slotId].name = change.module.name
    else
        local pos = modules[classedModules[info.id].slotId].info.pos
        local dpos = ({
            [1] = coor.xyz(0, pos.y < 0 and -1 or 1, 0),
            [3] = coor.xyz(1, 0, 0),
            [5] = coor.xyz(0, pos.y < 0 and 1 or -1, 0),
            [7] = coor.xyz(-1, 0, 0)
        })[info.data]
        local newInfo = {
            id = maxId + 1,
            type = change.module.metadata.typeId,
            pos = pos + dpos,
            length = 20,
            width = 5
        }
        local slotId, dataIds = ust.slotIds(newInfo)
        modules[slotId] = change.module
        
        for m, slotIds in pairs(dataIds) do
            for _, slotId in ipairs(slotIds) do
                modules[slotId] = {
                    metadata = {isData = true},
                    name = string.format("station/rail/ust/%s.module", m),
                    updateScript = {
                        fileName = "",
                        params = {}
                    },
                    variant = 0
                }
            
            end
        end
    end
end

local slotSetup = function(params, result, slotId)
    local module = params.modules[slotId]
    local info = params.modules[slotId].info
    local makeData = params.modules[slotId].makeData
    local pos = info.pos
    local metadata = params.modules[slotId].metadata
    local transfPosC = info.transf
    
    insert(result.slots, {
        id = slotId,
        transf = module.info.transf,
        type = module.metadata.typeName,
        spacing = {0, 0, 0, 0}
    })
    
    if (info.id ~= 1) then
        insert(result.slots, {
            id = makeData(2, -2),
            transf = transfPosC,
            type = "ust_remove",
            spacing = {0, 0, 0, 0}
        })
    end
    
    -- SLot to replace itself
    insert(
        result.slots,
        {
            id = makeData(2, -1),
            transf = transfPosC,
            type = "ust_platform",
            spacing = {0, 0, 0, 0}
        }
    )
    ust.initSlotGrid(params, pos)
    local newTopologySlots = ust.newTopologySlots(params, makeData, pos)
    
    if not (info.octa[3]) then
        local transf = ust.getTranfs(info, 3, metadata.width)
        newTopologySlots(pos.x + 1, pos.y, transf, 3)
    end
    
    if not (info.octa[7]) then
        local transf = ust.getTranfs(info, 7, metadata.width)
        newTopologySlots(pos.x - 1, pos.y, transf, 7)
    end
    
    if not ((pos.y < 0 and info.octa[5]) or (pos.y > 0 and info.octa[1])) then
        local transf = ust.getTranfs(info, 1, metadata.width)
        newTopologySlots(pos.x, pos.y + 1, transf, 1)
    end
    
    if not ((pos.y < 0 and info.octa[1]) or (pos.y > 0 and info.octa[5])) then
        local transf = ust.getTranfs(info, 5, metadata.width)
        newTopologySlots(pos.x, pos.y - 1, transf, 5)
    end
end

local preProcessRemove = function(modules, change, classedModules, info)
    for _, slotId in pairs(classedModules[info.id].slot) do
        modules[slotId] = nil
    end
    modules[change.slotId] = nil
end

function data()
    return {
        preClassify = ust.preClassify,
        preProcessAdd = preProcessAdd,
        preProcessRemove = preProcessRemove,
        slotSetup = slotSetup
    }

end

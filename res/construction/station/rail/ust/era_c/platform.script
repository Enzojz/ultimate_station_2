local func = require "ust/func"
local coor = require "ust/coor"
local quat = require "ust/quaternion"
local ust = require "ust"

local arc = require "ust/coorarc"
local line = require "ust/coorline"

local insert = table.insert
local math = math
local abs = math.abs
local floor = math.floor
local pi = math.pi

local ustg = require "ust_gridization"

local dump = require "luadump"

local getTranfs = function(info, pos, width)
    local refArc = info.arcs.center
    if pos == 1 then
        local fwPt = refArc.sup + 0.5 * (refArc.sup - refArc.inf)
        return quat.byVec(coor.xyz(0, 1, 0), refArc:tangent(fwPt)):mRot() * coor.trans(refArc:pt(fwPt))
    elseif pos == 3 then
        local pt = 0.5 * (refArc.sup + refArc.inf)
        local transf = quat.byVec(coor.xyz(0, 1, 0), refArc:tangent(pt)):mRot() * coor.trans(refArc:pt(pt))
        return coor.trans(coor.xyz(width, 0, 0)) * transf
    elseif pos == 5 then
        local bwPt = refArc.inf - 0.5 * (refArc.sup - refArc.inf)
        return quat.byVec(coor.xyz(0, -1, 0), refArc:tangent(bwPt)):mRot() * coor.trans(refArc:pt(bwPt))
    elseif pos == 7 then
        local pt = 0.5 * (refArc.sup + refArc.inf)
        local transf = quat.byVec(coor.xyz(0, 1, 0), refArc:tangent(pt)):mRot() * coor.trans(refArc:pt(pt))
        return coor.trans(coor.xyz(-width, 0, 0)) * transf
    else
        local pt = 0.5 * (refArc.sup + refArc.inf)
        return quat.byVec(coor.xyz(0, 1, 0), refArc:tangent(pt)):mRot() * coor.trans(refArc:pt(pt))
    end
end

local preProcessAdd = function(modules, change, classedModules, info)
    local maxId = func.max(func.keys(classedModules))
    
    local grid = {}
    for id, info in pairs(classedModules) do
        local pos = modules[info.slotId].info.pos
        local x, y, z = pos.x, pos.y, pos.z
        if not grid[z] then grid[z] = {} end
        if not grid[z][x] then grid[z][x] = {} end
        grid[z][x][y] = info.slotId
    end
    
    
    if (info.data == -1) then
        local id = info.id
        local slotId = classedModules[id].slotId
        modules[slotId].name = change.module.name
    else
        local refPos = modules[classedModules[info.id].slotId].info.pos
        
        local pos = ({
            [1] = coor.xyz(0, 1, 0),
            [3] = coor.xyz(1, 0, 0),
            [5] = coor.xyz(0, -1, 0),
            [7] = coor.xyz(-1, 0, 0)
        })[info.data] + refPos
        
        
        local x, y, z = pos.x, pos.y, pos.z
        
        local octa = {
            [5] = grid[z][x] and grid[z][x][y - 1] or nil,
            [1] = grid[z][x] and grid[z][x][y + 1] or nil,
            [7] = grid[z][x - 1] and grid[z][x - 1][y] or nil,
            [3] = grid[z][x + 1] and grid[z][x + 1][y] or nil,
            [6] = grid[z][x - 1] and grid[z][x - 1][y - 1] or nil,
            [4] = grid[z][x + 1] and grid[z][x + 1][y - 1] or nil,
            [8] = grid[z][x - 1] and grid[z][x - 1][y + 1] or nil,
            [2] = grid[z][x + 1] and grid[z][x + 1][y + 1] or nil,
        }
        
        local function isTrack(pos)
            return octa[pos] and modules[octa[pos]].metadata.isTrack
        end
        
        local function isPlatform(pos)
            return octa[pos] and modules[octa[pos]].metadata.isPlatform
        end
        
        local function isEmpty(pos)
            return not octa[pos] and not modules[octa[pos]]
        end
        
        local ref = {}
        if isTrack(3) and isTrack(7) then
            ref = {left = true, right = true}
        elseif isTrack(7) and not isPlatform(3) then
            ref = {left = true}
        elseif isTrack(3) and not isPlatform(7) then
            ref = {right = true}
        
        elseif isPlatform(7) and isPlatform(3) then
            ref = {left = true, right = true}
        elseif isPlatform(7) then
            ref = {left = true}
        elseif isPlatform(3) then
            ref = {right = true}
        
        elseif isPlatform(1) and isPlatform(5) then
            ref = {prev = true}
        elseif isPlatform(1) then
            ref = {next = true}
        elseif isPlatform(5) then
            ref = {prev = true}
        
        elseif isEmpty(3) and isEmpty(7) and not isEmpty(1) and not isEmpty(5) then
            ref = {prev = true}
        elseif isEmpty(3) and isEmpty(7) and not isEmpty(5) then
            ref = {prev = true}
        elseif isEmpty(3) and isEmpty(7) and not isEmpty(1) then
            ref = {next = true}
        end
        
        local newInfo = {
            id = maxId + 1,
            type = change.module.metadata.typeId,
            pos = pos,
            length = 20,
            width = 5,
            ref = ref
        }
        local slotId, dataIds = ust.slotIds(newInfo)
        
        modules[slotId] = change.module
        
        for m, slotIds in pairs(dataIds) do
            for _, slotId in ipairs(slotIds) do
                modules[slotId] = {
                    metadata = {isData = true},
                    name = string.format("station/rail/ust/%s.module", m),
                    updateScript = {
                        fileName = "",
                        params = {}
                    },
                    variant = 0
                }
            
            end
        end
    end
end

local slotSetup = function(params, result, slotId)
    local module = params.modules[slotId]
    local info = params.modules[slotId].info
    local makeData = params.modules[slotId].makeData
    local pos = info.pos
    local metadata = params.modules[slotId].metadata
    local transfPosC = info.transf
    
    insert(result.slots, {
        id = slotId,
        transf = module.info.transf,
        type = module.metadata.typeName,
        spacing = {0, 0, 0, 0}
    })
    
    do
        local octaModules = {}
        for i = 1, 8 do
            octaModules[i] = info.octa[i] and params.modules[info.octa[i]] or false
        end
        if info.id ~= 1 and not (
            octaModules[1] and octaModules[1].info.ref.prev
            or octaModules[5] and octaModules[5].info.ref.next
            or octaModules[3] and octaModules[3].info.ref.left
            or octaModules[7] and octaModules[7].info.ref.right)
        then
            insert(result.slots, {
                id = makeData(2, -2),
                transf = transfPosC,
                type = "ust_remove",
                spacing = {0, 0, 0, 0}
            })
        end
    end
    
    -- SLot to replace itself
    insert(
        result.slots,
        {
            id = makeData(1, -1),
            transf = transfPosC,
            type = "ust_track",
            spacing = {0, 0, 0, 0}
        }
    )
    insert(
        result.slots,
        {
            id = makeData(2, -1),
            transf = transfPosC,
            type = "ust_platform",
            spacing = {0, 0, 0, 0}
        }
    )
    ust.initSlotGrid(params, pos)
    local newTopologySlots = ust.newTopologySlots(params, makeData, pos)
    
    if not (info.octa[3]) then
        local transf = getTranfs(info, 3, metadata.width)
        newTopologySlots(pos.x + 1, pos.y, transf, 3)
    end
    
    if not (info.octa[7]) then
        local transf = getTranfs(info, 7, metadata.width)
        newTopologySlots(pos.x - 1, pos.y, transf, 7)
    end
    
    if not info.octa[1] then
        local transf = getTranfs(info, 1, metadata.width)
        newTopologySlots(pos.x, pos.y + 1, transf, 1)
    end
    
    if not info.octa[5] then
        local transf = getTranfs(info, 5, metadata.width)
        newTopologySlots(pos.x, pos.y - 1, transf, 5)
    end
end

local preProcessRemove = function(modules, change, classedModules, info)
    for _, slotId in pairs(classedModules[info.id].slot) do
        modules[slotId] = nil
    end
    modules[change.slotId] = nil
end

---@alias grid integer[][][]
-- It's a long single-usage function so I seperate it
---@param arc arc
---@return fun(l: line, ptvec: coor3[])
local calculateLimit = function(arc)
        ---@param l line
        ---@param ptvec coor3[]
        ---@return number
        return function(l, ptvec)
            local pt = func.min(arc / l, function(lhs, rhs) return (lhs - ptvec[1]):length2() < (rhs - ptvec[1]):length2() end)
            return arc:rad(pt)
        end
end

---Recalculate the baseline for platforms
---@param x number
---@param y number
---@param z number
---@param data any
local platformArcs = function(x, y, z, data)
    local slotId = data.grid[z][x][y]
    local m = data.modules[slotId]
    local ref = m.info.ref or {}
    m.info.ref = ref
    
    local refModule = function(offset)
        local refModule = data.modules[data.grid[z][x + offset][y]]
        local refO = refModule.info.arcs.center.o
        local refRadius = refModule.info.radius + (data.xState.pos[x] - data.xState.pos[x + offset])
        return refModule,
            function() return arc.byOR(refO, refRadius - m.info.width * 0.5, refModule.info.arcs.center:limits()) end,
            function() return arc.byOR(refO, refRadius + m.info.width * 0.5, refModule.info.arcs.center:limits()) end
    end
    
    local calculate = function(arcL, arcR, refModule, refModule2)
        local supFar = function(ar)
            return m.info.octa[1] and ar:rad(data.modules[m.info.octa[1]].info.pts[1][1]) or ar:rad(data.yState.pos)
        end
        local infFar = function(ar, refModule)
            return m.info.refPos.y == 0
                and refModule.info.arcs.center.inf
                or (m.info.octa[5] and ar:rad(data.modules[m.info.octa[5]].info.pts[2][1]) or ar:rad(data.yState.pos))
        end
        local limit = function(limL, limR, p, fFar)
            if refModule2 and refModule.metadata.isTrack and refModule2.metadata.isTrack then
                local limit = refModule.info.pts[p][1]:avg(refModule2.info.pts[p][1])
                local vecLimL = (refModule.info.radius > 0 and (refModule.info.pts[p][1] - arcL.o) or (arcL.o - refModule.info.pts[p][1])):normalized()
                local vecLimR = (refModule2.info.radius > 0 and (refModule2.info.pts[p][1] - arcR.o) or (arcR.o - refModule2.info.pts[p][1])):normalized()
                local lim = line.byVecPt((vecLimL + vecLimR):normalized(), limit)
                return
                    calculateLimit(arcL)(lim, refModule.info.pts[p]),
                    calculateLimit(arcR)(lim, refModule2.info.pts[p]),
                    fFar(arcL, refModule), fFar(arcR, refModule2)
            elseif refModule.metadata.isTrack then
                local lim = refModule.info.limits[p]
                return
                    calculateLimit(arcL)(lim, refModule.info.pts[p]),
                    calculateLimit(arcR)(lim, refModule.info.pts[p]),
                    fFar(arcL, refModule), fFar(arcR, refModule)
            else
                return limL, limR,
                    fFar(arcL, refModule), fFar(arcR, refModule)
            end
        end
        if m.info.refPos.y < 0 then
            local infL, infR, supL, supR = limit(refModule.info.arcs.center.inf, (refModule2 or refModule).info.arcs.center.inf, 1, supFar)
            arcL = arcL:withLimits({inf = infL, sup = supL})
            arcR = arcR:withLimits({inf = infR, sup = supR})
        else
            local supL, supR, infL, infR = limit(refModule.info.arcs.center.sup, (refModule2 or refModule).info.arcs.center.sup, 2, infFar)
            arcL = arcL:withLimits({inf = infL, sup = supL})
            arcR = arcR:withLimits({inf = infR, sup = supR})
        end
        return arcL, arcR
    end
    
    local arcL, arcR
    local realigned = false
    if ref.left or ref.right then
        if ref.left and ref.right then
            local leftModule, fArL = refModule(-1)
            local rightModule, _, fArR = refModule(1)
            arcL = fArL()
            arcR = fArR()
            arcL, arcR = calculate(arcL, arcR, leftModule, rightModule)
        elseif ref.left then
            local leftModule, fArL, fArR = refModule(-1)
            arcL = fArL()
            arcR = fArR()
            arcL, arcR = calculate(arcL, arcR, leftModule)
        elseif ref.right then
            local rightModule, fArL, fArR = refModule(1)
            arcL = fArL()
            arcR = fArR()
            arcL, arcR = calculate(arcL, arcR, rightModule)
        end
        
        -- For continuity between segments
        if (m.info.octa[5] and data.modules[m.info.octa[5]].info.calculateTag) then
            local arcs = data.modules[m.info.octa[5]].info.arcs
            
            arcL = arcL:withLimits({
                sup = arcL:rad(arcL:pt(arcL.sup)),
                inf = arcL:rad(arcs.left:pt(arcs.left.sup))
            })
            
            arcR = arcR:withLimits({
                sup = arcR:rad(arcR:pt(arcR.sup)),
                inf = arcR:rad(arcs.right:pt(arcs.right.sup))
            })
        end
        
        if (m.info.octa[1] and data.modules[m.info.octa[1]].info.calculateTag) then
            local arcs = data.modules[m.info.octa[1]].info.arcs
            arcL = arcL:withLimits({
                inf = arcL:rad(arcL:pt(arcL.inf)),
                sup = arcL:rad(arcs.left:pt(arcs.left.inf))
            })
            
            arcR = arcR:withLimits({
                inf = arcR:rad(arcR:pt(arcR.inf)),
                sup = arcR:rad(arcs.right:pt(arcs.right.inf))
            })
        end
        realigned = true
    elseif ref.prev then
        local arcs = data.modules[m.info.octa[5]].info.arcs
        
        arcL = arc.byOR(arcs.left.o, arcs.left.r, arcs.left:limits())
        arcR = arc.byOR(arcs.right.o, arcs.right.r, arcs.right:limits())
        
        arcL = arcL:withLimits({
            inf = arcL.sup,
            sup = arcL.sup + arcL.sup - arcL.inf
        })
        
        arcR = arcR:withLimits({
            inf = arcR.sup,
            sup = arcR.sup - arcR.inf + arcR.sup
        })
    
        realigned = true
    elseif ref.next then
        local arcs = data.modules[m.info.octa[1]].info.arcs
        
        arcL = arc.byOR(arcs.left.o, arcs.left.r, arcs.left:limits())
        arcR = arc.byOR(arcs.right.o, arcs.right.r, arcs.right:limits())
        
        arcL = arcL:withLimits({
            sup = arcL.inf,
            inf = arcL.inf + arcL.inf - arcL.sup
        })
        
        arcR = arcR:withLimits({
            sup = arcR.inf,
            inf = arcR.inf + arcR.inf - arcR.sup
        })

        realigned = true
    end
    
    local pts = {
        arcL:pt(arcL.inf):avg(arcR:pt(arcR.inf)),
        nil,
        arcL:pt(arcL.sup):avg(arcR:pt(arcR.sup))
    }
    pts[2] = arcL:ptByPt(pts[1]:avg(pts[3])):avg(arcR:ptByPt(pts[1]:avg(pts[3])))
    
    -- Recalculte central arc
    if realigned then
        local midPts = {
            pts[1]:avg(pts[2]),
            pts[3]:avg(pts[2])
        }
        
        local lines = {
            line.pend(line.byPtPt(pts[1], pts[2]), midPts[1]),
            line.pend(line.byPtPt(pts[3], pts[2]), midPts[2]),
        }
        
        local o = lines[1] - lines[2]
        if not o then
            local halfChordLength2 = (pts[3] - pts[1]):length2() * 0.25
            local normalLength = math.sqrt(10e8 * 10e8 - halfChordLength2)
            local midPt = pts[1]:avg(pts[3])
            o = midPt + ((pts[3] - pts[1]):normalized() .. coor.rotZ(0.5 * pi)) * normalLength
            r = 10e8
        end
        
        o = o:withZ(0)
        
        local vecInf = pts[1] - o
        local vecSup = pts[3] - o
        
        local r = vecInf:length()
        if r > 10e8 then
            local halfChordLength2 = (pts[3] - pts[1]):length2() * 0.25
            local normalLength = math.sqrt(10e8 * 10e8 - halfChordLength2)
            o = pts[1]:avg(pts[3]) + (o - pts[2]):normalized() * normalLength
            vecInf = pts[1] - o
            vecSup = pts[3] - o
            r = 10e8
        end
        local ar = arc.byOR(o, r)
        
        local inf = ar:rad(pts[1])
        
        local length = math.asin(vecInf:cross(vecSup).z / (r * r)) * r
        local sup = inf + length / r
        
        ar = ar:withLimits({
            sup = sup,
            inf = inf
        })

        m.info.radius = (length > 0 and 1 or -1) * r
        m.info.length = math.abs(length)
        
        m.info.arcs = {
            left = arcL,
            right = arcR,
            center = ar
        }
    end

    m.info.pts = ustg.refArc2Pts(m.info.arcs)
    m.info.calculateTag = true;
end

local function gridization(x, y, z, data)
    local slotId = data.grid[z][x][y]
    ustg.calculateRaidus(x, y, z, data)
    ustg.genericArcs(x, y, z, data)
    
    coroutine.yield()
    -- Platform on second loop
    platformArcs(x, y, z, data)
    
    local refArc = data.modules[slotId].info.arcs
    
    local gravity = {
        refArc.center:pt((refArc.center.inf + refArc.center.sup) * 0.5),
        refArc.center:tangent((refArc.center.inf + refArc.center.sup) * 0.5)
    }
    
    data.modules[slotId].info.transf =
        quat.byVec(coor.xyz(0, 1, 0), gravity[2]):mRot() *
        coor.trans(gravity[1])
    
    data.modules[slotId].info.gravity = gravity
end

function data()
    return {
        preClassify = ust.preClassify,
        preProcessAdd = preProcessAdd,
        preProcessRemove = preProcessRemove,
        slotSetup = slotSetup,
        gridization = gridization
    }

end

local func = require "ust/func"
local coor = require "ust/coor"
local pipe = require "ust/pipe"
local ust = require "ust"
local general = require "ust/general"
local quat = require "ust/quaternion"
local livetext = require "ust/livetext"

local trainstationutil = require "modules/trainstationutil"
local constructionutil = require "constructionutil"

local unpack = table.unpack
local insert = table.insert

local ma = math
local pi = ma.pi

local updateFn = function(result, transform, tag, slotId, addModelFn, params)
    local hRef = params.platformHeight
    local hVec = coor.xyz(0, 0, hRef)
    local hTrans = coor.trans(hVec)
    
    local id = params.modules[slotId].info.id
    local data = params.modules[slotId].info.data
    local info = params.modules[params.classedModules[id].slotId].info
    
    -- if n == 0 then n = 1 end
    
    if data == 3 or data == 7 then 
        local n = 10
        local pts, vec = ust.basePts(data == 3 and info.arcs.right or info.arcs.left, n)
        
        for i = 1, n do
            local refPt = pts[i]:avg(pts[i + 1])
            local refVec = pts[i] - pts[i + 1]
            local lengthScale = refVec:length() / 2
            local transf = hTrans
                * coor.scaleX(lengthScale)
                * quat.byVec(coor.xyz(data == 7 and 1 or -1, 0, 0), refVec):mRot()
                * coor.trans(refPt)
            
            table.insert(result.models, general.newModel("ust/fences/green_3.mdl", tag, transf));
        end
        
        for i = 1, n + 1 do
            local refPt = pts[i]
            local refVec = vec[i]
            local transf = hTrans
                * quat.byVec(coor.xyz(data == 7 and 1 or -1, 0, 0), refVec):mRot()
                * coor.trans(refPt)
            
            table.insert(result.models, general.newModel("ust/fences/green_pole_3.mdl", tag, transf));
        end
    elseif data == 1 or data == 5 then
        local rank = data == 5 and 1 or 3
        local n = 2
        local ptsL = ust.basePts(info.arcs.left, n)
        local ptsR = ust.basePts(info.arcs.right, n)

        local vec = (ptsR[rank] - ptsL[rank]):normalized()

        for i = 1, 2 do
            local refPt = ptsL[rank] + (ptsR[rank] - ptsL[rank]) * (i * 2 - 1) / 4 
            local transf = hTrans
                * coor.scaleX(1.25)
                * quat.byVec(coor.xyz(data == 1 and -1 or 1, 0, 0), vec):mRot()
                * coor.trans(refPt)
            
            table.insert(result.models, general.newModel("ust/fences/green_3.mdl", tag, transf));
        end
        
        for i = 1, 3 do
            local refPt = ptsL[rank] + (ptsR[rank] - ptsL[rank]) * (i - 1) / 2
            local transf = hTrans
                * quat.byVec(coor.xyz(data == 1 and -1 or 1, 0, 0), vec):mRot()
                * coor.trans(refPt)
            
            table.insert(result.models, general.newModel("ust/fences/green_pole_3.mdl", tag, transf));
        end
    end

end

function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        buildMode = "SINGLE",
        cost = {
            price = 0,
        },
        description = {
            name = _("MENU_MODULE_FENCE_GREEN"),
            description = _("MENU_MODULE_FENCE_GREEN_DESC"),
        },
        category = {
            categories = {"Building"},
        },
        type = "ust_component_fence",
        order = {
            value = 260,
        },
        metadata = {
            scriptName = "construction/station/rail/ust/era_c/fence",
            classify = "classify",
            typeName = "ust_component_fence",
            isComponent = true,
            isFence = true,
            typeId = 24,
            width = 5
        },
        
        updateFn = updateFn,
        
        getModelsFn = function(params)
            return {}
        end
    }

end

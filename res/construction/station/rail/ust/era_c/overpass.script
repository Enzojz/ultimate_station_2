local ust = require "ust"
local coor = require "ust/coor"
local quat = require "ust/quaternion"

local insert = table.insert

local addSlot = function(params, result)
    for id, info in pairs(params.classedModules) do
        local module = params.modules[info.slotId]
        if (module.metadata and (module.metadata.isPlatform or module.metadata.isPlaceholder)) then
            local info = module.info
            local makeData = module.makeData

            local extraHeight = info.extraHeight or 0
            local hPlatform = module.metadata.isPlatform and params.platformHeight + extraHeight or 0
            local tPlatform = coor.transZ(hPlatform)
            
            local centerPts, centerVecs = ust.basePts(info.arcs.center, 2)
            
            local centerPt = centerPts[2]
            local centerVec = centerVecs[2]
            
            local centerTransfZ0 = (quat.byVec(coor.xyz(0, 1, 0), centerVec):mRot()) * coor.trans(centerPt)
            local centerTransf = tPlatform * centerTransfZ0
            
            insert(result.slots, {
                id = makeData(24, 0),
                transf = centerTransf,
                type = "ust_overpass",
                spacing = {0, 0, 0, 0},
            })
        end
    end

end

local preProcessAdd = function(modules, change, classedModules, info)
    modules[change.slotId] = change.module
end

function data()
    return {
        classify = ust.classifyComp,
        addSlot = addSlot,
        preProcessAdd = preProcessAdd
    }

end

local func = require "ust/func"
local coor = require "ust/coor"
local pipe = require "ust/pipe"
local ust = require "ust"
local general = require "ust/general"
local quat = require "ust/quaternion"
local livetext = require "ust/livetext"
-- local dump = require "luadump"
local unpack = table.unpack
local insert = table.insert

local ma = math
local pi = ma.pi

local updateFn = function(result, transform, tag, slotId, addModelFn, params)
    local info = params.modules[slotId].info
    local makeData = params.modules[slotId].makeData
    
    local hRef = params.platformHeight
    local hVec = coor.xyz(0, 0, hRef)
    local hTrans = coor.trans(hVec)
    
    local pos = info.pos
    local metadata = params.modules[slotId].metadata
    local arcs = info.arcs
    local refArc = arcs.center
    local transfPosC = info.transf
    
    if (info.id ~= 1) then
        insert(result.slots, {
            id = makeData(99, 0),
            transf = transfPosC,
            type = "ust_remove",
            spacing = {0, 0, 0, 0}
        })
    end
    
    ust.initSlotGrid(params, pos)
    local newTopologySlots = ust.newTopologySlots(params, makeData, pos)
    
    if not (info.octa[3]) then
        local transf = coor.trans(coor.xyz(metadata.width, 0, 0)) * transfPosC
        newTopologySlots(pos.x + 1, pos.y, transf, 3)
    end
    
    if not (info.octa[7]) then
        local transf = coor.trans(coor.xyz(-metadata.width, 0, 0)) * transfPosC
        newTopologySlots(pos.x - 1, pos.y, transf, 7)
    end
    
    if not ((pos.y < 0 and info.octa[5]) or (pos.y > 0 and info.octa[1])) then
        local fwPt = refArc.sup + 0.5 * (refArc.sup - refArc.inf)
        local transf = quat.byVec(coor.xyz(0, 1, 0), refArc:tangent(fwPt)):mRot() * coor.trans(refArc:pt(fwPt))
        newTopologySlots(pos.x, pos.y + 1, transf, 1)
    end
    
    if not ((pos.y < 0 and info.octa[1]) or (pos.y > 0 and info.octa[5])) then
        local bwPt = refArc.inf - 0.5 * (refArc.sup - refArc.inf)
        local transf = quat.byVec(coor.xyz(0, -1, 0), refArc:tangent(bwPt)):mRot() * coor.trans(refArc:pt(bwPt))
        newTopologySlots(pos.x, pos.y - 1, transf, 5)
    end
    
    if params.debug then
        local text = tostring(info.id)
        local pos = string.format("(%d, %d)", info.pos.x, info.pos.y)
        
        local addText = function(label, pos, fAlign, h)
            local nameModelsF, width = livetext(h or 2)(label)
            for _, m in ipairs(nameModelsF(function() return coor.trans(fAlign(width)) * coor.rotX(-0.5 * pi) * quat.byVec(coor.xyz(0, info.pos.y < 0 and -1 or 1, 0), info.gravity[2]):mRot() * coor.trans(pos + coor.xyz(0, 0, 3)) end)) do
                table.insert(result.models, m)
            end
        end
        
        addText(text, info.gravity[1], function(w) return coor.xyz(-0.5 * w, 0, 0) end)
        addText(pos, info.gravity[1], function(w) return coor.xyz(-0.5 * w, 0, -2) end, 0.75)
    end

end
function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        buildMode = "SINGLE",
        cost = {
            price = 0,
        },
        description = {
            name = _("MENU_MODULE_PLATFORM"),
            description = _("MENU_MODULE_PLATFORM_DESC"),
        },
        category = {
            categories = {"platform"},
        },
        type = "ust_placeholder",
        order = {
            value = 260,
        },
        metadata = {
			typeName = "ust_placeholder",
            isPlaceholder = true,
            typeId = 3,
            width = 5
        },
        
        updateFn = updateFn,
        
        getModelsFn = function(params)
            return {}
        end
    }

end

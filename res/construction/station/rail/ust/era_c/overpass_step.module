local config = {
    color = "red"
}

local func = require "ust/func"
local pipe = require "ust/pipe"
local coor = require "ust/coor"
local general = require "ust/general"
local ust = require "ust"
local quat = require "ust/quaternion"


local insert = table.insert

local fitModels = {
    inter = ust.fitModel(2, 1, 7, true, true),
    overpass = ust.fitModel(1, 2.9, 7, true, true)
}

local interCoords = {
    coor.xyz(-1, -1.45, 0),
    coor.xyz(1, -1.45, 0),
    coor.xyz(1, 1.45, 0),
    coor.xyz(-1, 1.45, 0),
    coor.xyz(0, 1.45, 0),
    coor.xyz(0, -1.45, 0),
}

local updateFn = function(result, transform, tag, slotId, addModelFn, params, closureParams)
    local id = params.modules[slotId].info.id
    local pos = params.modules[slotId].info.data
    local module = params.modules[params.classedModules[id].slotId]
    local info = module.info
    
    local hPlatform = info.height
    local hOverpass = 8
    local tPlatform = coor.transZ(hPlatform)
    local tOverpass = coor.transZ(hOverpass)
    
    local centerPts, centerVecs = ust.basePts(info.arcs.center, 4)
    
    local centerPt = centerPts[3]
    local centerVec = centerVecs[3]
    
    local centerTransf = tOverpass * (quat.byVec(coor.xyz(0, 1, 0), centerVec):mRot()) * coor.trans(centerPt)
    
    local interPts = func.map(interCoords, function(pt) return pt .. centerTransf end)
    
    local function ref()
        if pos > 50 then
            local relPos = pos % 10
            local info = params.modules[info.octa[5]].info
            local centerPts, centerVecs = ust.basePts(info.arcs.center, 4)
            return centerPts[relPos],
            centerVecs[relPos]
        elseif pos < 30 then
            local relPos = pos % 10
            local info = params.modules[info.octa[1]].info
            local centerPts, centerVecs = ust.basePts(info.arcs.center, 4)
            return centerPts[relPos],
            -centerVecs[relPos]
        else
            local relPos = 6 - pos % 10
            return centerPts[relPos],
            relPos > 3 and -centerVecs[relPos] or centerVecs[relPos]
        end
    end
    
    local baseRef, baseVec = ref()

    if baseRef and baseVec then
        local existsBase = hOverpass - hPlatform > 4
        local baseLength = existsBase and 6 or 0
        local ncomp = existsBase and math.ceil((hOverpass - 4 - hPlatform) / 0.2) or math.ceil((hOverpass - hPlatform) / 0.2)
        local hBase = existsBase and hOverpass - ncomp * 0.2 or hPlatform
        
        local baseVecTransf = quat.byVec(coor.xyz(0, 1, 0), baseVec):mRot()
        if existsBase then
            local tBase = coor.transZ(hBase - 4)
            insert(result.models, general.newModel("ust/stairs/era_c/stairs_base.mdl", tag, tBase * baseVecTransf * coor.trans(baseRef)))
        end
        
        for i = 0, ncomp - 1 do
            local h = hBase + 0.2 * i
            local pos = baseRef + baseVec * (baseLength + i * 0.25)
            local transf = baseVecTransf * coor.trans(pos) * coor.transZ(h)
            insert(result.models, general.newModel("ust/stairs/era_c/stairs_20.mdl", tag, transf))
        end
        
        local rectBase = {
            coor.xyz(1, baseLength + ncomp * 0.25, 0),
            coor.xyz(-1, baseLength + ncomp * 0.25, 0),
        }
        
        local baseTransf = baseVecTransf * coor.trans(baseRef) * coor.transZ(hBase + 0.2 * ncomp)
        local basePts = func.map(rectBase, function(pt) return pt .. baseTransf end)
        
        local interCoords = pos < 33 and {
            lt = basePts[1],
            rt = basePts[2],
            lb = interPts[4],
            rb = interPts[3]
        } or {
            lt = interPts[1],
            rt = interPts[2],
            lb = basePts[2],
            rb = basePts[1],
        }
        
        local stairsPts = func.map({
            coor.xyz(0, baseLength + ncomp * 0.25, 0),
            coor.xyz(0, baseLength, -ncomp * 0.2),
            coor.xyz(0, 5, -ncomp * 0.2),
        },
        function(pt) return pt .. baseTransf end)
        
        if module.metadata.isPlatform then
            insert(result.models, ust.unitLane(stairsPts[1], stairsPts[2], tag))
            
            if existsBase then
                insert(result.models, ust.unitLane(stairsPts[2], stairsPts[3], tag))
                insert(result.models, ust.unitLane(stairsPts[3], baseRef .. tPlatform, tag))
            end
        else
            if existsBase then
                insert(result.models, ust.unitLane(stairsPts[1], stairsPts[2], tag))
                insert(result.models, ust.unitLane(stairsPts[2], stairsPts[3], tag))
                insert(result.models, ust.unitLane(stairsPts[3], baseRef .. tPlatform, tag, "ust/linking_lane.mdl"))
            else
                insert(result.models, ust.unitLane(stairsPts[1], stairsPts[2], tag, "ust/linking_lane.mdl"))
            end
        end
        
        insert(result.models, ust.unitLane(interCoords.lt:avg(interCoords.rt), interCoords.lb:avg(interCoords.rb), tag))
        insert(result.models, general.newModel("ust/stairs/era_c/stairs_inter_tl.mdl", tag, fitModels.inter(interCoords, true)))
        insert(result.models, general.newModel("ust/stairs/era_c/stairs_inter_br.mdl", tag, fitModels.inter(interCoords, false)))
        
        if pos == 13 or pos == 14 then
            local pt = (baseRef - centerPt) * 0.4 + centerPt
            local vec = baseRef - centerPt
            local vecTransf = quat.byVec(coor.xyz(0, 1, 0), vec):mRot()
            insert(result.models, general.newModel("ust/stairs/era_c/stairs_col.mdl", tag, coor.scaleZ(7.6 - hPlatform) * tPlatform * vecTransf * coor.trans(pt)))
        end
        if pos == 52 or pos == 53 then
            local pt = (baseRef - centerPt) * 0.4 + centerPt
            local vec = baseRef - centerPt
            local vecTransf = quat.byVec(coor.xyz(0, 1, 0), vec):mRot()
            insert(result.models, general.newModel("ust/stairs/era_c/stairs_col.mdl", tag, coor.scaleZ(7.6 - hPlatform) * tPlatform * vecTransf * coor.trans(pt)))
        end
    end
end

local function getModelsFn(result, transform, tag, slotId, addModelFn, params)
    return {}
end

function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        buildMode = "SINGLE",
        cost = {
            price = 0,
        },
        description = {
            name = _("MENU_MODULE_PLATFORM_OVERPASS_STEP"),
            description = _("MENU_MODULE_PLATFORM_OVERPASS_STEP"),
        },
        category = {
            categories = {"ust_cat_comp"},
        },
        type = "ust_overpass_step",
        order = {
            value = 260,
        },
        metadata = {
            typeName = "ust_overpass_step",
            isComponent = true,
            typeId = 23,
            width = 5,
            scriptName = "construction/station/rail/ust/struct/overpass",
            classify = "classify",
            preProcessAdd = "preProcessAdd"
        },
        
        updateFn = updateFn,
        getModelsFn = getModelsFn
    }

end

local coor = require "ust/coor"
local quat = require "ust/quaternion"
local general = require "ust/general"
local ust = require "ust"

local insert = table.insert

local fitModels = {
    edge = ust.fitModel(0.27, 5, 7, true, true),
    block = ust.fitModel(1.98, 5, 7, true, true),
    center = ust.fitModel(0.5, 5, 7, true, true),
}

local roofFitModels = {
    fitModels.edge,
    fitModels.block,
    fitModels.center,
    fitModels.block,
    fitModels.edge
}

local updateFn = function(result, transform, tag, slotId, addModelFn, params)    
    local id = params.modules[slotId].info.id
    local module = params.modules[params.classedModules[id].slotId]
    local info = module.info

    local hVec = coor.xyz(0, 0, info.height)
    local hTrans = coor.trans(hVec)
    
    local id = params.modules[slotId].info.id
    local info = params.modules[params.classedModules[id].slotId].info
    local makeData = params.modules[params.classedModules[id].slotId].makeData
    
    local n = 4
    local leftPts = ust.basePts(info.arcs.left, n)
    local rightPts = ust.basePts(info.arcs.right, n)
    local centerPts = ust.basePts(info.arcs.center, n)
    
    local isFirst = not (info.octa[1] and params.modules[info.octa[1]].info.comp[28])
    local isLast = not (info.octa[5] and params.modules[info.octa[5]].info.comp[28])
    
    local edges = {
        {}, {}, {}, {}, {}, {}, {}
    }
    
    for i = 1, n + 1 do
        local vec = (leftPts[i] - rightPts[i]):normalized()
        edges[1][i] = leftPts[i]
        edges[6][i] = rightPts[i]
        
        edges[2][i] = leftPts[i] - vec * 0.27
        edges[5][i] = rightPts[i] + vec * 0.27
        
        edges[7][i] = centerPts[i]
        edges[3][i] = centerPts[i] + vec * 0.25
        edges[4][i] = centerPts[i] - vec * 0.25
        
        for k = 1, 7 do
            edges[k][i] = edges[k][i] + hVec
        end
    end
    
    local refVec = (leftPts[3] - rightPts[3]):normalized()
    local refPt = centerPts[3]
    
    local trans = hTrans
        * quat.byVec(coor.xyz(0, 1, 0), refVec):mRot()
        * coor.trans(refPt)
    
    for i = 1, n do
        for k = 1, 5 do
            local coords = {
                lt = edges[k][i + 1],
                lb = edges[k][i],
                rt = edges[k + 1][i + 1],
                rb = edges[k + 1][i]
            }
            
            if isFirst and i == n then
                insert(result.models, general.newModel(string.format("ust/platform/era_c/roof_end_%d_br.mdl", 6 - k), tag, coor.flipX() * coor.flipY() * roofFitModels[k](coords, true)));
                insert(result.models, general.newModel(string.format("ust/platform/era_c/roof_end_%d_tl.mdl", 6 - k), tag, coor.flipX() * coor.flipY() * roofFitModels[k](coords, false)));
            elseif isLast and i == 1 then
                insert(result.models, general.newModel(string.format("ust/platform/era_c/roof_end_%d_tl.mdl", k), tag, roofFitModels[k](coords, true)));
                insert(result.models, general.newModel(string.format("ust/platform/era_c/roof_end_%d_br.mdl", k), tag, roofFitModels[k](coords, false)));
            else
                insert(result.models, general.newModel(string.format("ust/platform/era_c/roof_%d_tl.mdl", k), tag, roofFitModels[k](coords, true)));
                insert(result.models, general.newModel(string.format("ust/platform/era_c/roof_%d_br.mdl", k), tag, roofFitModels[k](coords, false)));
            end
        end
        
        if i % 2 == 1 then
            local vec = (edges[1][i + 1] - edges[6][i + 1]):normalized()
            local pos = edges[7][i + 1]
            
            local transf = quat.byVec(coor.xyz(1, 0, 0), vec):mRot() * coor.trans(pos)
            insert(result.models, general.newModel("ust/platform/era_c/pole.mdl", tag, transf));
            insert(result.models, general.newModel("ust/platform/era_c/arm.mdl", tag, transf));
        end
    end
    
    -- SLot to replace itself
    insert(
        result.slots,
        {
            id = makeData(28, -1),
            transf = trans,
            type = "ust_roof",
            spacing = {0, 0, 0, 0}
        }
)
end
function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        buildMode = "SINGLE",
        cost = {
            price = 0,
        },
        description = {
            name = _("MENU_MODULE_PLATFORM_ROOF"),
            description = _("MENU_MODULE_PLATFORM_ROOF_DESC"),
            icon = "ui/construction/station/rail/modular_station/platform_passenger_roof_era_c.tga"
        },
        category = {
            categories = {"ust_cat_comp"},
        },
        type = "ust_roof",
        order = {
            value = 2,
        },
        metadata = {
            scriptName = "construction/station/rail/ust/struct/roof",
            classify = "classify",
            typeName = "ust_roof",
            isRoof = true,
            isComponent = true,
            typeId = 28,
            width = 5
        },
        
        updateFn = updateFn,
        
        getModelsFn = function(params)
            return {}
        end
    }

end

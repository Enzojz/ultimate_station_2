local func = require "ust/func"
local coor = require "ust/coor"
local pipe = require "ust/pipe"
local ust = require "ust"
local general = require "ust/general"

local insert = table.insert

local config = {
    extend = {5, -5, 0, -5, 0, 0},
}

local connectors = {
    coor.xyz(0, 0, 0),
}

local updateFn = function(result, transform, tag, slotId, addModelFn, params)
    local id = params.modules[slotId].info.id
    local module = params.modules[params.classedModules[id].slotId]
    local info = module.info

    local hTrans = coor.transZ(info.height - 0.8)
    local hTransP = coor.transZ(info.height)
    
    local data = params.modules[slotId].info.data
    
    -- Main building to platform faces
    local extra = params.extra[slotId]
    
    local arcs = extra.arcs
    local ptBuildingInfEdge = extra.xInfo.inf.pt + extra.vecNormal * 5
    local ptBuildingSupEdge = extra.xInfo.sup.pt + extra.vecNormal * 5
    
    local vecEdge = (ptBuildingSupEdge - ptBuildingInfEdge):normalized() * 0.85
    
    local ptBuildingInf = ptBuildingInfEdge + vecEdge
    local ptBuildingSup = ptBuildingSupEdge - vecEdge
    
    local ptPlatformInf = extra.xInfo.inf.pt + vecEdge
    local ptPlatformSup = extra.xInfo.sup.pt - vecEdge
    
    local platformPts = {}
    for i, arc in ipairs(arcs) do
        local lRad = arc.sup - arc.inf
        if (i > 1 and i < #arcs) then
            insert(platformPts, func.map({0, 0.25, 0.5, 0.75}, function(rad) return arc:pt(rad * lRad + arc.inf) end))
        elseif (i == 1 and i < #arcs) then
            local rad = arc:rad(ptPlatformInf)
            local pct = (rad - arc.inf) / lRad
            local rads = func.filter({0, 0.25, 0.5, 0.75}, function(radPct) return radPct > pct end)
            insert(rads, 1, pct)
            insert(platformPts, func.map(rads, function(rad) return arc:pt(rad * lRad + arc.inf) end))
        elseif (i == #arcs and i > 1) then
            local rad = arc:rad(ptPlatformSup)
            local pct = (rad - arc.inf) / lRad
            local rads = func.filter({0, 0.25, 0.5, 0.75, 1}, function(radPct) return radPct < pct end)
            insert(rads, pct)
            insert(platformPts, func.map(rads, function(rad) return arc:pt(rad * lRad + arc.inf) end))
        else
            local pctInf = (arc:rad(ptPlatformInf) - arc.inf) / lRad
            local pctSup = (arc:rad(ptPlatformSup) - arc.inf) / lRad
            local rads = func.filter({0, 0.25, 0.5, 0.75, 1}, function(radPct) return radPct < pctSup and radPct > pctInf end)
            insert(rads, 1, pctInf)
            insert(rads, pctSup)
            insert(platformPts, func.map(rads, function(rad) return arc:pt(rad * lRad + arc.inf) end))
            break
        end
    end
    
    platformPts = func.flatten(platformPts)
    
    local vecTangent = (ptBuildingSup - ptBuildingInf) * (1 / (#platformPts - 1))
    
    insert(result.models, general.newModel("station/rail/era_a/stairs.mdl", tag, hTrans * transform));

    -- Terrains
    local terrainAlignmentLists = pipe.new /
        {
            coor.xyz(config.extend[1], config.extend[4], 0.0) .. (hTrans * transform),
            coor.xyz(config.extend[1], config.extend[3], 0.0) .. (hTrans * transform),
            coor.xyz(config.extend[2], config.extend[3], 0.0) .. (hTrans * transform),
            coor.xyz(config.extend[2], config.extend[4], 0.0) .. (hTrans * transform),
        }
        * pipe.map(pipe.map(coor.vec2Tuple))
    
    insert(result.terrainAlignmentLists, {
        type = "EQUAL",
        faces = terrainAlignmentLists,
        optional = true
    })

    -- Main building to platform Connection
    insert(result.invokeLater, function()
        local lanePts = pipe.new * params.extra[slotId].slotIds
            * pipe.map(function(slotId) return data > 5 and params.extra[slotId].leftLane or params.extra[slotId].rightLane end)
            * pipe.flatten()
            * pipe.filter(function(pt) return ((pt - ptBuildingSup):dot(vecTangent)) * ((pt - ptBuildingInf):dot(vecTangent)) < 0 end)
        
        for _, pt in ipairs(connectors) do
            local pt = pt .. (hTransP * transform)
            local closesetPt = lanePts
                * pipe.map(function(lpt) return {pt = lpt, distance = (lpt - pt):length2()} end)
                * pipe.min(function(lhs, rhs) return lhs.distance < rhs.distance end)
            local lpt = closesetPt.pt
            insert(result.models, ust.unitLane(lpt, pt, tag))
        end
    end)
end
function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        buildMode = "SINGLE",
        cost = {
            price = 0,
        },
        description = {
            name = _("MENU_MODULE_STAIRS_ENTRY"),
            description = _("MENU_MODULE_STAIRS_ENTRY_DESC"),
            icon = "ui/construction/station/rail/modular_station/stairs.tga"
        },
        category = {
            categories = {"ust_cat_building"},
        },
        type = "ust_component_main_10",
        order = {
            value = 260,
        },
        metadata = {
            scriptName = "construction/station/rail/ust/era_c/main_building",
            classify = "classify",
            typeName = "ust_component_main_10",
            isComponent = true,
            isBuilding = true,
            typeId = 31,
        },
        
        updateFn = updateFn,
        
        getModelsFn = function(params)
            return {}
        end
    }

end

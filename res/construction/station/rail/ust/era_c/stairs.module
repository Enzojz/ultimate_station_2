local func = require "ust/func"
local coor = require "ust/coor"
local pipe = require "ust/pipe"
local ust = require "ust"

local insert = table.insert

local config = {
    extend = {5, -5, 0, -5, 0, 0},
}

local connectors = {
    coor.xyz(0, 0, 0),
}

local updateFn = function(result, transform, tag, slotId, addModelFn, params)
    local hTrans = coor.transZ(-0.8)
    
    local id = params.modules[slotId].info.id
    local data = params.modules[slotId].info.data
    local moduleSlotId = params.classedModules[id].slotId
    
    insert(result.models, ust.newModel("station/rail/era_a/stairs.mdl", tag, hTrans * transform));
    
    -- Terrains
    local terrainAlignmentLists = pipe.new /
        {
            coor.xyz(config.extend[1], config.extend[4], 0.0) .. (hTrans * transform),
            coor.xyz(config.extend[1], config.extend[3], 0.0) .. (hTrans * transform),
            coor.xyz(config.extend[2], config.extend[3], 0.0) .. (hTrans * transform),
            coor.xyz(config.extend[2], config.extend[4], 0.0) .. (hTrans * transform),
        }
        * pipe.map(pipe.map(coor.vec2Tuple))
    
    insert(result.terrainAlignmentLists, {
        type = "EQUAL",
        faces = terrainAlignmentLists,
        optional = true
    })

    local groundFace = func.map({
        coor.xyz(config.extend[1], config.extend[4], 0.0) .. transform,
        coor.xyz(config.extend[1], config.extend[3], 0.0) .. transform,
        coor.xyz(config.extend[2], config.extend[3], 0.0) .. transform,
        coor.xyz(config.extend[2], config.extend[4], 0.0) .. transform,
    }, coor.vec2Tuple)
    
    insert(result.groundFaces, {
        face = groundFace,
        modes = {
            {
                type = "FILL",
                key = "shared/asphalt_01.gtex.lua"
            },
            {
                type = "STROKE_OUTER",
                key = "street_border.lua"
            },
        },
    })
    
    if data % 10 ~= 0 then
        insert(result.invokeLater, function()
            local lanePts = {}
            if data < 10 then
                if data < 5 then
                    lanePts = params.extra[moduleSlotId].rightLane
                else
                    lanePts = params.extra[moduleSlotId].leftLane
                end
            elseif data < 30 then
                lanePts = {params.extra[moduleSlotId].leftLane[#params.extra[moduleSlotId].leftLane], params.extra[moduleSlotId].rightLane[#params.extra[moduleSlotId].rightLane]}
            else
                lanePts = {params.extra[moduleSlotId].leftLane[1], params.extra[moduleSlotId].rightLane[1]}
            end
            
            for _, pt in ipairs(connectors) do
                local pt = pt .. transform
                local closesetPt = pipe.new * lanePts
                    * pipe.map(function(lpt) return {pt = lpt, distance = (lpt - pt):length2()} end)
                    * pipe.min(function(lhs, rhs) return lhs.distance < rhs.distance end)
                local lpt = closesetPt.pt
                insert(result.models, ust.unitLane(lpt, pt, tag))
            end
        end)
    end
end
function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        buildMode = "SINGLE",
        cost = {
            price = 0,
        },
        description = {
            name = _("MENU_MODULE_STAIRS_ENTRY"),
            description = _("MENU_MODULE_STAIRS_ENTRY_DESC"),
        },
        category = {
            categories = {"ust_cat_entry"},
        },
        type = "ust_component_main_10",
        order = {
            value = 260,
        },
        metadata = {
            scriptName = "construction/station/rail/ust/era_c/main_building",
            classify = "classify",
            typeName = "ust_component_main_10",
            isComponent = true,
            isBuilding = true,
            typeId = 31,
        },
        
        updateFn = updateFn,
        
        getModelsFn = function(params)
            return {}
        end
    }

end

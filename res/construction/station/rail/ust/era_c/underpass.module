local func = require "ust/func"
local coor = require "ust/coor"
local quat = require "ust/quaternion"
local ust = require "ust"
local insert = table.insert
--
local bottomConnector = {
    coor.xyz(-0.95, -6.5, -4.4),
    coor.xyz(0.95, -6.5, -4.4)
}

local fitModel = ust.fitModel(1.9, 1.45, -1, true, true)

local updateFn = function(result, transform, tag, slotId, addModelFn, params)
    local id = params.modules[slotId].info.id
    local info = params.modules[params.classedModules[id].slotId].info
    
    local n = 4
    local centerPts = ust.basePts(info.arcs.center, n)
    local refPos = centerPts[3]
    local refVec = centerPts[4] - centerPts[3]
    local trans = coor.transY(-0.1)
        * quat.byVec(coor.xyz(0, 1, 0), refVec):mRot()
        * coor.trans(refPos)
    
    insert(result.models, ust.newModel("ust/platform/era_c/underpass_top.mdl", tag, trans));
    insert(result.models, ust.newModel("ust/platform/era_c/underpass_middle.mdl", tag, trans));
    insert(result.models, ust.newModel("ust/platform/era_c/underpass_tunnel.mdl", tag, coor.trans(coor.xyz(0, -6.5, -4.4)) * trans));
    insert(result.models, ust.newModel("ust/platform/era_c/underpass_wall.mdl", tag, coor.rotZ180 * coor.trans(coor.xyz(0, -7.225, -4.4)) * trans));
    
    local pts = func.map({
        coor.xyz(-2, 1, 0),
        coor.xyz(-2, -5, 0),
        coor.xyz(2, -5, 0),
        coor.xyz(2, 1, 0),
    }, function(pt) return pt .. trans end)
    
    insert(result.models, ust.unitLane(coor.xyz(0, 0.1, 0) .. trans, coor.xyz(0, -0.25, 0) .. trans, nil))
    insert(result.models, ust.unitLane(coor.xyz(0, -0.25, 0) .. trans, coor.xyz(0, -5.75, -4.4) .. trans, nil))
    insert(result.models, ust.unitLane(coor.xyz(0, -5.75, -4.4) .. trans, coor.xyz(0, -6.5, -4.4) .. trans, nil))
    insert(result.models, ust.unitLane(coor.xyz(0, -6.5, -4.4) .. trans, coor.xyz(0.95, -6.5, -4.4) .. trans, nil))
    insert(result.models, ust.unitLane(coor.xyz(0, -6.5, -4.4) .. trans, coor.xyz(-0.95, -6.5, -4.4) .. trans, nil))
    
    -- insert(result.models, ust.unitLane(centerPts[3] .. hTrans, topConnector .. trans, tag))
    insert(result.groundFaces, {face = func.map(pts, coor.vec2Tuple), modes = {{type = "FILL", key = "hole.lua"}}})
    
    local bottomPts = {
        lt = coor.xyz(-0.95, -5.775, -4.4) .. trans,
        lb = coor.xyz(-0.95, -7.225, -4.4) .. trans,
        rb = coor.xyz(0.95, -7.225, -4.4) .. trans,
        rt = coor.xyz(0.95, -5.775, -4.4) .. trans
    }
    result.connectors.underpass[slotId] = {
        pos = info.pos + coor.xyz(info.pos.x * 2, 0, 0),
        bottomPts = bottomPts,
        connectors = func.map(bottomConnector, function(pt) return pt .. trans end)
    }
    
    insert(
        result.invokeLater,
        game.res.script["construction/station/rail/ust/struct/underpass"].invokeLater(result, tag, slotId, fitModel, true)
    )
end
function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        buildMode = "SINGLE",
        cost = {
            price = 0,
        },
        description = {
            name = _("MENU_MODULE_PLATFORM_UNDERPASS"),
            description = _("MENU_MODULE_PLATFORM_UNDERPASS_DESC"),
        },
        category = {
            categories = {"ust_cat_comp"},
        },
        type = "ust_underpass",
        order = {
            value = 303,
        },
        metadata = {
            typeName = "ust_underpass",
            isUnderpass = true,
            isComponent = true,
            typeId = 21,
            width = 5,
            scriptName = "construction/station/rail/ust/struct/underpass",
            classify = "classify",
            addSlot = "addSlot"
        },
        
        updateFn = updateFn,
        
        getModelsFn = function(params)
            return {}
        end
    }

end

local ust = require "ust"
local coor = require "ust/coor"
local insert = table.insert

local setOverlap = function(modules, classedModules, slotId, overlap, dataId)
    local lut = {}
    local function searchModules(slotId)
        lut[slotId] = true
        local m = modules[slotId]
        local info = m.info
        for _, octa in ipairs({info.octa[1], info.octa[5]}) do
            if octa and modules[octa] and (modules[octa].metadata.isPlatform or modules[octa].metadata.isPlaceholder) then
                if not lut[octa] then
                    searchModules(octa)
                end
            end
        end    end
    
    searchModules(slotId)
    for slotId, _ in pairs(lut) do
        local m = modules[slotId]
        local info = m.info
        local id = info.id
        
        if classedModules[id].slot[dataId] then
            modules[classedModules[id].slot[dataId]] = nil
        end
        
        if overlap then
            local addSlot = m.makeData(dataId, overlap)
            modules[addSlot] = {
                metadata = {isData = true},
                name = "station/rail/ust/data/geometry.module",
                updateScript = {
                    fileName = "",
                    params = {}
                },
                variant = 0
            }
        end
    end
end

local preProcessAdd = function(modules, change, classedModules, info)
    if info.type == 93 and info.data == -1 then -- Remove modifer
        modules[ust.base(info.id, 93)] = nil
    elseif info.type == 93 and info.data == 0 then
        modules[ust.base(info.id, 93)] = change.module
    else
        ust.octa(modules, classedModules)
        local id = info.id
        if info.type == 93 and info.data == -2 then
            setOverlap(modules, classedModules, classedModules[info.id].slotId)
        elseif info.type == 94 then
            if info.data > 20 then
                setOverlap(modules, classedModules, classedModules[id].slotId, info.data - 40, 68)
            elseif info.data < 30 then
                setOverlap(modules, classedModules, classedModules[id].slotId, info.data, 67)
            end
        end
    end
end

local preProcessPostAdd = function(modules, change, slotId, classedModules, info)
    if info.type < 50 or (info.type > 79 and info.type ~= 93 and info.type ~= 94) then
        modules[slotId] = nil
    end
end

local slotSetup = function(params, result, slotId)
    local info = params.modules[slotId].info
    local id = info.id
    local parent = params.classedModules[id].slotId
    local m = params.modules[parent]
    
    insert(result.slots, {
        id = slotId,
        transf = m.info.transf,
        type = "ust_overlap_modifier",
        spacing = {0, 0, 0, 0}
    })

end

local classifyData = function(modules, classified, slotId)
    local type, id, data = ust.classifyData(modules, classified, slotId)
    local slotId = classified[id].slotId
    modules[slotId].info.canModifyOverlap = true
end

local addSlot = function(params, result)
    local anyOverlapModifiable = false
    for _, module in pairs(params.modules) do
        anyOverlapModifiable = anyOverlapModifiable or module.info.canModifyOverlap
    end
    
    for id, info in pairs(params.classedModules) do
        local module = params.modules[info.slotId]
        if (module.metadata and (module.metadata.isPlatform or module.metadata.isPlaceholder)) then
            local info = module.info
            local makeData = module.makeData
            local transfPosC = info.transf * coor.transZ(info.height)
            
            if not anyOverlapModifiable then
                table.insert(result.slots, {
                    id = makeData(93, 0),
                    transf = transfPosC,
                    type = "ust_overlap_modifier",
                    spacing = {0, 0, 0, 0}
                })
            end
        end
    end
end

function data()
    return {
        classify = classifyData,
        preProcessAdd = preProcessAdd,
        preProcessPostAdd = preProcessPostAdd,
        slotSetup = slotSetup,
        addSlot = addSlot
    }

end

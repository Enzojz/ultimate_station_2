local coor = require "ust/coor"
local quat = require "ust/quaternion"
local livetext = require "ust/livetext"
local ust = require "ust"

local unpack = table.unpack
local insert = table.insert
local ma = math
local pi = ma.pi

local default = 3
---comment
---@param result result
---@param tag string
---@param slotId number
---@param params params
local updateFn = function(result, transform, tag, slotId, addModelFn, params)
    local id = params.modules[slotId].info.id
    local m = params.modules[params.classedModules[id].slotId]
    local info = m.info
    local makeData = m.makeData
    local pos = params.modules[slotId].info.data
    
    insert(result.slots, {
        id = makeData(89, -1),
        transf = transform,
        type = "ust_wall_height_modifier",
        shape = 2,
        spacing = {0, 0, 0, 0}
    })
    
    local centerPts, vecs = ust.basePts(info.arcs.center, 4)
    local rightPts = ust.basePts(info.arcs.right, 4)
    local leftPts = ust.basePts(info.arcs.left, 4)
    
    local addText = function(label, fTrans, h)
        local nameModelsF, width = livetext(h or 2)(label)
        for _, m in ipairs(nameModelsF(function() return fTrans(width) end)) do
            insert(result.models, m)
        end
    end
    
    local function setButton(data, i, trans)
        insert(result.slots, {
            id = makeData(90, data),
            transf = coor.scale(coor.xyz(0.05, 0.2, 1)) * coor.rotY90N * trans,
            type = "ust_wall_height_modifier",
            spacing = {0, 0, 0, 0}
        })
        
        addText((i > 0 and "+%.1fm" or "%.1fm"):format(i * 0.1),
            function(w) return coor.trans(coor.xyz(i % 2 == 1 and (-w - 0.25) or 0.25, 0, -0.075)) * coor.rotZ90P * trans end,
            0.25)
    end
    
    local rotZ1 = quat.byVec(coor.xyz(0, -1, 0), vecs[1]):mRot()
    local rotZ3 = quat.byVec(coor.xyz(0, -1, 0), vecs[3]):mRot()
    local rotZ5 = quat.byVec(coor.xyz(0, -1, 0), vecs[5]):mRot()
    if pos == 7 then
        local hSlotIdSup = makeData(24, 28)
        local hSlotIdInf = makeData(24, 26)
        local hSup = params.modules[hSlotIdSup] and params.modules[hSlotIdSup].variant * 0.1 or default
        local hInf = params.modules[hSlotIdInf] and params.modules[hSlotIdInf].variant * 0.1 or default
        local loopvars = {
            {30, 1, rotZ1, hInf},
            {60, 3, rotZ3, (hSup + hInf) * 0.5},
            {90, 5, rotZ5, hSup}
        }
        for i = -10, 10, 1 do
            if (i ~= 0) then
                for _, z in ipairs(loopvars) do
                    local diff, ref, rotZ, h = unpack(z)
                    local trans = coor.transY(i % 2 == 1 and -0.2 or 0.2) * coor.rotZ180 * rotZ * coor.trans(leftPts[ref]) * coor.transZ(h + i * 0.1)
                    setButton(i - diff, i, trans)
                end
            end
        end
        
        addText("⊘",
            function(w) return coor.trans(coor.xyz(-0.5 * w, 0, -0.4)) * coor.rotZ90N * rotZ3 * coor.trans(leftPts[3]) * coor.transZ((hSup + hInf) * 0.5 - 2) end,
            1)
        
        addText(("%.1fm"):format(hInf),
            function(w) return coor.transX(-0.5 * w) * coor.rotZ90N * rotZ1 * coor.trans(leftPts[1]) * coor.transZ(hInf - 2) end,
            1)
        
        addText(("%.1fm"):format(hSup),
            function(w) return coor.transX(-0.5 * w) * coor.rotZ90N * rotZ5 * coor.trans(leftPts[5]) * coor.transZ(hSup - 2) end,
            1)

        insert(result.slots, {
            id = makeData(89, -7),
            transf = coor.scale(coor.xyz(0.5, 0.5, 1)) * coor.rotY90P * rotZ3 * coor.trans(leftPts[3]) * coor.transZ((hSup + hInf) * 0.5 - 2),
            type = "ust_wall_height_modifier",
            shape = 0,
            spacing = {0, 0, 0, 0}
        })
        
        insert(result.slots, {
            id = makeData(89, 16),
            transf = coor.scale(coor.xyz(0.5, 0.5, 1)) * coor.rotZ90N * coor.rotY90P * rotZ1 * coor.trans(leftPts[1]) * coor.transZ(hInf - 2),
            type = "ust_wall_height_modifier",
            shape = 1,
            spacing = {0, 0, 0, 0}
        })
        
        insert(result.slots, {
            id = makeData(89, 18),
            transf = coor.scale(coor.xyz(0.5, 0.5, 1)) * coor.rotZ90P * coor.rotY90P * rotZ5 * coor.trans(leftPts[5]) * coor.transZ(hSup - 2),
            type = "ust_wall_height_modifier",
            shape = 1,
            spacing = {0, 0, 0, 0}
        })
    elseif pos == 3 then
        local hSlotIdSup = makeData(24, 22)
        local hSlotIdInf = makeData(24, 24)
        local hSup = params.modules[hSlotIdSup] and params.modules[hSlotIdSup].variant * 0.1 or default
        local hInf = params.modules[hSlotIdInf] and params.modules[hSlotIdInf].variant * 0.1 or default
        local loopvars = {
            {30, 1, rotZ1, hInf},
            {60, 3, rotZ3, (hSup + hInf) * 0.5},
            {90, 5, rotZ5, hSup}
        }
        for i = -10, 10, 1 do
            if (i ~= 0) then
                for _, z in ipairs(loopvars) do
                    local diff, ref, rotZ, h = unpack(z)
                    local trans = coor.transY(i % 2 == 1 and -0.2 or 0.2) * rotZ * coor.trans(rightPts[ref]) * coor.transZ(h + i * 0.1)
                    setButton(i + diff, i, trans)
                end
            end
        end
        
        addText("⊘",
            function(w) return coor.trans(coor.xyz(-0.5 * w, 0, -0.4)) * coor.rotZ90P * rotZ3 * coor.trans(rightPts[3]) * coor.transZ((hSup + hInf) * 0.5 - 2) end,
            1)
        
        addText(("%.1fm"):format(hInf),
            function(w) return coor.transX(-0.5 * w) * coor.rotZ90P * rotZ1 * coor.trans(rightPts[1]) * coor.transZ(hInf - 2) end,
            1)
        
        addText(("%.1fm"):format(hSup),
            function(w) return coor.transX(-0.5 * w) * coor.rotZ90P * rotZ5 * coor.trans(rightPts[5]) * coor.transZ(hSup - 2) end,
            1)
        
        insert(result.slots, {
            id = makeData(89, -3),
            transf = coor.scale(coor.xyz(0.5, 0.5, 1)) * coor.rotY90N * rotZ3 * coor.trans(rightPts[3]) * coor.transZ((hSup + hInf) * 0.5 - 2),
            type = "ust_wall_height_modifier",
            shape = 0,
            spacing = {0, 0, 0, 0}
        })
        
        insert(result.slots, {
            id = makeData(89, 14),
            transf = coor.scale(coor.xyz(0.5, 0.5, 1)) * coor.rotZ90N * coor.rotY90N * rotZ1 * coor.trans(rightPts[1]) * coor.transZ(hInf - 2),
            type = "ust_wall_height_modifier",
            shape = 1,
            spacing = {0, 0, 0, 0}
        })
        
        insert(result.slots, {
            id = makeData(89, 12),
            transf = coor.scale(coor.xyz(0.5, 0.5, 1)) * coor.rotZ90P * coor.rotY90N * rotZ5 * coor.trans(rightPts[5]) * coor.transZ(hSup - 2),
            type = "ust_wall_height_modifier",
            shape = 1,
            spacing = {0, 0, 0, 0}
        })
    elseif pos == 1 then
        local hSlotIdLeft = makeData(24, 28)
        local hSlotIdRight = makeData(24, 22)
        local hLeft = params.modules[hSlotIdLeft] and params.modules[hSlotIdLeft].variant * 0.1 or default
        local hRight = params.modules[hSlotIdRight] and params.modules[hSlotIdRight].variant * 0.1 or default
        for i = -10, 10, 1 do
            if (i ~= 0) then
                setButton(i - 90, i,
                    coor.transY(i % 2 == 1 and -0.2 or 0.2) * rotZ5 * coor.rotZ90P * coor.trans(leftPts[5]) * coor.transZ(hLeft + i * 0.1))
                
                setButton(i + 90, i,
                    coor.transY(i % 2 == 1 and -0.2 or 0.2) * rotZ5 * coor.rotZ90P * coor.trans(rightPts[5]) * coor.transZ(hRight + i * 0.1))
                
                setButton(i + 120, i,
                    coor.transY(i % 2 == 1 and -0.2 or 0.2) * rotZ5 * coor.rotZ90P * coor.trans(centerPts[5]) * coor.transZ((hRight + hLeft) * 0.5 + i * 0.1))
            end
        end
        
        addText(("%.1fm"):format(hLeft),
            function(w) return coor.transX(-0.5 * w) * coor.rotZ180 * rotZ5 * coor.trans(leftPts[5]) * coor.transZ(hLeft - 2) end,
            1)
        
        addText(("%.1fm"):format(hRight),
            function(w) return coor.transX(-0.5 * w) * coor.rotZ180 * rotZ5 * coor.trans(rightPts[5]) * coor.transZ(hRight - 2) end,
            1)
    elseif pos == 5 then
        local hSlotIdLeft = makeData(24, 26)
        local hSlotIdRight = makeData(24, 24)
        local hLeft = params.modules[hSlotIdLeft] and params.modules[hSlotIdLeft].variant * 0.1 or default
        local hRight = params.modules[hSlotIdRight] and params.modules[hSlotIdRight].variant * 0.1 or default
        for i = -10, 10, 1 do
            if (i ~= 0) then
                setButton(i - 30, i,
                    coor.transY(i % 2 == 1 and -0.2 or 0.2) * rotZ1 * coor.rotZ90N * coor.trans(leftPts[1]) * coor.transZ(hLeft + i * 0.1))
                
                setButton(i + 30, i,
                    coor.transY(i % 2 == 1 and -0.2 or 0.2) * rotZ1 * coor.rotZ90N * coor.trans(rightPts[1]) * coor.transZ(hRight + i * 0.1))
                
                setButton(i, i,
                    coor.transY(i % 2 == 1 and -0.2 or 0.2) * rotZ1 * coor.rotZ90N * coor.trans(centerPts[1]) * coor.transZ((hRight + hLeft) * 0.5 + i * 0.1))
            end
        end
        
        addText(("%.1fm"):format(hLeft),
            function(w) return coor.transX(-0.5 * w) * rotZ1 * coor.trans(leftPts[1]) * coor.transZ(hLeft - 2) end,
            1)
        
        addText(("%.1fm"):format(hRight),
            function(w) return coor.transX(-0.5 * w) * rotZ1 * coor.trans(rightPts[1]) * coor.transZ(hRight - 2) end,
            1)
    end
end

function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        visible = false,
        buildMode = "SINGLE",
        cost = {
            price = 0,
        },
        description = {
            name = _("MENU_HEIGHT_MODIFIER"),
            description = _("MENU_HEIGHT_MODIFIER_DESC"),
        },
        category = {
            categories = {"ust_cat_modifier"},
        },
        type = "ust_wall_height_modifier",
        order = {
            value = 7,
        },
        metadata = {
            typeName = "ust_wall_height_modifier",
            isData = true,
            type = 89,
            scriptName = "construction/station/rail/ust/modifier/wall_height",
            preProcessAdd = "preProcessAdd",
            preProcessPostAdd = "preProcessPostAdd",
            classify = "classify",
            postClassify = "postClassify",
            slotSetup = "slotSetup"
        },
        
        updateFn = updateFn,
        
        getModelsFn = function(params)
            return {}
        end
    }

end

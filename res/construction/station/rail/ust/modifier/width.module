local coor = require "ust/coor"
local quat = require "ust/quaternion"
local livetext = require "ust/livetext"
local ust = require "ust"

local unpack = table.unpack
local insert = table.insert
local ma = math
local pi = ma.pi

---comment
---@param result result
---@param tag string
---@param slotId number
---@param params params
local updateFn = function(result, transform, tag, slotId, addModelFn, params)
    local id = params.modules[slotId].info.id
    local sId = params.classedModules[id].slotId
    local info = params.modules[sId].info
    local refH = (params.modules[sId].metadata.isPlatform and params.platformHeight or params.modules[sId].metadata.height) + (params.modules[sId].info.extraHeight or 0)
    local width = info.width
    local transZ = coor.transZ(refH)
    local makeData = params.modules[sId].makeData
    
    -- Entry for radius system
    local arcs = info.arcs
    local transf = info.transf * transZ
    
    insert(result.slots, {
        id = makeData(85, -1),
        transf = transf,
        type = "ust_width_modifier",
        spacing = {0, 0, 0, 0}
    })
    
    local rad = arcs.center.inf
    local posL, posR = arcs.left:pt(rad), arcs.right:pt(rad)
    local vec = (posR - posL):normalized()
    local rotZ = quat.byVec(coor.xyz(1, 0, 0), vec):mRot()
    local textR = ("W: %.1fm"):format(width)
    
    local addText = function(label, pos, fTrans, h)
        local nameModelsF, width = livetext(h or 2)(label)
        for _, m in ipairs(nameModelsF(function() return fTrans(width) * coor.rotX(-0.5 * pi) * rotZ * coor.trans(pos) * transZ end)) do
            insert(result.models, m)
        end
    end
    
    local centerPts = ust.basePts(info.arcs.center, 12)
    local rightPts = ust.basePts(info.arcs.right, 12)
    local leftPts = ust.basePts(info.arcs.left, 12)
    
    addText(textR, centerPts[7], function(w) return coor.trans(coor.xyz(-0.5 * w, 0, 0)) end, 0.5)
    
    insert(result.slots, {
        id = makeData(85, -2),
        transf = coor.scale(coor.xyz(0.5, 0.5, 0.5)) * coor.trans(centerPts[4]) * transZ,
        type = "ust_width_modifier",
        spacing = {0, 0, 0, 0}
    })
    
    addText("âŠ˜", centerPts[4], function(w) return coor.trans(coor.xyz(-w, 0, -0.35)) end, 1)
         
    for i = -10, 10, 1 do
        if (i ~= 0) then
            local dw = coor.xyz(i * 0.1, 0, 0)
            insert(result.slots, {
                id = makeData(86, info.width * 10 + i),
                transf = coor.scale(coor.xyz(0.025, 1,2, 1)) * coor.trans(leftPts[7] - dw) * transZ,
                type = "ust_width_modifier",
                shape = 0,
                spacing = {0, 0, 0, 0}
            })
            
            insert(result.slots, {
                id = makeData(86, info.width * 10 + i),
                transf = coor.scale(coor.xyz(0.025, 1.2, 1)) * coor.trans(rightPts[7] + dw) * transZ,
                type = "ust_width_modifier",
                shape = 0,
                spacing = {0, 0, 0, 0}
            })
            
            if i % 2 == 1 then
                addText((i > 0 and "+%.1fm" or "%.1fm"):format(i * 0.1), leftPts[6] - dw, function(w) return coor.trans(coor.xyz(-w, 0, -0.075)) * coor.rotY(-0.5 * pi) * coor.transX(-0.1) end, 0.25)
                addText((i > 0 and "+%.1fm" or "%.1fm"):format(i * 0.1), rightPts[6] + dw, function(w) return coor.trans(coor.xyz(-w, 0, -0.075)) * coor.rotY(0.5 * pi) * coor.transX(0.1) end, 0.25)
            else
                addText((i > 0 and "+%.1fm" or "%.1fm"):format(i * 0.1), leftPts[8] - dw, function(w) return coor.trans(coor.xyz(0, 0, -0.075)) * coor.rotY(-0.5 * pi) * coor.transX(-0.1) end, 0.25)
                addText((i > 0 and "+%.1fm" or "%.1fm"):format(i * 0.1), rightPts[8] + dw, function(w) return coor.trans(coor.xyz(0, 0, -0.075)) * coor.rotY(0.5 * pi) * coor.transX(0.1) end, 0.25)
            end
        end
    end
end

function data()
    return {
        availability = {
            yearFrom = 0,
            yearTo = 0,
        },
        visible = false,
        buildMode = "SINGLE",
        cost = {
            price = 0,
        },
        description = {
            name = _("MENU_WIDTH_MODIFIER"),
            description = _("MENU_WIDTH_MODIFIER_DESC"),
        },
        category = {
            categories = {"ust_cat_modifier"},
        },
        type = "ust_width_modifier",
        order = {
            value = 4,
        },
        metadata = {
            typeName = "ust_width_modifier",
            isData = true,
            type = 85,
            scriptName = "construction/station/rail/ust/modifier/width",
            preProcessAdd = "preProcessAdd",
            preProcessPostAdd = "preProcessPostAdd",
            classify = "classify",
            slotSetup = "slotSetup"
        },
        
        updateFn = updateFn,
        
        getModelsFn = function(params)
            return {}
        end
    }

end

local ust = require "ust"
local coor = require "ust/coor"
local quat = require "ust/quaternion"
local insert = table.insert

local setHeight = function(modules, classedModules, slotId, octa, height)
    if height then
        local m = modules[slotId]
        local addSlot = m.makeData(24, 20 + octa)
        print(addSlot)
        print(height)
        modules[addSlot] = {
            metadata = {isData = true},
            name = "station/rail/ust/data/geometry.module",
            updateScript = {
                fileName = "",
                params = {}
            },
            variant = height
        }
    end
end

local default = 30
local preProcessAdd = function(modules, change, classedModules, info)
    local id = info.id
    local m = modules[classedModules[id].slotId]
    if info.type == 89 and info.data == -1 then -- Remove modifer
        if modules[m.makeData(89, 1)] then modules[m.makeData(89, 1)] = nil end
        if modules[m.makeData(89, 3)] then modules[m.makeData(89, 3)] = nil end
        if modules[m.makeData(89, 5)] then modules[m.makeData(89, 5)] = nil end
        if modules[m.makeData(89, 7)] then modules[m.makeData(89, 7)] = nil end
    elseif info.type == 89 and info.data == -2 then
        elseif info.type == 89 and info.data > 0 then
        modules[change.slotId] = change.module
        else
            ust.octa(modules, classedModules)
            if info.type == 90 then
                local getHeight = function(octa)
                    local slotId = m.makeData(24, 20 + octa)
                    return modules[slotId] and modules[slotId].variant or default
                end
                print(info.data)
                if info.data < -75 then
                    local delta = info.data + 90
                    local wallHeight = getHeight(8)
                    local newHeight = wallHeight + delta
                    setHeight(modules, classedModules, classedModules[id].slotId, 8, newHeight)
                elseif info.data < -45 then
                    local delta = info.data + 60
                    local wallHeightSup = getHeight(8)
                    local wallHeightInf = getHeight(6)
                    local wallHeight = (wallHeightSup + wallHeightInf) * 0.5
                    local newHeight = math.floor(wallHeight + delta)
                    setHeight(modules, classedModules, classedModules[id].slotId, 6, newHeight)
                    setHeight(modules, classedModules, classedModules[id].slotId, 8, newHeight)
                elseif info.data < -15 then
                    local delta = info.data + 30
                    local wallHeight = getHeight(6)
                    local newHeight = wallHeight + delta
                    setHeight(modules, classedModules, classedModules[id].slotId, 6, newHeight)
                elseif info.data < 15 then
                    local delta = info.data
                    local wallHeightLeft = getHeight(6)
                    local wallHeightRight = getHeight(4)
                    local wallHeight = (wallHeightLeft + wallHeightRight) * 0.5
                    local newHeight = math.floor(wallHeight + delta)
                    setHeight(modules, classedModules, classedModules[id].slotId, 6, newHeight)
                    setHeight(modules, classedModules, classedModules[id].slotId, 4, newHeight)
                elseif info.data < 45 then
                    local delta = info.data - 30
                    local wallHeight = getHeight(4)
                    local newHeight = wallHeight + delta
                    setHeight(modules, classedModules, classedModules[id].slotId, 4, newHeight)
                elseif info.data < 75 then
                    local delta = info.data - 60
                    local wallHeightSup = getHeight(2)
                    local wallHeightInf = getHeight(4)
                    local wallHeight = (wallHeightSup + wallHeightInf) * 0.5
                    local newHeight = math.floor(wallHeight + delta)
                    setHeight(modules, classedModules, classedModules[id].slotId, 4, newHeight)
                    setHeight(modules, classedModules, classedModules[id].slotId, 2, newHeight)
                elseif info.data < 105 then
                    local delta = info.data - 90
                    local wallHeight = getHeight(2)
                    local newHeight = wallHeight + delta
                    setHeight(modules, classedModules, classedModules[id].slotId, 2, newHeight)
                else
                    local delta = info.data - 120
                    local wallHeightLeft = getHeight(8)
                    local wallHeightRight = getHeight(2)
                    local wallHeight = (wallHeightLeft + wallHeightRight) * 0.5
                    local newHeight = math.floor(wallHeight + delta)
                    setHeight(modules, classedModules, classedModules[id].slotId, 8, newHeight)
                    setHeight(modules, classedModules, classedModules[id].slotId, 2, newHeight)
                end
            end
    end
end

local preProcessPostAdd = function(modules, change, slotId, classedModules, info)
    if info.type < 50 or (info.type > 79 and info.type ~= 89 and info.type ~= 90) then
        modules[slotId] = nil
    end
end

local slotSetup = function(params, result, slotId)
    local info = params.modules[slotId].info
    local id = info.id
    local parent = params.classedModules[id].slotId
    local m = params.modules[parent]
    
    insert(result.slots, {
        id = slotId,
        transf = m.info.transf,
        type = "ust_wall_height_modifier",
        spacing = {0, 0, 0, 0}
    })

end

local classifyData = function(modules, classified, slotId)
    local type, id, data = ust.classifyData(modules, classified, slotId)
    local slotId = classified[id].slotId
    modules[slotId].info.canModifyWallHeight = true
end

local addSlot = function(params, result)
    local anyWallHeightModifiable = false
    for _, module in pairs(params.modules) do
        anyWallHeightModifiable = anyWallHeightModifiable or module.info.canModifyWallHeight
    end
    
    for slotId, module in pairs(params.modules) do
        if (module.metadata and module.metadata.isWall) then
            local data = module.info.data
            local parentSlotId = params.classedModules[module.info.id].slotId
            local m = params.modules[parentSlotId]
            local info = m.info
            local makeData = m.makeData
            local refH = info.height
            
            local rightPts, rightVecs = ust.basePts(info.arcs.right, 4)
            local leftPts, leftVecs = ust.basePts(info.arcs.left, 4)
            local centerPts, centerVecs = ust.basePts(info.arcs.center, 4)
            
            if not anyWallHeightModifiable then
                if data == 3 then
                    table.insert(result.slots, {
                        id = makeData(89, 3),
                        transf = coor.scale(coor.xyz(0.2, 1, 1)) * quat.byVec(coor.xyz(0, 1, 0), rightVecs[3]):mRot() * coor.trans(rightPts[3]) * coor.transZ(refH),
                        type = "ust_wall_height_modifier",
                        spacing = {0, 0, 0, 0}
                    })
                elseif data == 7 then
                    table.insert(result.slots, {
                        id = makeData(89, 7),
                        transf = coor.scale(coor.xyz(0.2, 1, 1)) * quat.byVec(coor.xyz(0, 1, 0), leftVecs[3]):mRot() * coor.trans(leftPts[3]) * coor.transZ(refH),
                        type = "ust_wall_height_modifier",
                        spacing = {0, 0, 0, 0}
                    })
                elseif data == 1 then
                    table.insert(result.slots, {
                        id = makeData(89, 1),
                        transf = coor.scale(coor.xyz(0.2, 1, 1)) * quat.byVec(coor.xyz(1, 0, 0), centerVecs[5]):mRot() * coor.trans(centerPts[5]) * coor.transZ(refH),
                        type = "ust_wall_height_modifier",
                        spacing = {0, 0, 0, 0}
                    })
                elseif data == 5 then
                    table.insert(result.slots, {
                        id = makeData(89, 5),
                        transf = coor.scale(coor.xyz(0.2, 1, 1)) * quat.byVec(coor.xyz(1, 0, 0), centerVecs[1]):mRot() * coor.trans(centerPts[1]) * coor.transZ(refH),
                        type = "ust_wall_height_modifier",
                        spacing = {0, 0, 0, 0}
                    })
                end
            end
        end
    end
end

function data()
    return {
        classify = classifyData,
        preProcessAdd = preProcessAdd,
        preProcessPostAdd = preProcessPostAdd,
        slotSetup = slotSetup,
        addSlot = addSlot
    }

end

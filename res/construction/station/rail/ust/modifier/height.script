local ust = require "ust"
local coor = require "ust/coor"
local insert = table.insert
local dump = require "luadump"

local setHeight = function(modules, classedModules, slotId, height)
    local m = modules[slotId]
    local info = m.info
    local id = info.id
    
    if classedModules[id].slot[59] then
        modules[classedModules[id].slot[59]] = nil
    end
    
    if height then
        local addSlot = m.makeData(59, height)
        modules[addSlot] = {
            metadata = {isData = true},
            name = "station/rail/ust/data/geometry.module",
            updateScript = {
                fileName = "",
                params = {}
            },
            variant = 0
        }
    end
end

local setPlatformHeight = function(modules, classedModules, slotId, height)
    local lut = {}
    local function searchModules(slotId)
        lut[slotId] = true
        local m = modules[slotId]
        local info = m.info
        for _, octa in ipairs({info.octa[1], info.octa[5], info.octa[3], info.octa[7]}) do
            if octa and modules[octa] and modules[octa].metadata.isPlatform then
                if not lut[octa] then
                    searchModules(octa)
                end
            end
        end
    end
    
    searchModules(slotId)
    
    for slotId, _ in pairs(lut) do
        setHeight(modules, classedModules, slotId, height)
    end
end


local setTrackHeight = function(modules, classedModules, slotId, height)
    local lut = {}
    local function searchModules(slotId)
        lut[slotId] = true
        local m = modules[slotId]
        local info = m.info
        for _, octa in ipairs({info.octa[1], info.octa[5]}) do
            if octa and modules[octa] and (modules[octa].metadata.isTrack) then
                if not lut[octa] then
                    searchModules(octa)
                end
            end
        end
    end
    
    searchModules(slotId)
    
    for slotId, _ in pairs(lut) do
        setHeight(modules, classedModules, slotId, height)
    end
end

local setStreetHeight = function(modules, classedModules, slotId, height)
    local lut = {}
    local function searchModules(slotId)
        lut[slotId] = true
        local m = modules[slotId]
        local info = m.info
        for _, octa in ipairs({info.octa[1], info.octa[5]}) do
            if octa and modules[octa] and (modules[octa].metadata.isStreet) then
                if not lut[octa] then
                    searchModules(octa)
                end
            end
        end
    end
    
    searchModules(slotId)
    for slotId, _ in pairs(lut) do
        setHeight(modules, classedModules, slotId, height)
    end
end


local setPlaceholderHeight = function(modules, classedModules, slotId, height)
    local lut = {}
    local function searchModules(slotId)
        lut[slotId] = true
        local m = modules[slotId]
        local info = m.info
        for _, octa in ipairs({info.octa[1], info.octa[5]}) do
            if octa and modules[octa] and modules[octa].metadata.isPlaceholder then
                if not lut[octa] then
                    searchModules(octa)
                end
            end
        end
    end
    
    searchModules(slotId)
    
    for slotId, _ in pairs(lut) do
        setHeight(modules, classedModules, slotId, height)
    end
end


local preProcessAdd = function(modules, change, classedModules, info)
    if info.type == 83 and info.data == -1 then -- Remove modifer
        modules[ust.base(info.id, 83)] = nil
    elseif info.type == 83 and info.data == -2 then
        ust.octa(modules, classedModules)
        if classedModules[info.id].slot[59] then
            modules[classedModules[info.id].slot[59]] = nil
        end
    elseif info.type == 83 and info.data == 0 then
        modules[ust.base(info.id, 83)] = change.module
    else
        ust.octa(modules, classedModules)
        local id = info.id
        local m = modules[classedModules[id].slotId]
        if info.type == 83 and info.data > 0 then
            local slotId = m.info.octa[info.data]
            if slotId and modules[slotId] then
                local extraHeight = (modules[slotId].info.extraHeight or 0) * 10
                if extraHeight == 0 then
                    extraHeight = nil
                end
                if m.metadata.isTrack then
                    setTrackHeight(modules, classedModules, classedModules[id].slotId, extraHeight)
                elseif m.metadata.isStreet then
                    setStreetHeight(modules, classedModules, classedModules[id].slotId, extraHeight)
                elseif m.metadata.isPlatform then
                    setHeight(modules, classedModules, classedModules[id].slotId, extraHeight)
                elseif m.metadata.isPlaceholder then
                    setHeight(modules, classedModules, classedModules[id].slotId, extraHeight)
                end
            end
        elseif info.type == 83 and info.data == -3 then
            local extraHeight = (m.info.extraHeight or 0) * 10
            if extraHeight == 0 then
                extraHeight = nil
            end
            
            if m.metadata.isTrack then
                setTrackHeight(modules, classedModules, classedModules[id].slotId, extraHeight)
            elseif m.metadata.isStreet then
                setStreetHeight(modules, classedModules, classedModules[id].slotId, extraHeight)
            elseif m.metadata.isPlatform then
                setPlatformHeight(modules, classedModules, classedModules[id].slotId, extraHeight)
            elseif m.metadata.isPlaceholder then
                setPlaceholderHeight(modules, classedModules, classedModules[id].slotId, extraHeight)
            end
        elseif info.type == 84 then
            local delta = info.data
            local extraHeight = (m.info.extraHeight or 0) * 10 + delta
            if extraHeight > 999 then extraHeight = 999 elseif extraHeight < -999 then extraHeight = -999 end
            if m.metadata.isTrack then
                setTrackHeight(modules, classedModules, classedModules[id].slotId, extraHeight)
            elseif m.metadata.isStreet then
                setStreetHeight(modules, classedModules, classedModules[id].slotId, extraHeight)
            elseif m.metadata.isPlatform then
                setHeight(modules, classedModules, classedModules[id].slotId, extraHeight)
            elseif m.metadata.isPlaceholder then
                setHeight(modules, classedModules, classedModules[id].slotId, extraHeight)
            end
        end
    end
end

local preProcessPostAdd = function(modules, change, slotId, classedModules, info)
    if info.type < 50 or (info.type > 79 and info.type ~= 83 and info.type ~= 84) then
        modules[slotId] = nil
    end
end

local slotSetup = function(params, result, slotId)
    local info = params.modules[slotId].info
    local id = info.id
    local parent = params.classedModules[id].slotId
    local m = params.modules[parent]
    
    insert(result.slots, {
        id = slotId,
        transf = m.info.transf,
        type = "ust_height_modifier",
        spacing = {0, 0, 0, 0}
    })

end

local classifyData = function(modules, classified, slotId)
    local type, id, data = ust.classifyData(modules, classified, slotId)
    local slotId = classified[id].slotId
    modules[slotId].info.canModifyHeight = true
end

local addSlot = function(params, result)
    local anyHeightModifiable = false
    for _, module in pairs(params.modules) do
        anyHeightModifiable = anyHeightModifiable or module.info.canModifyHeight
    end
    
    for id, info in pairs(params.classedModules) do
        local module = params.modules[info.slotId]
        if (module.metadata and (module.metadata.isTrack or module.metadata.isStreet or module.metadata.isPlatform or module.metadata.isPlaceholder)) then
            local info = module.info
            local makeData = module.makeData
            local refH = (module.metadata.isPlatform and params.platformHeight or module.metadata.height) + (info.extraHeight or 0)
            local transfPosC = info.transf * coor.transZ(refH)
            
            if not anyHeightModifiable then
                table.insert(result.slots, {
                    id = makeData(83, 0),
                    transf = transfPosC,
                    type = "ust_height_modifier",
                    spacing = {0, 0, 0, 0}
                })
            end
        end
    end
end

function data()
    return {
        classify = classifyData,
        preProcessAdd = preProcessAdd,
        preProcessPostAdd = preProcessPostAdd,
        slotSetup = slotSetup,
        addSlot = addSlot
    }

end

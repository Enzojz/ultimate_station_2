local ust = require "ust"
local coor = require "ust/coor"

------ arc.sup ------
------- next --------
---left  id  right---
------- prev --------
------ arc.inf ------

local preProcessAdd = function(modules, change, classedModules, info)
    if info.type == 91 and info.data == 1 then
        modules[ust.base(info.id, 91)] = nil
    elseif info.type == 91 and info.data == 0 then
        modules[ust.base(info.id, 91)] = change.module
    elseif info.type == 92 then
        local id = info.id
        
        local oldSlot = classedModules[id].slot[60]
        local _, _, oldData = ust.slotInfo(oldSlot)
        
        if (oldData + info.data ~= 0) then -- Prevent case no ref
            modules[oldSlot] = nil
            
            local addSlot = ust.mixData(ust.base(id, 60), info.data)
            modules[addSlot] = {
                metadata = {isData = true},
                name = "station/rail/ust/data/ref.module",
                updateScript = {
                    fileName = "",
                    params = {}
                },
                variant = 0
            }
            modules[ust.base(info.id, 91)] = nil
        end
    end
end

local preProcessPostAdd = function(modules, change, slotId, classedModules, info)
    if info.type < 50 or (info.type > 79 and info.type ~= 91 and info.type ~= 92) then
        modules[slotId] = nil
    end
end

local classifyData = function(modules, classified, slotId)
    local type, id, data = ust.classifyData(modules, classified, slotId)
    local slotId = classified[id].slotId
    modules[slotId].info.canModifyRef = true
end

local addSlot = function(params, result)
    local anyRefModifiable = false
    for _, module in pairs(params.modules) do
        anyRefModifiable = anyRefModifiable or module.info.canModifyRef
    end
    
    for id, info in pairs(params.classedModules) do
        local module = params.modules[info.slotId]
        if (module.metadata and (module.metadata.isPlatform or module.metadata.isTrack)) then
            local info = module.info
            local makeData = module.makeData
            local transfPosC = info.transf * coor.transZ(info.height)
            
            if not anyRefModifiable or info.canModifyRef then
                table.insert(result.slots, {
                    id = makeData(91, 0),
                    transf = transfPosC,
                    type = "ust_ref_modifier",
                    spacing = {0, 0, 0, 0}
                })
            end
        end
    end
end

function data()
    return {
        classify = classifyData,
        preProcessAdd = preProcessAdd,
        preProcessPostAdd = preProcessPostAdd,
        addSlot = addSlot
    }

end
